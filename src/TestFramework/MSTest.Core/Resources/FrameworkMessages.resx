<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessStringInvalidSyntax" xml:space="preserve">
    <value>Access string has invalid syntax.</value>
  </data>
  <data name="ActualHasMismatchedElements" xml:space="preserve">
    <value>The expected collection contains {1} occurrence(s) of &lt;{2}&gt;. The actual collection contains {3} occurrence(s). {0}</value>
  </data>
  <data name="AllItemsAreUniqueFailMsg" xml:space="preserve">
    <value>Duplicate item found:&lt;{1}&gt;. {0}</value>
  </data>
  <data name="AreEqualFailMsg" xml:space="preserve">
    <value>Expected:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}</value>
  </data>
  <data name="AreEqualDeltaFailMsg" xml:space="preserve">
    <value>Expected a difference no greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}</value>
  </data>
  <data name="AreEqualCaseFailMsg" xml:space="preserve">
    <value>Expected:&lt;{1}&gt;. Case is different for actual value:&lt;{2}&gt;. {0}</value>
  </data>
  <data name="AreEqualDifferentTypesFailMsg" xml:space="preserve">
    <value>Expected:&lt;{1} ({2})&gt;. Actual:&lt;{3} ({4})&gt;. {0}</value>
  </data>
  <data name="AreNotEqualFailMsg" xml:space="preserve">
    <value>Expected any value except:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}</value>
  </data>
  <data name="AreNotEqualDeltaFailMsg" xml:space="preserve">
    <value>Expected a difference greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}</value>
  </data>
  <data name="AreSameGivenValues" xml:space="preserve">
    <value>Do not pass value types to AreSame(). Values converted to Object will never be the same. Consider using AreEqual(). {0}</value>
  </data>
  <data name="BothCollectionsEmpty" xml:space="preserve">
    <value>Both collections are empty. {0}</value>
  </data>
  <data name="BothCollectionsSameElements" xml:space="preserve">
    <value>Both collection contain same elements.</value>
  </data>
  <data name="BothCollectionsSameReference" xml:space="preserve">
    <value>Both collection references point to the same collection object. {0}</value>
  </data>
  <data name="BothSameElements" xml:space="preserve">
    <value>Both collections contain the same elements. {0}</value>
  </data>
  <data name="CollectionEqualReason" xml:space="preserve">
    <value>{0}({1})</value>
  </data>
  <data name="ContainsFail" xml:space="preserve">
    <value>String '{0}' does not contain string '{1}'. {2}.</value>
  </data>
  <data name="ElementNumbersDontMatch" xml:space="preserve">
    <value>The number of elements in the collections do not match. Expected:&lt;{1}&gt;. Actual:&lt;{2}&gt;.{0}</value>
  </data>
  <data name="ElementsAtIndexDontMatch" xml:space="preserve">
    <value>Element at index {0} do not match.</value>
  </data>
  <data name="ElementTypesAtIndexDontMatch" xml:space="preserve">
    <value>Element at index {1} is not of expected type. Expected type:&lt;{2}&gt;. Actual type:&lt;{3}&gt;.{0}</value>
  </data>
  <data name="ElementTypesAtIndexDontMatch2" xml:space="preserve">
    <value>Element at index {1} is (null). Expected type:&lt;{2}&gt;.{0}</value>
  </data>
  <data name="EndsWithFail" xml:space="preserve">
    <value>String '{0}' does not end with string '{1}'. {2}.</value>
  </data>
  <data name="EqualsTesterInvalidArgs" xml:space="preserve">
    <value>Invalid argument- EqualsTester can't use nulls.</value>
  </data>
  <data name="ErrorInvalidCast" xml:space="preserve">
    <value>Cannot convert object of type {0} to {1}.</value>
  </data>
  <data name="AssertionFailed" xml:space="preserve">
    <value>{0} failed. {1}</value>
  </data>
  <data name="InternalObjectNotValid" xml:space="preserve">
    <value>The internal object referenced is no longer valid.</value>
  </data>
  <data name="InvalidParameterToAssert" xml:space="preserve">
    <value>The parameter '{0}' is invalid. {1}.</value>
  </data>
  <data name="IsInstanceOfFailMsg" xml:space="preserve">
    <value>{0} Expected type:&lt;{1}&gt;. Actual type:&lt;{2}&gt;.</value>
  </data>
  <data name="IsMatchFail" xml:space="preserve">
    <value>String '{0}' does not match pattern '{1}'. {2}.</value>
  </data>
  <data name="IsNotInstanceOfFailMsg" xml:space="preserve">
    <value>Wrong Type:&lt;{1}&gt;. Actual type:&lt;{2}&gt;. {0}</value>
  </data>
  <data name="IsNotMatchFail" xml:space="preserve">
    <value>String '{0}' matches pattern '{1}'. {2}.</value>
  </data>
  <data name="DoNotUseAssertEquals" xml:space="preserve">
    <value>Assert.Equals should not be used for Assertions. Please use Assert.AreEqual &amp; overloads instead.</value>
  </data>
  <data name="PrivateAccessorMemberNotFound" xml:space="preserve">
    <value>
      The member specified ({0}) could not be found. You might need to regenerate your private accessor,
      or the member may be private and defined on a base class. If the latter is true, you need to pass the type
      that defines the member into PrivateObject's constructor.
    </value>
  </data>
  <data name="PrivateAccessorConstructorNotFound" xml:space="preserve">
    <value>
      The constructor with the specified signature could not be found. You might need to regenerate your private accessor,
      or the member may be private and defined on a base class. If the latter is true, you need to pass the type
      that defines the member into PrivateObject's constructor.
    </value>
  </data>
  <data name="NullParameterToAssert" xml:space="preserve">
    <value>The parameter '{0}' is invalid. The value cannot be null. {1}.</value>
  </data>
  <data name="NumberOfElementsDiff" xml:space="preserve">
    <value>Different number of elements.</value>
  </data>
  <data name="StartsWithFail" xml:space="preserve">
    <value>String '{0}' does not start with string '{1}'. {2}.</value>
  </data>
  <data name="InvalidPropertyType" xml:space="preserve">
    <value>The property {0} has type {1}; expected type {2}.</value>
  </data>
  <data name="Common_NullInMessages" xml:space="preserve">
    <value>(null)</value>
  </data>
  <data name="Common_ObjectString" xml:space="preserve">
    <value>(object)</value>
  </data>
  <data name="UTF_ExpectedExceptionTypeMustDeriveFromException" xml:space="preserve">
    <value>The expected exception type must be System.Exception or a type derived from System.Exception.</value>
  </data>
  <data name="UTF_TestMethodNoExceptionDefault" xml:space="preserve">
    <value>Test method did not throw an exception. An exception was expected by attribute {0} defined on the test method.</value>
  </data>
  <data name="UTF_TestMethodNoException" xml:space="preserve">
    <value>Test method did not throw expected exception {0}. {1}</value>
  </data>
  <data name="UTF_TestMethodWrongException" xml:space="preserve">
    <value>Test method threw exception {0}, but exception {1} was expected. Exception message: {2}</value>
  </data>
  <data name="UTF_TestMethodWrongExceptionDerivedAllowed" xml:space="preserve">
    <value>Test method threw exception {0}, but exception {1} or a type derived from it was expected. Exception message: {2}</value>
  </data>
  <data name="UTF_FailedToGetExceptionMessage" xml:space="preserve">
    <value>(Failed to get the message for an exception of type {0} due to an exception.)</value>
  </data>
  <data name="NoExceptionThrown" xml:space="preserve">
    <value>No exception thrown. {1} exception was expected. {0}</value>
  </data>
  <data name="WrongExceptionThrown" xml:space="preserve">
    <value>Threw exception {2}, but exception {1} was expected. {0}
Exception Message: {3}
Stack Trace: {4}</value>
  </data>
  <data name="NoDataRow" xml:space="preserve">
    <value>No test data source specified. Atleast one TestDataSource is required with DataTestMethodAttribute.</value>
  </data>
  <data name="DataDrivenResultDisplayName" xml:space="preserve">
    <value>{0} ({1})</value>
  </data>
  <data name="AsyncUITestMethodNotSupported" xml:space="preserve">
    <value>async TestMethod with UITestMethodAttribute are not supported. Either remove async or use TestMethodAttribute.</value>
  </data>
  <data name="AsyncUITestMethodWithNoDispatcherQueue" xml:space="preserve">
    <value>UITestMethodAttribute.DispatcherQueue should not be null. To use UITestMethodAttribute within a WinUI Desktop App, remember to set the static UITestMethodAttribute.DispatcherQueue during the test initialization.</value>
  </data>
  <data name="DynamicDataIEnumerableNull" xml:space="preserve">
    <value>Property or method {0} on {1} does not return IEnumerable&lt;object[]&gt;.</value>
  </data>
  <data name="DynamicDataValueNull" xml:space="preserve">
    <value>Value returned by property or method {0} shouldn't be null.</value>
  </data>
  <data name="DynamicDataDisplayName" xml:space="preserve">
    <value>Method {0} must match the expected signature: public static {1} {0}({2}).</value>
  </data>
  <data name="DynamicDataIEnumerableEmpty" xml:space="preserve">
    <value>Property or method {0} on {1} returns empty IEnumerable&lt;object[]&gt;.</value>
  </data>
</root>