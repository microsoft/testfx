<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" original="../FrameworkMessages.resx">
    <body>
      <trans-unit id="AccessStringInvalidSyntax">
        <source>Access string has invalid syntax.</source>
        <target state="translated">Access string has invalid syntax.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="ActualHasMismatchedElements">
        <source>The expected collection contains {1} occurrence(s) of &lt;{2}&gt;. The actual collection contains {3} occurrence(s). {0}</source>
        <target state="translated">The expected collection contains {1} occurrence(s) of &lt;{2}&gt;. The actual collection contains {3} occurrence(s). {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="AllItemsAreUniqueFailMsg">
        <source>Duplicate item found:&lt;{1}&gt;. {0}</source>
        <target state="translated">Duplicate item found:&lt;{1}&gt;. {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="AreEqualFailMsg">
        <source>Expected:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}</source>
        <target state="translated">Expected:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="AreEqualDeltaFailMsg">
        <source>Expected a difference no greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}</source>
        <target state="translated">Expected a difference no greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="AreEqualCaseFailMsg">
        <source>Expected:&lt;{1}&gt;. Case is different for actual value:&lt;{2}&gt;. {0}</source>
        <target state="translated">Expected:&lt;{1}&gt;. Case is different for actual value:&lt;{2}&gt;. {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="AreEqualDifferentTypesFailMsg">
        <source>Expected:&lt;{1} ({2})&gt;. Actual:&lt;{3} ({4})&gt;. {0}</source>
        <target state="translated">Expected:&lt;{1} ({2})&gt;. Actual:&lt;{3} ({4})&gt;. {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="AreNotEqualFailMsg">
        <source>Expected any value except:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}</source>
        <target state="translated">Expected any value except:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="AreNotEqualDeltaFailMsg">
        <source>Expected a difference greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}</source>
        <target state="translated">Expected a difference greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="AreSameGivenValues">
        <source>Do not pass value types to AreSame(). Values converted to Object will never be the same. Consider using AreEqual(). {0}</source>
        <target state="translated">Do not pass value types to AreSame(). Values converted to Object will never be the same. Consider using AreEqual(). {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="BothCollectionsEmpty">
        <source>Both collections are empty. {0}</source>
        <target state="translated">Both collections are empty. {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="BothCollectionsSameElements">
        <source>Both collection contain same elements.</source>
        <target state="translated">Both collection contain same elements.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="BothCollectionsSameReference">
        <source>Both collection references point to the same collection object. {0}</source>
        <target state="translated">Both collection references point to the same collection object. {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="BothSameElements">
        <source>Both collections contain the same elements. {0}</source>
        <target state="translated">Both collections contain the same elements. {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="CollectionEqualReason">
        <source>{0}({1})</source>
        <target state="translated">{0}({1})</target>
        <note></note>
      </trans-unit>
      <trans-unit id="ContainsFail">
        <source>String '{0}' does not contain string '{1}'. {2}.</source>
        <target state="translated">String '{0}' does not contain string '{1}'. {2}.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="ElementNumbersDontMatch">
        <source>The number of elements in the collections do not match. Expected:&lt;{1}&gt;. Actual:&lt;{2}&gt;.{0}</source>
        <target state="translated">The number of elements in the collections do not match. Expected:&lt;{1}&gt;. Actual:&lt;{2}&gt;.{0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="ElementsAtIndexDontMatch">
        <source>Element at index {0} do not match.</source>
        <target state="translated">Element at index {0} do not match.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="ElementTypesAtIndexDontMatch">
        <source>Element at index {1} is not of expected type. Expected type:&lt;{2}&gt;. Actual type:&lt;{3}&gt;.{0}</source>
        <target state="translated">Element at index {1} is not of expected type. Expected type:&lt;{2}&gt;. Actual type:&lt;{3}&gt;.{0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="ElementTypesAtIndexDontMatch2">
        <source>Element at index {1} is (null). Expected type:&lt;{2}&gt;.{0}</source>
        <target state="translated">Element at index {1} is (null). Expected type:&lt;{2}&gt;.{0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="EndsWithFail">
        <source>String '{0}' does not end with string '{1}'. {2}.</source>
        <target state="translated">String '{0}' does not end with string '{1}'. {2}.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="EqualsTesterInvalidArgs">
        <source>Invalid argument- EqualsTester can't use nulls.</source>
        <target state="translated">Invalid argument- EqualsTester can't use nulls.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="ErrorInvalidCast">
        <source>Cannot convert object of type {0} to {1}.</source>
        <target state="translated">Cannot convert object of type {0} to {1}.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="AssertionFailed">
        <source>{0} failed. {1}</source>
        <target state="translated">{0} failed. {1}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="InternalObjectNotValid">
        <source>The internal object referenced is no longer valid.</source>
        <target state="translated">The internal object referenced is no longer valid.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="InvalidParameterToAssert">
        <source>The parameter '{0}' is invalid. {1}.</source>
        <target state="translated">The parameter '{0}' is invalid. {1}.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="IsInstanceOfFailMsg">
        <source>{0} Expected type:&lt;{1}&gt;. Actual type:&lt;{2}&gt;.</source>
        <target state="translated">{0} Expected type:&lt;{1}&gt;. Actual type:&lt;{2}&gt;.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="IsMatchFail">
        <source>String '{0}' does not match pattern '{1}'. {2}.</source>
        <target state="translated">String '{0}' does not match pattern '{1}'. {2}.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="IsNotInstanceOfFailMsg">
        <source>Wrong Type:&lt;{1}&gt;. Actual type:&lt;{2}&gt;. {0}</source>
        <target state="translated">Wrong Type:&lt;{1}&gt;. Actual type:&lt;{2}&gt;. {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="IsNotMatchFail">
        <source>String '{0}' matches pattern '{1}'. {2}.</source>
        <target state="translated">String '{0}' matches pattern '{1}'. {2}.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="DoNotUseAssertEquals">
        <source>Assert.Equals should not be used for Assertions. Please use Assert.AreEqual &amp; overloads instead.</source>
        <target state="translated">Assert.Equals should not be used for Assertions. Please use Assert.AreEqual &amp; overloads instead.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="PrivateAccessorMemberNotFound">
        <source>
      The member specified ({0}) could not be found. You might need to regenerate your private accessor,
      or the member may be private and defined on a base class. If the latter is true, you need to pass the type
      that defines the member into PrivateObject's constructor.
    </source>
        <target state="translated">
      The member specified ({0}) could not be found. You might need to regenerate your private accessor,
      or the member may be private and defined on a base class. If the latter is true, you need to pass the type
      that defines the member into PrivateObject's constructor.
    </target>
        <note></note>
      </trans-unit>
      <trans-unit id="PrivateAccessorConstructorNotFound">
        <source>
      The constructor with the specified signature could not be found. You might need to regenerate your private accessor,
      or the member may be private and defined on a base class. If the latter is true, you need to pass the type
      that defines the member into PrivateObject's constructor.
    </source>
        <target state="translated">
      The constructor with the specified signature could not be found. You might need to regenerate your private accessor,
      or the member may be private and defined on a base class. If the latter is true, you need to pass the type
      that defines the member into PrivateObject's constructor.
    </target>
        <note></note>
      </trans-unit>
      <trans-unit id="NullParameterToAssert">
        <source>The parameter '{0}' is invalid. The value cannot be null. {1}.</source>
        <target state="translated">The parameter '{0}' is invalid. The value cannot be null. {1}.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="NumberOfElementsDiff">
        <source>Different number of elements.</source>
        <target state="translated">Different number of elements.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="StartsWithFail">
        <source>String '{0}' does not start with string '{1}'. {2}.</source>
        <target state="translated">String '{0}' does not start with string '{1}'. {2}.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="InvalidPropertyType">
        <source>The property {0} has type {1}; expected type {2}.</source>
        <target state="translated">The property {0} has type {1}; expected type {2}.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="Common_NullInMessages">
        <source>(null)</source>
        <target state="translated">(null)</target>
        <note></note>
      </trans-unit>
      <trans-unit id="Common_ObjectString">
        <source>(object)</source>
        <target state="translated">(object)</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTF_ExpectedExceptionTypeMustDeriveFromException">
        <source>The expected exception type must be System.Exception or a type derived from System.Exception.</source>
        <target state="translated">The expected exception type must be System.Exception or a type derived from System.Exception.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTF_TestMethodNoExceptionDefault">
        <source>Test method did not throw an exception. An exception was expected by attribute {0} defined on the test method.</source>
        <target state="translated">Test method did not throw an exception. An exception was expected by attribute {0} defined on the test method.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTF_TestMethodNoException">
        <source>Test method did not throw expected exception {0}. {1}</source>
        <target state="translated">Test method did not throw expected exception {0}. {1}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTF_TestMethodWrongException">
        <source>Test method threw exception {0}, but exception {1} was expected. Exception message: {2}</source>
        <target state="translated">Test method threw exception {0}, but exception {1} was expected. Exception message: {2}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTF_TestMethodWrongExceptionDerivedAllowed">
        <source>Test method threw exception {0}, but exception {1} or a type derived from it was expected. Exception message: {2}</source>
        <target state="translated">Test method threw exception {0}, but exception {1} or a type derived from it was expected. Exception message: {2}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTF_FailedToGetExceptionMessage">
        <source>(Failed to get the message for an exception of type {0} due to an exception.)</source>
        <target state="translated">(Failed to get the message for an exception of type {0} due to an exception.)</target>
        <note></note>
      </trans-unit>
      <trans-unit id="NoExceptionThrown">
        <source>No exception thrown. {1} exception was expected. {0}</source>
        <target state="translated">No exception thrown. {1} exception was expected. {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="WrongExceptionThrown">
        <source>Threw exception {2}, but exception {1} was expected. {0}
Exception Message: {3}
Stack Trace: {4}</source>
        <target state="translated">Threw exception {2}, but exception {1} was expected. {0}
Exception Message: {3}
Stack Trace: {4}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="NoDataRow">
        <source>No test data source specified. Atleast one TestDataSource is required with DataTestMethodAttribute.</source>
        <target state="new">No DataRowAttribute specified. Atleast one DataRowAttribute is required with DataTestMethodAttribute.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="DataDrivenResultDisplayName">
        <source>{0} ({1})</source>
        <target state="translated">{0} ({1})</target>
        <note></note>
      </trans-unit>
      <trans-unit id="AsyncUITestMethodNotSupported">
        <source>async TestMethod with UITestMethodAttribute are not supported. Either remove async or use TestMethodAttribute.</source>
        <target state="translated">async TestMethod with UITestMethodAttribute are not supported. Either remove async or use TestMethodAttribute.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="DynamicDataIEnumerableNull">
        <source>Property or method {0} on {1} does not return IEnumerable&lt;object[]&gt;.</source>
        <target state="new">Property or method {0} on {1} does not return IEnumerable&lt;object[]&gt;.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="DynamicDataValueNull">
        <source>Value returned by property or method {0} shouldn't be null.</source>
        <target state="new">Value returned by property or method {0} shouldn't be null.</target>
        <note></note>
      </trans-unit>
      <trans-unit id="DynamicDataDisplayName">
        <source>Method {0} must match the expected signature: public static {1} {0}({2}).</source>
        <target state="new">Method {0} must match the expected signature: {1} {0}({2}).</target>
        <note></note>
      </trans-unit>
      <trans-unit id="DynamicDataIEnumerableEmpty">
        <source>Property or method {0} on {1} returns empty IEnumerable&lt;object[]&gt;.</source>
        <target state="new">Property or method {0} on {1} returns empty IEnumerable&lt;object[]&gt;.</target>
        <note></note>
      </trans-unit>
    </body>
  </file>
</xliff>