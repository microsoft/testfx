<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="ja" original="../Resources.resx">
    <body>
      <trans-unit id="AssemblyCleanupShouldBeValidDescription">
        <source>Methods marked with [AssemblyCleanup] should follow the following layout to be valid:
- it should be 'public' 
- it should be 'static'
- it should not be generic
- it should not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</source>
        <target state="new">Methods marked with [AssemblyCleanup] should follow the following layout to be valid:
- it should be 'public' 
- it should be 'static'
- it should not be generic
- it should not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_NoParameters">
        <source>AssemblyCleanup method '{0}' should not take any parameter</source>
        <target state="new">AssemblyCleanup method '{0}' should not take any parameter</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_NotAsyncVoid">
        <source>AssemblyCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="new">AssemblyCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_NotGeneric">
        <source>AssemblyCleanup method '{0}' should not be generic</source>
        <target state="new">AssemblyCleanup method '{0}' should not be generic</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_Ordinary">
        <source>AssemblyCleanup method '{0}' should be an 'ordinary' method</source>
        <target state="new">AssemblyCleanup method '{0}' should be an 'ordinary' method</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_Public">
        <source>AssemblyCleanup method '{0}' should be 'public'</source>
        <target state="new">AssemblyCleanup method '{0}' should be 'public'</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_ReturnType">
        <source>AssemblyCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="new">AssemblyCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_Static">
        <source>AssemblyCleanup method '{0}' should be 'static'</source>
        <target state="new">AssemblyCleanup method '{0}' should be 'static'</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidTitle">
        <source>AssemblyCleanup methods should have valid layout</source>
        <target state="new">AssemblyCleanup methods should have valid layout</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidDescription">
        <source>Methods marked with [AssemblyInitialize] should follow the following layout to be valid:
- it should be 'public' 
- it should be 'static'
- it should not be generic
- it should take one parameter of type 'TestContext'
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</source>
        <target state="new">Methods marked with [AssemblyInitialize] should follow the following layout to be valid:
- it should be 'public' 
- it should be 'static'
- it should not be generic
- it should take one parameter of type 'TestContext'
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_NotAsyncVoid">
        <source>AssemblyInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="new">AssemblyInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_NotGeneric">
        <source>AssemblyInitialize method '{0}' should not be generic</source>
        <target state="new">AssemblyInitialize method '{0}' should not be generic</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_Ordinary">
        <source>AssemblyInitialize method '{0}' should be an 'ordinary' method</source>
        <target state="new">AssemblyInitialize method '{0}' should be an 'ordinary' method</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_Public">
        <source>AssemblyInitialize method '{0}' should be 'public'</source>
        <target state="new">AssemblyInitialize method '{0}' should be 'public'</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_ReturnType">
        <source>AssemblyInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="new">AssemblyInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_SingleContextParameter">
        <source>AssemblyInitialize method '{0}' should take a single parameter of type 'TestContext'</source>
        <target state="new">AssemblyInitialize method '{0}' should take a single parameter of type 'TestContext'</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_Static">
        <source>AssemblyInitialize method '{0}' should be 'static'</source>
        <target state="new">AssemblyInitialize method '{0}' should be 'static'</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidTitle">
        <source>AssemblyInitialize methods should have valid layout</source>
        <target state="new">AssemblyInitialize methods should have valid layout</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidExpectedExceptionAttributeDescription">
        <source>Prefer 'Assert.ThrowsException' or 'Assert.ThrowsExceptionAsync' over '[ExpectedException]' as it ensures that only the expected call throws the expected exception. The assert APIs also provide more flexibility and allow you to assert extra properties of the exeption.</source>
        <target state="translated">'[ExpectedException]' よりも 'Assert.ThrowsException' または 'Assert.ThrowsExceptionAsync' を優先します。これは、予期された呼び出しのみが予期された例外をスローするようにするためです。アサート API も柔軟性が高く、例外の追加プロパティをアサートできます。</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidExpectedExceptionAttributeMessageFormat">
        <source>Prefer 'Assert.ThrowsException/ThrowsExceptionAsync' over '[ExpectedException]'</source>
        <target state="translated">'[ExpectedException]' よりも 'Assert.ThrowsException/ThrowsExceptionAsync' を優先します</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidExpectedExceptionAttributeTitle">
        <source>Avoid '[ExpectedException]'</source>
        <target state="translated">'[ExpectedException]' を回避する</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidDescription">
        <source>Methods marked with [ClassCleanup] should follow the following layout to be valid:
- it should be 'public' 
- it should not 'static'
- it should not be generic
- it should not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</source>
        <target state="new">Methods marked with [ClassCleanup] should follow the following layout to be valid:
- it should be 'public' 
- it should not 'static'
- it should not be generic
- it should not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_NoParameters">
        <source>ClassCleanup method '{0}' should not take any parameter</source>
        <target state="new">ClassCleanup method '{0}' should not take any parameter</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_NotAsyncVoid">
        <source>ClassCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="new">ClassCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_NotGeneric">
        <source>ClassCleanup method '{0}' should not be generic</source>
        <target state="new">ClassCleanup method '{0}' should not be generic</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_Ordinary">
        <source>ClassCleanup method '{0}' should be an 'ordinary' method</source>
        <target state="new">ClassCleanup method '{0}' should be an 'ordinary' method</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_Public">
        <source>ClassCleanup method '{0}' should be 'public'</source>
        <target state="new">ClassCleanup method '{0}' should be 'public'</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_ReturnType">
        <source>ClassCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="new">ClassCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_Static">
        <source>ClassCleanup method '{0}' should be 'static'</source>
        <target state="new">ClassCleanup method '{0}' should be 'static'</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidTitle">
        <source>ClassCleanup methods should have valid layout</source>
        <target state="new">ClassCleanup methods should have valid layout</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidDescription">
        <source>Methods marked with [ClassInitialize] should follow the following layout to be valid:
- it should be 'public' 
- it should be 'static'
- it should not be generic
- it should take one parameter of type 'TestContext'
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</source>
        <target state="new">Methods marked with [ClassInitialize] should follow the following layout to be valid:
- it should be 'public' 
- it should be 'static'
- it should not be generic
- it should take one parameter of type 'TestContext'
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_NotAsyncVoid">
        <source>ClassInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="new">ClassInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_NotGeneric">
        <source>ClassInitialize method '{0}' should not be generic</source>
        <target state="new">ClassInitialize method '{0}' should not be generic</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_Ordinary">
        <source>ClassInitialize method '{0}' should be an 'ordinary' method</source>
        <target state="new">ClassInitialize method '{0}' should be an 'ordinary' method</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_Public">
        <source>ClassInitialize method '{0}' should be 'public'</source>
        <target state="new">ClassInitialize method '{0}' should be 'public'</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_ReturnType">
        <source>ClassInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="new">ClassInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_SingleContextParameter">
        <source>ClassInitialize method '{0}' should take a single parameter of type 'TestContext'</source>
        <target state="new">ClassInitialize method '{0}' should take a single parameter of type 'TestContext'</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_Static">
        <source>ClassInitialize method '{0}' should be 'static'</source>
        <target state="new">ClassInitialize method '{0}' should be 'static'</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidTitle">
        <source>ClassInitialize methods should have valid layout</source>
        <target state="new">ClassInitialize methods should have valid layout</target>
        <note />
      </trans-unit>
      <trans-unit id="PublicTypeShouldBeTestClassDescription">
        <source>It's considered a good practice to have only test classes marked public in a test project.</source>
        <target state="translated">テスト プロジェクトでは、テスト クラスのみをパブリックとしてマークすることをお勧めします。</target>
        <note />
      </trans-unit>
      <trans-unit id="PublicTypeShouldBeTestClassMessageFormat">
        <source>Public type '{0}' should be marked with '[TestClass]' or changed to 'internal'</source>
        <target state="translated">パブリック型 '{0}' は '[TestClass]' でマークするか、'internal' に変更する必要があります</target>
        <note />
      </trans-unit>
      <trans-unit id="PublicTypeShouldBeTestClassTitle">
        <source>Public types should be test classes</source>
        <target state="translated">パブリック型はテスト クラスである必要があります</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldBeValidDescription">
        <source>Test classes, classes marked with the '[TestClass]' attribute, should respect the following layout to be considered valid by MSTest:
- it should be 'public' (or 'internal' if '[assembly: DiscoverInternals]' attribute is set)
- it should not be 'static' (except if it contains only 'AssemblyInitialize' and/or 'AssemblyCleanup' methods)
- it should not be generic.</source>
        <target state="translated">テスト クラス ('[TestClass]' 属性でマークされたクラス) は、MSTest によって有効と見なされるように、次のレイアウトを考慮する必要があります:
- 'public' である必要があります ('[assembly: DiscoverInternals]' 属性が設定されている場合は 'internal' である必要があります)
- 'static' にすることはできません ('AssemblyInitialize' メソッドおよび/または 'AssemblyCleanup' メソッドのみが含まれる場合は除きます)
- ジェネリックにすることはできません。</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldBeValidMessageFormat_NotGeneric">
        <source>Test class '{0}' should not be generic</source>
        <target state="translated">テスト クラス '{0}' をジェネリックにすることはできません</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldBeValidMessageFormat_NotStatic">
        <source>Test class '{0}' should not be 'static'</source>
        <target state="translated">テスト クラス '{0}' を 'static' にすることはできません</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldBeValidMessageFormat_Public">
        <source>Test class '{0}' should be 'public'</source>
        <target state="translated">テスト クラス '{0}' は 'public' である必要があります</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldBeValidMessageFormat_PublicOrInternal">
        <source>Test class '{0}' should be 'public' or 'internal'</source>
        <target state="translated">テスト クラス '{0}' は 'public' または 'internal' である必要があります</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldBeValidTitle">
        <source>Test classes should have valid layout</source>
        <target state="translated">テスト クラスには有効なレイアウトが必要です</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidDescription">
        <source>Methods marked with [TestCleanup] should follow the following layout to be valid:
- it should be 'public' 
- it should not be 'static'
- it should not be generic
- it should not be 'abstract'
- it should not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</source>
        <target state="new">Methods marked with [TestCleanup] should follow the following layout to be valid:
- it should be 'public' 
- it should not be 'static'
- it should not be generic
- it should not be 'abstract'
- it should not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_NoParameters">
        <source>TestCleanup method '{0}' should not take any parameter</source>
        <target state="new">TestCleanup method '{0}' should not take any parameter</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_NotAbstract">
        <source>TestCleanup method '{0}' should not be 'abstract'</source>
        <target state="new">TestCleanup method '{0}' should not be 'abstract'</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_NotAsyncVoid">
        <source>TestCleanup method '{0}' should not be 'async void'</source>
        <target state="new">TestCleanup method '{0}' should not be 'async void'</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_NotGeneric">
        <source>TestCleanup method '{0}' should not be generic</source>
        <target state="new">TestCleanup method '{0}' should not be generic</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_NotStatic">
        <source>TestCleanup method '{0}' should not be 'static'</source>
        <target state="new">TestCleanup method '{0}' should not be 'static'</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_Ordinary">
        <source>TestCleanup method '{0}' should be an 'ordinary' method</source>
        <target state="new">TestCleanup method '{0}' should be an 'ordinary' method</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_Public">
        <source>TestCleanup method '{0}' should be 'public'</source>
        <target state="new">TestCleanup method '{0}' should be 'public'</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_ReturnType">
        <source>TestCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="new">TestCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidTitle">
        <source>TestCleanup method should have valid layout</source>
        <target state="translated">TestCleanup メソッドには有効なレイアウトが必要です</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidDescription">
        <source>TestContext property should follow the following layout to be valid:
- it should be a property
- it should be 'public' (or 'internal' if '[assembly: DiscoverInternals]' attribute is set)
- it should not be 'static'
- it should not be readonly.</source>
        <target state="translated">TestContext プロパティを有効にするには、次のレイアウトに従う必要があります: 
- 
 プロパティである必要があります
- 'public' ('[assembly: DiscoverInternals]' 属性が設定されている場合は 'internal' である必要があります)
- 'static' にすることはできません
- 読み取り専用にすることはできません。</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidMessageFormat_NotField">
        <source>Member 'TestContext' should be a property and not a field</source>
        <target state="translated">メンバー 'TestContext' はフィールドではなくプロパティにする必要があります</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidMessageFormat_NotReadonly">
        <source>Property 'TestContext' should be settable</source>
        <target state="translated">プロパティ 'TestContext' は設定可能である必要があります</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidMessageFormat_NotStatic">
        <source>Property 'TestContext' should not be 'static'</source>
        <target state="translated">プロパティ 'TestContext' を 'static' にすることはできません</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidMessageFormat_Public">
        <source>Property 'TestContext' should be 'public'</source>
        <target state="translated">プロパティ 'TestContext' は 'public' である必要があります</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidMessageFormat_PublicOrInternal">
        <source>Property 'TestContext' should be 'public' or 'internal'</source>
        <target state="translated">プロパティ 'TestContext' は 'public' または 'internal' である必要があります</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidTitle">
        <source>Test context property should have valid layout</source>
        <target state="translated">テスト コンテキスト プロパティには有効なレイアウトが必要です</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidDescription">
        <source>Methods marked with [TestInitialize] should follow the following layout to be valid:
- it should be 'public' 
- it should not be 'static'
- it should not be generic
- it should not be 'abstract'
- it should not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</source>
        <target state="new">Methods marked with [TestInitialize] should follow the following layout to be valid:
- it should be 'public' 
- it should not be 'static'
- it should not be generic
- it should not be 'abstract'
- it should not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_NoParameters">
        <source>TestInitialize method '{0}' should not take any parameter</source>
        <target state="new">TestInitialize method '{0}' should not take any parameter</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_NotAbstract">
        <source>TestInitialize method '{0}' should not be 'abstract'</source>
        <target state="new">TestInitialize method '{0}' should not be 'abstract'</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_NotAsyncVoid">
        <source>TestInitialize method  '{0}' should not be 'async void'</source>
        <target state="new">TestInitialize method  '{0}' should not be 'async void'</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_NotGeneric">
        <source>TestInitialize method '{0}' should not be generic</source>
        <target state="new">TestInitialize method '{0}' should not be generic</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_NotStatic">
        <source>TestInitialize method '{0}' should not be 'static'</source>
        <target state="new">TestInitialize method '{0}' should not be 'static'</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_Ordinary">
        <source>TestInitialize method '{0}' should be an 'ordinary' method</source>
        <target state="new">TestInitialize method '{0}' should be an 'ordinary' method</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_Public">
        <source>TestInitialize method '{0}' should be 'public'</source>
        <target state="new">TestInitialize method '{0}' should be 'public'</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_ReturnType">
        <source>TestInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="new">TestInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidTitle">
        <source>TestInitialize method should have valid layout</source>
        <target state="new">TestInitialize method should have valid layout</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidDescription">
        <source>Test methods, methods marked with the '[TestMethod]' attribute, should respect the following layout to be considered valid by MSTest:
- it should be 'public' (or 'internal' if '[assembly: DiscoverInternals]' attribute is set)
- it should not be 'static'
- it should not be generic
- it should not be 'abstract'
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</source>
        <target state="translated">'[TestMethod]' 属性でマークされたテスト メソッドは、MSTest によって有効と見なされるように、次のレイアウトを考慮する必要があります:
- 'public' である必要があります ('[assembly: DiscoverInternals]' 属性が設定されている場合は 'internal' である必要があります)
- 'static' にすることはできません
- ジェネリックにすることはできません
- 'abstract' にすることはできません
- 戻り値の型は 'void'、'Task'、または 'ValueTask' である必要があります
- 'async void' にすることはできません
- 特殊なメソッド (ファイナライザー、演算子...) にすることはできません。</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_NotAbstract">
        <source>Test method '{0}' should not be 'abstract'</source>
        <target state="translated">テスト メソッド '{0}' を 'abstract' にすることはできません</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_NotAsyncVoid">
        <source>Test method '{0}' should not be 'async void'</source>
        <target state="translated">テスト メソッド '{0}' を 'async void' にすることはできません</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_NotGeneric">
        <source>Test method '{0}' should not be generic</source>
        <target state="translated">テスト メソッド '{0}' をジェネリックにすることはできません</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_NotStatic">
        <source>Test method '{0}' should not be 'static'</source>
        <target state="translated">テスト メソッド '{0}' を 'static' にすることはできません</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_Ordinary">
        <source>Test method '{0}' should be an 'ordinary' method</source>
        <target state="translated">テスト メソッド '{0}' は '通常' メソッドである必要があります</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_Public">
        <source>Test method '{0}' should be 'public'</source>
        <target state="translated">テスト メソッド '{0}' は 'public' である必要があります</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_PublicOrInternal">
        <source>Test method '{0}' should be 'public' or 'internal'</source>
        <target state="translated">テスト メソッド '{0}' は 'public' または 'internal' である必要があります</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_ReturnType">
        <source>Test method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="translated">テスト メソッド '{0}' は 'void'、'Task'、または 'ValueTask' を返す必要があります</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidTitle">
        <source>Test methods should have valid layout</source>
        <target state="translated">テスト メソッドには有効なレイアウトが必要です</target>
        <note />
      </trans-unit>
      <trans-unit id="UseAttributeOnTestMethodAnalyzerMessageFormat">
        <source>[{0}] can only be set on methods marked with [TestMethod]</source>
        <target state="translated">[{0}] は、[TestMethod] でマークされたメソッドにのみ設定できます</target>
        <note />
      </trans-unit>
      <trans-unit id="UseAttributeOnTestMethodAnalyzerTitle">
        <source>[{0}] can only be set on methods marked with [TestMethod]</source>
        <target state="translated">[{0}] は、[TestMethod] でマークされたメソッドにのみ設定できます</target>
        <note />
      </trans-unit>
      <trans-unit id="UseParallelizeAttributeAnalyzerDescription">
        <source>By default, MSTest runs tests within the same assembly sequentially, which can lead to severe performance limitations. It is recommended to enable assembly attribute '[Parallelize]' to run tests in parallel, or if the assembly is known to not be parallelizable, to use explicitly the assembly level attribute '[DoNotParallelize]'.</source>
        <target state="translated">既定では、MSTest は同じアセンブリ内でテストを順番に実行するため、重大なパフォーマンス制限が生じる可能性があります。アセンブリ属性 '[Parallelize]' を有効にして並列でテストを実行するか、アセンブリが並列化できないことがわかっている場合は、アセンブリ レベル属性 '[DoNotParallelize]' を明示的に使用することをお勧めします。</target>
        <note />
      </trans-unit>
      <trans-unit id="UseParallelizeAttributeAnalyzerMessageFormat">
        <source>Explicitly enable or disable tests parallelization</source>
        <target state="translated">テストの並列化を明示的に有効または無効にする</target>
        <note />
      </trans-unit>
      <trans-unit id="UseParallelizeAttributeAnalyzerTitle">
        <source>Explicitly enable or disable tests parallelization</source>
        <target state="translated">テストの並列化を明示的に有効または無効にする</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>