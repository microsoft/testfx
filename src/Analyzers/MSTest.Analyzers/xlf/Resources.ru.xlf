<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="ru" original="../Resources.resx">
    <body>
      <trans-unit id="AssemblyCleanupShouldBeValidDescription">
        <source>Methods marked with [AssemblyCleanup] should follow the following layout to be valid:
- it should be 'public' 
- it should be 'static'
- it should not be generic
- it should not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</source>
        <target state="translated">Чтобы методы, отмеченные [AssemblyCleanup], были допустимыми, они должны соответствовать следующему макету:
– метод должен быть общедоступным ("public") 
– метод должен быть статическим ("static") 
– метод не должен быть общим ("generic")
– метод не должен принимать никаких параметров
– метод должен возвращать значение типа "void", "Task" или "ValueTask"
– метод не должен быть асинхронным и не возвращающим значения ("async void")
– метод не должен быть специальным (метод завершения, оператор…).</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_NoParameters">
        <source>AssemblyCleanup method '{0}' should not take any parameter</source>
        <target state="translated">Метод AssemblyCleanup "{0}" не должен принимать никаких параметров</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_NotAGenericClass">
        <source>AssemblyCleanup method '{0}' can't be declared on a generic class</source>
        <target state="translated">Метод AssemblyCleanup "{0}" не может быть объявлен для универсального класса</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_NotAsyncVoid">
        <source>AssemblyCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="translated">Метод AssemblyCleanup "{0}" должен возвращать значение "void", "Task" или "ValueTask"</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_NotGeneric">
        <source>AssemblyCleanup method '{0}' should not be generic</source>
        <target state="translated">Метод AssemblyCleanup "{0}" не должен быть общим ("generic")</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_Ordinary">
        <source>AssemblyCleanup method '{0}' should be an 'ordinary' method</source>
        <target state="translated">Метод AssemblyCleanup "{0}" должен быть ординарным ("ordinary")</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_Public">
        <source>AssemblyCleanup method '{0}' should be 'public'</source>
        <target state="translated">Метод AssemblyCleanup "{0}" должен быть общедоступным ("public")</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_ReturnType">
        <source>AssemblyCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="translated">Метод AssemblyCleanup "{0}" должен возвращать значение "void", "Task" или "ValueTask"</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidMessageFormat_Static">
        <source>AssemblyCleanup method '{0}' should be 'static'</source>
        <target state="translated">Метод AssemblyCleanup "{0}" должен быть статическим ("static")</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupShouldBeValidTitle">
        <source>AssemblyCleanup methods should have valid layout</source>
        <target state="translated">Методы AssemblyCleanup должны использовать допустимый макет</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidDescription">
        <source>Methods marked with [AssemblyInitialize] should follow the following layout to be valid:
- it should be 'public' 
- it should be 'static'
- it should not be generic
- it should take one parameter of type 'TestContext'
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</source>
        <target state="translated">Чтобы методы, отмеченные [AssemblyInitialize], были допустимыми, они должны соответствовать следующему макету:
– метод должен быть общедоступным ("public") 
– метод должен быть статическим ("static") 
– метод не должен быть общим ("generic")
– метод должен принимать один параметр типа "TestContext"
– метод должен возвращать значение типа "void", "Task" или "ValueTask"
– метод не должен быть асинхронным и не возвращающим значения ("async void")
– метод не должен быть специальным (метод завершения, оператор…).</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_NotAGenericClass">
        <source>AssemblyInitialize method '{0}' can't be declared on a generic class</source>
        <target state="translated">Метод AssemblyInitialize "{0}" не может быть объявлен для универсального класса</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_NotAsyncVoid">
        <source>AssemblyInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="translated">Метод AssemblyInitialize "{0}" должен возвращать значение "void", "Task" или "ValueTask"</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_NotGeneric">
        <source>AssemblyInitialize method '{0}' should not be generic</source>
        <target state="translated">Метод AssemblyInitialize "{0}" не должен быть общим ("generic")</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_Ordinary">
        <source>AssemblyInitialize method '{0}' should be an 'ordinary' method</source>
        <target state="translated">Метод AssemblyInitialize "{0}" должен быть ординарным ("ordinary")</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_Public">
        <source>AssemblyInitialize method '{0}' should be 'public'</source>
        <target state="translated">Метод AssemblyInitialize "{0}" должен быть общедоступным ("public")</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_ReturnType">
        <source>AssemblyInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="translated">Метод AssemblyInitialize "{0}" должен возвращать значение "void", "Task" или "ValueTask"</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_SingleContextParameter">
        <source>AssemblyInitialize method '{0}' should take a single parameter of type 'TestContext'</source>
        <target state="translated">Метод AssemblyInitialize "{0}" должен принимать один параметр типа "TestContext"</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidMessageFormat_Static">
        <source>AssemblyInitialize method '{0}' should be 'static'</source>
        <target state="translated">Метод AssemblyInitialize "{0}" должен быть статическим ("static")</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeShouldBeValidTitle">
        <source>AssemblyInitialize methods should have valid layout</source>
        <target state="translated">Методы AssemblyInitialize должны использовать допустимый макет</target>
        <note />
      </trans-unit>
      <trans-unit id="AssertionArgsShouldBePassedInCorrectOrderDescription">
        <source>'Assert.AreEqual', 'Assert.AreNotEqual', 'Assert.AreSame' and 'Assert.AreNotSame' expects the expected value to be passed first and the actual value to be passed as second argument.</source>
        <target state="translated">"Assert.AreEqual", "Assert.AreNotEqual", "Assert.AreSame" и "Assert.AreNotSame" ожидают, что сначала будет передано ожидаемое значение, а фактическое значение будет передано в качестве второго аргумента.</target>
        <note />
      </trans-unit>
      <trans-unit id="AssertionArgsShouldBePassedInCorrectOrderMessageFormat">
        <source>Assertion arguments should be passed in the correct order. 'actual' and 'expected'/'notExpected' arguments have been swapped.</source>
        <target state="translated">Аргументы проверочных утверждений должны передаваться в правильном порядке. Аргументы "actual" и "expected"/"notExpected" были переставлены местами.</target>
        <note />
      </trans-unit>
      <trans-unit id="AssertionArgsShouldBePassedInCorrectOrderTitle">
        <source>Assertion arguments should be passed in the correct order</source>
        <target state="translated">Аргументы проверочных утверждений должны передаваться в правильном порядке</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidExpectedExceptionAttributeDescription">
        <source>Prefer 'Assert.ThrowsException' or 'Assert.ThrowsExceptionAsync' over '[ExpectedException]' as it ensures that only the expected call throws the expected exception. The assert APIs also provide more flexibility and allow you to assert extra properties of the exeption.</source>
        <target state="translated">Предпочитайте "Assert.ThrowsException" или "Assert.ThrowsExceptionAsync" вместо "[ExpectedException]", так как это гарантирует, что только ожидаемый вызов приводит к ожидаемому исключению. API-интерфейсы утверждения также обеспечивают дополнительную гибкость и позволяют утверждать дополнительные свойства исключения.</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidExpectedExceptionAttributeMessageFormat">
        <source>Prefer 'Assert.ThrowsException/ThrowsExceptionAsync' over '[ExpectedException]'</source>
        <target state="translated">Предпочитать "Assert.ThrowsException/ThrowsExceptionAsync" вместо "[ExpectedException]"</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidExpectedExceptionAttributeTitle">
        <source>Avoid '[ExpectedException]'</source>
        <target state="translated">Избегать "[ExpectedException]"</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidDescription">
        <source>Methods marked with [ClassCleanup] should follow the following layout to be valid:
- it should be 'public' 
- it should not 'static'
- it should not be generic
- it should not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</source>
        <target state="translated">Чтобы методы, отмеченные [ClassCleanup], были допустимыми, они должны соответствовать следующему макету:
– метод должен быть общедоступным ("public") 
– метод не должен быть статическим ("static") 
– метод не должен быть общим ("generic")
– метод не должен принимать никаких параметров
– метод должен возвращать значение типа "void", "Task" или "ValueTask"
– метод не должен быть асинхронным и не возвращающим значения ("async void")
– метод не должен быть специальным (метод завершения, оператор…).</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_NoParameters">
        <source>ClassCleanup method '{0}' should not take any parameter</source>
        <target state="translated">Метод ClassCleanup "{0}" не должен принимать никаких параметров</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_NotAGenericClassUnlessInheritanceModeSet">
        <source>ClassCleanup method '{0}' can't be declared on a generic class without the `InheritanceBehavior` mode is set</source>
        <target state="translated">Метод ClassCleanup "{0}" не может быть объявлен для универсального класса, если не установлен режим InheritanceBehavior</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_NotAsyncVoid">
        <source>ClassCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="translated">Метод ClassCleanup "{0}" должен возвращать значение "void", "Task" или "ValueTask"</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_NotGeneric">
        <source>ClassCleanup method '{0}' should not be generic</source>
        <target state="translated">Метод ClassCleanup "{0}" не должен быть общим ("generic")</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_Ordinary">
        <source>ClassCleanup method '{0}' should be an 'ordinary' method</source>
        <target state="translated">Метод ClassCleanup "{0}" должен быть ординарным ("ordinary")</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_Public">
        <source>ClassCleanup method '{0}' should be 'public'</source>
        <target state="translated">Метод ClassCleanup "{0}" должен быть общедоступным ("public")</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_ReturnType">
        <source>ClassCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="translated">Метод ClassCleanup "{0}" должен возвращать значение "void", "Task" или "ValueTask"</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidMessageFormat_Static">
        <source>ClassCleanup method '{0}' should be 'static'</source>
        <target state="translated">Метод ClassCleanup "{0}" должен быть статическим ("static")</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupShouldBeValidTitle">
        <source>ClassCleanup methods should have valid layout</source>
        <target state="translated">Методы ClassCleanup должны использовать допустимый макет</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidDescription">
        <source>Methods marked with [ClassInitialize] should follow the following layout to be valid:
- it should be 'public' 
- it should be 'static'
- it should not be generic
- it should take one parameter of type 'TestContext'
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</source>
        <target state="translated">Чтобы методы, отмеченные [ClassInitialize], были допустимыми, они должны соответствовать следующему макету:
– метод должен быть общедоступным ("public") 
– метод должен быть статическим ("static") 
– метод не должен быть общим ("generic")
– метод должен принимать один параметр типа "TestContext"
– метод должен возвращать значение типа "void", "Task" или "ValueTask"
– метод не должен быть асинхронным и не возвращающим значения ("async void")
– метод не должен быть специальным (метод завершения, оператор…).</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_NotAGenericClassUnlessInheritanceModeSet">
        <source>ClassInitialize method '{0}' can't be declared on a generic class without the `InheritanceBehavior` mode is set</source>
        <target state="translated">Метод ClassInitialize "{0}" не может быть объявлен для универсального класса, если не установлен режим InheritanceBehavior</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_NotAsyncVoid">
        <source>ClassInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="translated">Метод ClassInitialize "{0}" должен возвращать значение "void", "Task" или "ValueTask"</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_NotGeneric">
        <source>ClassInitialize method '{0}' should not be generic</source>
        <target state="translated">Метод ClassInitialize "{0}" не должен быть общим ("generic")</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_Ordinary">
        <source>ClassInitialize method '{0}' should be an 'ordinary' method</source>
        <target state="translated">Метод ClassInitialize "{0}" должен быть ординарным ("ordinary")</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_Public">
        <source>ClassInitialize method '{0}' should be 'public'</source>
        <target state="translated">Метод ClassInitialize "{0}" должен быть общедоступным ("public")</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_ReturnType">
        <source>ClassInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="translated">Метод ClassInitialize "{0}" должен возвращать значение "void", "Task" или "ValueTask"</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_SingleContextParameter">
        <source>ClassInitialize method '{0}' should take a single parameter of type 'TestContext'</source>
        <target state="translated">Метод ClassInitialize "{0}" должен принимать один параметр типа "TestContext"</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidMessageFormat_Static">
        <source>ClassInitialize method '{0}' should be 'static'</source>
        <target state="translated">Метод ClassInitialize "{0}" должен быть статическим ("static")</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeShouldBeValidTitle">
        <source>ClassInitialize methods should have valid layout</source>
        <target state="translated">Методы ClassInitialize должны использовать допустимый макет</target>
        <note />
      </trans-unit>
      <trans-unit id="DataRowShouldBeValidDescription">
        <source>DataRow entry should have the following layout to be valid:
- should only be set on a test method;
- argument count should match method argument count;
- argument type should match method argument type.</source>
        <target state="translated">Действительная запись DataRow должна иметь следующую структуру:
– должна быть задана только для метода теста;
– количество аргументов должно совпадать с количеством аргументов метода;
– тип аргумента должен совпадать с типом аргумента метода.</target>
        <note />
      </trans-unit>
      <trans-unit id="DataRowShouldBeValidMessageFormat_ArgumentCountMismatch">
        <source>DataRow argument count should match method parameter count (constructor arguments: {0}, method parameters: {1})</source>
        <target state="translated">Количество аргументов DataRow должно соответствовать количеству параметров метода (аргументов конструктора: {0}, параметров метода: {1})</target>
        <note />
      </trans-unit>
      <trans-unit id="DataRowShouldBeValidMessageFormat_ArgumentTypeMismatch">
        <source>DataRow argument type should match method parameter type. Mismatches occur at indices: {0}</source>
        <target state="translated">Тип аргумента DataRow должен соответствовать типу параметра метода. Обнаружены несовпадения в следующих индексах: {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="DataRowShouldBeValidMessageFormat_OnTestMethod">
        <source>DataRow should only be set on a test method</source>
        <target state="translated">Значение DataRow следует задавать только для метода теста</target>
        <note />
      </trans-unit>
      <trans-unit id="DataRowShouldBeValidTitle">
        <source>DataRow should be valid</source>
        <target state="translated">Значение DataRow должно быть допустимым</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotNegateBooleanAssertionMessageFormat">
        <source>Do not negate boolean assertions, instead use the opposite assertion</source>
        <target state="translated">Не отрицать логические утверждения, вместо этого использовать противоположное утверждение</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotNegateBooleanAssertionTitle">
        <source>Do not negate boolean assertions</source>
        <target state="translated">Не отрицать логические утверждения</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotStoreStaticTestContextAnalyzerMessageFormat">
        <source>Do not store TestContext in a static member</source>
        <target state="translated">Не хранить TestContext в статическом элементе</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotStoreStaticTestContextAnalyzerTitle">
        <source>Do not store TestContext in a static member</source>
        <target state="translated">Не хранить TestContext в статическом элементе</target>
        <note />
      </trans-unit>
      <trans-unit id="PreferConstructorOverTestInitializeMessageFormat">
        <source>Prefer constructors over TestInitialize methods</source>
        <target state="translated">Предпочитать конструкторы методам TestInitialize</target>
        <note />
      </trans-unit>
      <trans-unit id="PreferConstructorOverTestInitializeTitle">
        <source>Prefer constructors over TestInitialize methods</source>
        <target state="translated">Предпочитать конструкторы методам TestInitialize</target>
        <note />
      </trans-unit>
      <trans-unit id="PreferDisposeOverTestCleanupMessageFormat">
        <source>Prefer 'Dispose' over TestCleanup methods</source>
        <target state="translated">Предпочитать "Dispose" методам TestCleanup</target>
        <note />
      </trans-unit>
      <trans-unit id="PreferDisposeOverTestCleanupTitle">
        <source>Prefer 'Dispose' over TestCleanup methods</source>
        <target state="translated">Предпочитать "Dispose" методам TestCleanup</target>
        <note />
      </trans-unit>
      <trans-unit id="PreferTestCleanupOverDisposeMessageFormat">
        <source>Prefer TestCleanup over 'Dispose' methods</source>
        <target state="translated">Предпочитать TestCleanup методам "Dispose"</target>
        <note />
      </trans-unit>
      <trans-unit id="PreferTestCleanupOverDisposeTitle">
        <source>Prefer TestCleanup over 'Dispose' methods</source>
        <target state="translated">Предпочитать TestCleanup методам "Dispose"</target>
        <note />
      </trans-unit>
      <trans-unit id="PreferTestInitializeOverConstructorMessageFormat">
        <source>Prefer TestInitialize methods over constructors</source>
        <target state="translated">Предпочитать методы TestInitialize конструкторам</target>
        <note />
      </trans-unit>
      <trans-unit id="PreferTestInitializeOverConstructorTitle">
        <source>Prefer TestInitialize methods over constructors</source>
        <target state="translated">Предпочитать методы TestInitialize конструкторам</target>
        <note />
      </trans-unit>
      <trans-unit id="PublicTypeShouldBeTestClassDescription">
        <source>It's considered a good practice to have only test classes marked public in a test project.</source>
        <target state="translated">Рекомендуется использовать только тестовые классы, помеченные как общедоступные в тестовом проекте.</target>
        <note />
      </trans-unit>
      <trans-unit id="PublicTypeShouldBeTestClassMessageFormat">
        <source>Public type '{0}' should be marked with '[TestClass]' or changed to 'internal'</source>
        <target state="translated">Общедоступный тип "{0}" должен быть помечен атрибутом "[TestClass]" или изменен на значение "internal"</target>
        <note />
      </trans-unit>
      <trans-unit id="PublicTypeShouldBeTestClassTitle">
        <source>Public types should be test classes</source>
        <target state="translated">Общедоступные типы должны быть тестовыми классами</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldBeValidDescription">
        <source>Test classes, classes marked with the '[TestClass]' attribute, should respect the following layout to be considered valid by MSTest:
- it should be 'public' (or 'internal' if '[assembly: DiscoverInternals]' attribute is set)
- it should not be 'static' (except if it contains only 'AssemblyInitialize' and/or 'AssemblyCleanup' methods)
- it should not be generic.</source>
        <target state="translated">В тестовых классах (с атрибутом "[TestClass]") должна быть следующая структура, чтобы эти классы считались допустимыми для MSTest:
- у класса должно быть свойство "public" (или "internal", если задан атрибут "[assembly: DiscoverInternals]")
- у класс не должно быть свойства "static" (кроме случаев, когда класс содержит только методы "AssemblyInitialize" и "AssemblyCleanup")
- класс не должен быть универсальным.</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldBeValidMessageFormat_NotStatic">
        <source>Test class '{0}' should not be 'static'</source>
        <target state="translated">Тестовый класс "{0}" не должен использовать значение "static"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldBeValidMessageFormat_Public">
        <source>Test class '{0}' should be 'public'</source>
        <target state="translated">Тестовому классу "{0}" должно быть присвоено значение "public"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldBeValidMessageFormat_PublicOrInternal">
        <source>Test class '{0}' should be 'public' or 'internal'</source>
        <target state="translated">Тестовому классу "{0}" должно быть присвоено значение "public" или "internal"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldBeValidTitle">
        <source>Test classes should have valid layout</source>
        <target state="translated">Тестовые классы должны использовать допустимую структуру</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldHaveTestMethodDescription">
        <source>Test class should have at least one test method or be 'static' with method(s) marked by '[AssemblyInitialization]' and/or '[AssemblyCleanup]'.</source>
        <target state="translated">Тестовый класс должен содержать хотя бы один тестовый метод или быть "статическим" с методами, отмеченными "[AssemblyInitialization]" или "[AssemblyCleanup]".</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldHaveTestMethodMessageFormat">
        <source>Test class '{0}' should have at least one test method or be 'static' with method(s) marked by '[AssemblyInitialization]' and/or '[AssemblyCleanup]'</source>
        <target state="translated">Тестовый класс "{0}" должен содержать хотя бы один тестовый метод или быть "статическим" с методами, отмеченными "[AssemblyInitialization]" или "[AssemblyCleanup]"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldHaveTestMethodTitle">
        <source>Test class should have test method</source>
        <target state="translated">Тестовый класс должен содержать тестовый метод</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidDescription">
        <source>Methods marked with [TestCleanup] should follow the following layout to be valid:
- it should be 'public' 
- it should not be 'static'
- it should not be generic
- it should not be 'abstract'
- it should not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</source>
        <target state="translated">Чтобы методы, отмеченные [TestCleanup], были действительными, они должны соответствовать следующему методу:
– должно быть присвоено значение "public" 
– должно быть присвоено значение, отличное от "static"
– должно быть присвоено значение, отличное от "generic"
– должно быть присвоено значение, отличное от "abstract"
– не должны присваиваться параметры
– тип возвращаемого значения должен быть "void", "Task" или "ValueTask"
– должно быть присвоено значение, отличное от "async void"
– это должен быть специальный метод (метод завершения, оператор...).</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_NoParameters">
        <source>TestCleanup method '{0}' should not take any parameter</source>
        <target state="translated">Методу TestCleanup "{0}" не должны присваиваться параметры</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_NotAbstract">
        <source>TestCleanup method '{0}' should not be 'abstract'</source>
        <target state="translated">Методу TestCleanup "{0}" должно быть присвоено значение, отличное от "abstract"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_NotAsyncVoid">
        <source>TestCleanup method '{0}' should not be 'async void'</source>
        <target state="translated">Методу TestCleanup "{0}" не должно присваиваться значение "async void"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_NotGeneric">
        <source>TestCleanup method '{0}' should not be generic</source>
        <target state="translated">Методу TestCleanup "{0}" не должно присваиваться значение "generic"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_NotStatic">
        <source>TestCleanup method '{0}' should not be 'static'</source>
        <target state="translated">Методу TestCleanup "{0}" не должно присваиваться значение "static"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_Ordinary">
        <source>TestCleanup method '{0}' should be an 'ordinary' method</source>
        <target state="translated">Методу TestCleanup "{0}" должно быть присвоено значение "ordinary"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_Public">
        <source>TestCleanup method '{0}' should be 'public'</source>
        <target state="translated">Методу TestCleanup "{0}" должно быть присвоено значение "public"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidMessageFormat_ReturnType">
        <source>TestCleanup method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="translated">Метод TestCleanup "{0}" должен возвращать значение "void", "Task" или "ValueTask"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupShouldBeValidTitle">
        <source>TestCleanup method should have valid layout</source>
        <target state="translated">Метод TestCleanup должен использовать допустимый макет</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidDescription">
        <source>TestContext property should follow the following layout to be valid:
- it should be a property
- it should be 'public' (or 'internal' if '[assembly: DiscoverInternals]' attribute is set)
- it should not be 'static'
- it should not be readonly.</source>
        <target state="translated">Свойство TestContext должно использовать следующий макет, чтобы считаться допустимым:
– должно быть свойством;
– должно быть присвоено значение "public" (или "internal", если задан атрибут "[assembly: DiscoverInternals]");
– не следует присваивать значение "static";
– не должно предназначаться только для чтения.</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidMessageFormat_NotField">
        <source>Member 'TestContext' should be a property and not a field</source>
        <target state="translated">Элемент "TestContext" должен быть свойством, а не полем</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidMessageFormat_NotReadonly">
        <source>Property 'TestContext' should be settable</source>
        <target state="translated">Свойство "TestContext" должно поддерживать настройку</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidMessageFormat_NotStatic">
        <source>Property 'TestContext' should not be 'static'</source>
        <target state="translated">Свойству "TestContext" не следует присваивать значение "static"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidMessageFormat_Public">
        <source>Property 'TestContext' should be 'public'</source>
        <target state="translated">Свойство "TestContext" должно иметь значение "public"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidMessageFormat_PublicOrInternal">
        <source>Property 'TestContext' should be 'public' or 'internal'</source>
        <target state="translated">Свойство "TestContext" должно иметь значение "public" или "internal"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidTitle">
        <source>Test context property should have valid layout</source>
        <target state="translated">Тестовое контекстное свойство должно использовать допустимый макет</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidDescription">
        <source>Methods marked with [TestInitialize] should follow the following layout to be valid:
- it should be 'public' 
- it should not be 'static'
- it should not be generic
- it should not be 'abstract'
- it should not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</source>
        <target state="translated">Чтобы методы, отмеченные [TestInitialize], были допустимыми, они должны соответствовать следующему макету:
– должно быть присвоено значение "public" 
– должно быть присвоено значение, отличное от "static"
– должно быть присвоено значение, отличное от "generic"
– должно быть присвоено значение, отличное от "abstract"
– не должны присваиваться параметры
– тип возвращаемого значения должен быть "void", "Task" или "ValueTask"
– должно быть присвоено значение, отличное от "async void"
– это должен быть специальный метод (метод завершения, оператор...).</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_NoParameters">
        <source>TestInitialize method '{0}' should not take any parameter</source>
        <target state="translated">Методу TestInitialize "{0}" не должны присваиваться параметры</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_NotAbstract">
        <source>TestInitialize method '{0}' should not be 'abstract'</source>
        <target state="translated">Методу TestInitialize "{0}" не должно присваиваться значение "abstract"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_NotAsyncVoid">
        <source>TestInitialize method  '{0}' should not be 'async void'</source>
        <target state="translated">Методу TestInitialize "{0}" не должно присваиваться значение "async void"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_NotGeneric">
        <source>TestInitialize method '{0}' should not be generic</source>
        <target state="translated">Методу TestInitialize "{0}" не должно присваиваться значение "generic"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_NotStatic">
        <source>TestInitialize method '{0}' should not be 'static'</source>
        <target state="translated">Методу TestInitialize "{0}" не должно присваиваться значение "static"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_Ordinary">
        <source>TestInitialize method '{0}' should be an 'ordinary' method</source>
        <target state="translated">Методу TestInitialize "{0}" должно быть присвоено значение "ordinary"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_Public">
        <source>TestInitialize method '{0}' should be 'public'</source>
        <target state="translated">Методу TestInitialize "{0}" должно быть присвоено значение "public"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidMessageFormat_ReturnType">
        <source>TestInitialize method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="translated">Метод TestInitialize "{0}" должен возвращать значение "void", "Task" или "ValueTask"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeShouldBeValidTitle">
        <source>TestInitialize method should have valid layout</source>
        <target state="translated">Метод TestInitialize должен использовать допустимый макет</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidDescription">
        <source>Test methods, methods marked with the '[TestMethod]' attribute, should respect the following layout to be considered valid by MSTest:
- it should be 'public' (or 'internal' if '[assembly: DiscoverInternals]' attribute is set)
- it should not be 'static'
- it should not be generic
- it should not be 'abstract'
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</source>
        <target state="translated">Методы теста (методы, помеченные атрибутом "[TestMethod]") должны соблюдать следующую структуру, чтобы считаться допустимыми в MSTest:
– должно быть присвоено значение "public" (или "internal", если задан атрибут "[assembly: DiscoverInternals]")
– не следует присваивать значение "static"
– не следует присваивать универсальное значение
– не следует присваивать значение "abstract"
- возвращаемый тип должен быть "void", "Task" или "ValueTask"
– не следует присваивать значение "async void"
– это должен быть специальный метод (метод завершения, оператор...).</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_NotAbstract">
        <source>Test method '{0}' should not be 'abstract'</source>
        <target state="translated">Метод теста "{0}" не должен использовать значение "abstract"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_NotAsyncVoid">
        <source>Test method '{0}' should not be 'async void'</source>
        <target state="translated">Метод теста "{0}" не должен использовать значение "async void"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_NotGeneric">
        <source>Test method '{0}' should not be generic</source>
        <target state="translated">Метод теста "{0}" не должен быть универсальным</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_NotStatic">
        <source>Test method '{0}' should not be 'static'</source>
        <target state="translated">Метод теста "{0}" не должен использовать значение "static"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_Ordinary">
        <source>Test method '{0}' should be an 'ordinary' method</source>
        <target state="translated">Метод теста "{0}" должен быть методом "ordinary"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_Public">
        <source>Test method '{0}' should be 'public'</source>
        <target state="translated">Методу теста "{0}" должно быть присвоено значение "public"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_PublicOrInternal">
        <source>Test method '{0}' should be 'public' or 'internal'</source>
        <target state="translated">Методу теста "{0}" должно быть присвоено значение "public" или "internal"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidMessageFormat_ReturnType">
        <source>Test method '{0}' should return 'void', 'Task' or 'ValueTask'</source>
        <target state="translated">Метод теста "{0}" должен возвращать значение "void", "Task" или "ValueTask"</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidTitle">
        <source>Test methods should have valid layout</source>
        <target state="translated">Методы теста должны использовать допустимую структуру</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldNotBeIgnoredAnalyzerDescription">
        <source>Test methods should not be ignored (marked with '[Ignore]').</source>
        <target state="translated">Методы теста не должны игнорироваться (помечаться с помощью "[Ignore]").</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldNotBeIgnoredAnalyzerFormat">
        <source>Test method '{0}' should not be ignored</source>
        <target state="translated">Метод теста "{0}" не должен игнорироваться</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldNotBeIgnoredAnalyzerTitle">
        <source>Test method should not be ignored</source>
        <target state="translated">Метод теста не должен игнорироваться</target>
        <note />
      </trans-unit>
      <trans-unit id="UseAttributeOnTestMethodAnalyzerMessageFormat">
        <source>[{0}] can only be set on methods marked with [TestMethod]</source>
        <target state="translated">[{0}] можно задать только для методов с пометкой [TestMethod]</target>
        <note />
      </trans-unit>
      <trans-unit id="UseAttributeOnTestMethodAnalyzerTitle">
        <source>[{0}] can only be set on methods marked with [TestMethod]</source>
        <target state="translated">[{0}] можно задать только для методов с пометкой [TestMethod]</target>
        <note />
      </trans-unit>
      <trans-unit id="UseParallelizeAttributeAnalyzerDescription">
        <source>By default, MSTest runs tests within the same assembly sequentially, which can lead to severe performance limitations. It is recommended to enable assembly attribute '[Parallelize]' to run tests in parallel, or if the assembly is known to not be parallelizable, to use explicitly the assembly level attribute '[DoNotParallelize]'.</source>
        <target state="translated">По умолчанию MSTest выполняет тесты в одной сборке последовательно, что может привести к серьезному ограничению производительности. Рекомендуется включить атрибут сборки "[Parallelize]", чтобы выполнять тесты параллельно, или явно использовать атрибут уровня сборки "[DoNotParallelize]", если известно, что сборка не поддерживает параллелизацию.</target>
        <note />
      </trans-unit>
      <trans-unit id="UseParallelizeAttributeAnalyzerMessageFormat">
        <source>Explicitly enable or disable tests parallelization</source>
        <target state="translated">Явное включение или отключение параллелизации тестов</target>
        <note />
      </trans-unit>
      <trans-unit id="UseParallelizeAttributeAnalyzerTitle">
        <source>Explicitly enable or disable tests parallelization</source>
        <target state="translated">Явное включение или отключение параллелизации тестов</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>