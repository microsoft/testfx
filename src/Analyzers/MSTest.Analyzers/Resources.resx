<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AvoidExpectedExceptionAttributeDescription" xml:space="preserve">
    <value>Prefer 'Assert.ThrowsException' or 'Assert.ThrowsExceptionAsync' over '[ExpectedException]' as it ensures that only the expected call throws the expected exception. The assert APIs also provide more flexibility and allow you to assert extra properties of the exeption.</value>
  </data>
  <data name="AvoidExpectedExceptionAttributeMessageFormat" xml:space="preserve">
    <value>Prefer 'Assert.ThrowsException/ThrowsExceptionAsync' over '[ExpectedException]'</value>
  </data>
  <data name="AvoidExpectedExceptionAttributeTitle" xml:space="preserve">
    <value>Avoid '[ExpectedException]'</value>
  </data>
  <data name="PublicTypeShouldBeTestClassDescription" xml:space="preserve">
    <value>It's considered a good practice to have only test classes marked public in a test project.</value>
  </data>
  <data name="PublicTypeShouldBeTestClassMessageFormat" xml:space="preserve">
    <value>Public type '{0}' should be marked with '[TestClass]' or changed to 'internal'</value>
  </data>
  <data name="PublicTypeShouldBeTestClassTitle" xml:space="preserve">
    <value>Public types should be test classes</value>
  </data>
  <data name="TestClassShouldBeValidDescription" xml:space="preserve">
    <value>Test classes, classes marked with the '[TestClass]' attribute, should respect the following layout to be considered valid by MSTest:
- it should be 'public' (or 'internal' if '[assembly: DiscoverInternals]' attribute is set)
- it should not be 'static' (except if it contains only 'AssemblyInitialize' and/or 'AssemblyCleanup' methods)
- it should not be generic.</value>
  </data>
  <data name="TestClassShouldBeValidMessageFormat_NotGeneric" xml:space="preserve">
    <value>Test class '{0}' should not be generic</value>
  </data>
  <data name="TestClassShouldBeValidMessageFormat_NotStatic" xml:space="preserve">
    <value>Test class '{0}' should not be 'static'</value>
  </data>
  <data name="TestClassShouldBeValidMessageFormat_Public" xml:space="preserve">
    <value>Test class '{0}' should be 'public'</value>
  </data>
  <data name="TestClassShouldBeValidMessageFormat_PublicOrInternal" xml:space="preserve">
    <value>Test class '{0}' should be 'public' or 'internal'</value>
  </data>
  <data name="TestClassShouldBeValidTitle" xml:space="preserve">
    <value>Test classes should have valid layout</value>
  </data>
  <data name="TestContextShouldBeValidDescription" xml:space="preserve">
    <value>TestContext property should follow the following layout to be valid:
- it should be a property
- it should be 'public' (or 'internal' if '[assembly: DiscoverInternals]' attribute is set)
- it should not be 'static'
- it should not be readonly.</value>
  </data>
  <data name="TestContextShouldBeValidMessageFormat_NotField" xml:space="preserve">
    <value>Member 'TestContext' should be a property and not a field</value>
  </data>
  <data name="TestContextShouldBeValidMessageFormat_NotReadonly" xml:space="preserve">
    <value>Property 'TestContext' should be settable</value>
  </data>
  <data name="TestContextShouldBeValidMessageFormat_NotStatic" xml:space="preserve">
    <value>Property 'TestContext' should not be 'static'</value>
  </data>
  <data name="TestContextShouldBeValidMessageFormat_Public" xml:space="preserve">
    <value>Property 'TestContext' should be 'public'</value>
  </data>
  <data name="TestContextShouldBeValidMessageFormat_PublicOrInternal" xml:space="preserve">
    <value>Property 'TestContext' should be 'public' or 'internal'</value>
  </data>
  <data name="TestContextShouldBeValidTitle" xml:space="preserve">
    <value>Test context property should have valid layout</value>
  </data>
  <data name="TestMethodShouldBeValidDescription" xml:space="preserve">
    <value>Test methods, methods marked with the '[TestMethod]' attribute, should respect the following layout to be considered valid by MSTest:
- it should be 'public' (or 'internal' if '[assembly: DiscoverInternals]' attribute is set)
- it should not be 'static'
- it should not be generic
- it should not be 'abstract'
- return type should be 'void' or 'Task'
- it should not be 'async void'
- it should be a special method (finalizer, operator...).</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_NotAbstract" xml:space="preserve">
    <value>Test method '{0}' should not be 'abstract'</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_NotAsyncVoid" xml:space="preserve">
    <value>Test method '{0}' should not be 'async void'</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_NotGeneric" xml:space="preserve">
    <value>Test method '{0}' should not be generic</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_NotStatic" xml:space="preserve">
    <value>Test method '{0}' should not be 'static'</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_Ordinary" xml:space="preserve">
    <value>Test method '{0}' should be an 'ordinary' method</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_Public" xml:space="preserve">
    <value>Test method '{0}' should be 'public'</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_PublicOrInternal" xml:space="preserve">
    <value>Test method '{0}' should be 'public' or 'internal'</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_ReturnType" xml:space="preserve">
    <value>Test method '{0}' should return 'void' or 'Task'</value>
  </data>
  <data name="TestMethodShouldBeValidTitle" xml:space="preserve">
    <value>Test methods should have valid layout</value>
  </data>
  <data name="UseParallelizeAttributeAnalyzerDescription" xml:space="preserve">
    <value>By default, MSTest runs tests within the same assembly sequentially, which can lead to severe performance limitations. It is recommended to enable assembly attribute '[Parallelize]' to run tests in parallel, or if the assembly is known to not be parallelizable, to use explicitly the assembly level attribute '[DoNotParallelize]'.</value>
  </data>
  <data name="UseParallelizeAttributeAnalyzerMessageFormat" xml:space="preserve">
    <value>Explicitly enable or disable tests parallelization</value>
  </data>
  <data name="UseParallelizeAttributeAnalyzerTitle" xml:space="preserve">
    <value>Explicitly enable or disable tests parallelization</value>
  </data>
</root>