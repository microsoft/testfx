<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssemblyCleanupShouldBeValidDescription" xml:space="preserve">
    <value>Methods marked with [AssemblyCleanup] should follow the following layout to be valid:
- be 'public' 
- be 'static'
- not be generic nor defined on a generic class
- not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- not be 'async void'
- not be a special method (finalizer, operator...).</value>
  </data>
  <data name="AssemblyCleanupShouldBeValidMessageFormat" xml:space="preserve">
    <value>AssemblyCleanup method '{0}' signature is invalid</value>
  </data>
  <data name="AssemblyCleanupShouldBeValidTitle" xml:space="preserve">
    <value>AssemblyCleanup methods should have valid layout</value>
  </data>
  <data name="AssemblyInitializeShouldBeValidDescription" xml:space="preserve">
    <value>Methods marked with [AssemblyInitialize] should follow the following layout to be valid:
- be 'public' 
- be 'static'
- not be generic nor be defined on a generic class
- take a single parameter of type 'TestContext'
- return type should be 'void', 'Task' or 'ValueTask'
- not be 'async void'
- not be a special method (finalizer, operator...).</value>
  </data>
  <data name="AssemblyInitializeShouldBeValidMessageFormat" xml:space="preserve">
    <value>AssemblyInitialize method '{0}' signature is invalid</value>
  </data>
  <data name="AssemblyInitializeShouldBeValidTitle" xml:space="preserve">
    <value>AssemblyInitialize methods should have valid layout</value>
  </data>
  <data name="AssertionArgsShouldAvoidConditionalAccessMessageFormat" xml:space="preserve">
    <value>Prefer adding an additional assertion that checks for null</value>
  </data>
  <data name="AssertionArgsShouldAvoidConditionalAccessTitle" xml:space="preserve">
    <value>Avoid conditional access in assertions</value>
  </data>
  <data name="AssertionArgsShouldBePassedInCorrectOrderDescription" xml:space="preserve">
    <value>'Assert.AreEqual', 'Assert.AreNotEqual', 'Assert.AreSame' and 'Assert.AreNotSame' expects the expected value to be passed first and the actual value to be passed as second argument.</value>
  </data>
  <data name="AssertionArgsShouldBePassedInCorrectOrderMessageFormat" xml:space="preserve">
    <value>Assertion arguments should be passed in the correct order. 'actual' and 'expected'/'notExpected' arguments have been swapped.</value>
  </data>
  <data name="AssertionArgsShouldBePassedInCorrectOrderTitle" xml:space="preserve">
    <value>Assertion arguments should be passed in the correct order</value>
  </data>
  <data name="AvoidExpectedExceptionAttributeDescription" xml:space="preserve">
    <value>Prefer 'Assert.ThrowsException' or 'Assert.ThrowsExceptionAsync' over '[ExpectedException]' as it ensures that only the expected call throws the expected exception. The assert APIs also provide more flexibility and allow you to assert extra properties of the exeption.</value>
  </data>
  <data name="AvoidExpectedExceptionAttributeMessageFormat" xml:space="preserve">
    <value>Prefer 'Assert.ThrowsException/ThrowsExceptionAsync' over '[ExpectedException]'</value>
  </data>
  <data name="AvoidExpectedExceptionAttributeTitle" xml:space="preserve">
    <value>Avoid '[ExpectedException]'</value>
  </data>
  <data name="ClassCleanupShouldBeValidDescription" xml:space="preserve">
    <value>Methods marked with [ClassCleanup] should follow the following layout to be valid:
- be 'public' 
- not be 'static'
- not be generic nor defined on a generic class
- not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- not be 'async void'
- not be a special method (finalizer, operator...).</value>
  </data>
  <data name="ClassCleanupShouldBeValidMessageFormat" xml:space="preserve">
    <value>ClassCleanup method '{0}' signature is invalid</value>
  </data>
  <data name="ClassCleanupShouldBeValidTitle" xml:space="preserve">
    <value>ClassCleanup methods should have valid layout</value>
  </data>
  <data name="ClassInitializeShouldBeValidDescription" xml:space="preserve">
    <value>Methods marked with [ClassInitialize] should follow the following layout to be valid:
- be 'public' 
- be 'static'
- not be generic nor be defined on a generic class
- take a single parameter of type 'TestContext'
- return type should be 'void', 'Task' or 'ValueTask'
- not be 'async void'
- not be a special method (finalizer, operator...).</value>
  </data>
  <data name="ClassInitializeShouldBeValidMessageFormat" xml:space="preserve">
    <value>ClassInitialize method '{0}' signature is invalid</value>
  </data>
  <data name="ClassInitializeShouldBeValidTitle" xml:space="preserve">
    <value>ClassInitialize methods should have valid layout</value>
  </data>
  <data name="DataRowShouldBeValidDescription" xml:space="preserve">
    <value>DataRow entry should have the following layout to be valid:
- should only be set on a test method;
- argument count should match method argument count;
- argument type should match method argument type.</value>
  </data>
  <data name="DataRowShouldBeValidMessageFormat_ArgumentCountMismatch" xml:space="preserve">
    <value>DataRow argument count should match method parameter count (constructor arguments: {0}, method parameters: {1})</value>
  </data>
  <data name="DataRowShouldBeValidMessageFormat_ArgumentTypeMismatch" xml:space="preserve">
    <value>DataRow argument type should match method parameter type. Mismatches occur at indices: {0}</value>
  </data>
  <data name="DataRowShouldBeValidMessageFormat_OnTestMethod" xml:space="preserve">
    <value>DataRow should only be set on a test method</value>
  </data>
  <data name="DataRowShouldBeValidTitle" xml:space="preserve">
    <value>DataRow should be valid</value>
  </data>
  <data name="DoNotNegateBooleanAssertionMessageFormat" xml:space="preserve">
    <value>Do not negate boolean assertions, instead use the opposite assertion</value>
  </data>
  <data name="DoNotNegateBooleanAssertionTitle" xml:space="preserve">
    <value>Do not negate boolean assertions</value>
  </data>
  <data name="DoNotStoreStaticTestContextAnalyzerMessageFormat" xml:space="preserve">
    <value>Do not store TestContext in a static member</value>
  </data>
  <data name="DoNotStoreStaticTestContextAnalyzerTitle" xml:space="preserve">
    <value>Do not store TestContext in a static member</value>
  </data>
  <data name="PreferAssertFailOverAlwaysFalseConditionsMessageFormat" xml:space="preserve">
    <value>Use 'Assert.Fail' instead of an always-failing 'Assert.{0}' assert</value>
  </data>
  <data name="PreferAssertFailOverAlwaysFalseConditionsTitle" xml:space="preserve">
    <value>Use 'Assert.Fail' instead of an always-failing assert</value>
  </data>
  <data name="PreferConstructorOverTestInitializeMessageFormat" xml:space="preserve">
    <value>Prefer constructors over TestInitialize methods</value>
  </data>
  <data name="PreferConstructorOverTestInitializeTitle" xml:space="preserve">
    <value>Prefer constructors over TestInitialize methods</value>
  </data>
  <data name="PreferDisposeOverTestCleanupMessageFormat" xml:space="preserve">
    <value>Prefer 'Dispose' over TestCleanup methods</value>
  </data>
  <data name="PreferDisposeOverTestCleanupTitle" xml:space="preserve">
    <value>Prefer 'Dispose' over TestCleanup methods</value>
  </data>
  <data name="PreferTestCleanupOverDisposeMessageFormat" xml:space="preserve">
    <value>Prefer TestCleanup over 'Dispose' methods</value>
  </data>
  <data name="PreferTestCleanupOverDisposeTitle" xml:space="preserve">
    <value>Prefer TestCleanup over 'Dispose' methods</value>
  </data>
  <data name="PreferTestInitializeOverConstructorMessageFormat" xml:space="preserve">
    <value>Prefer TestInitialize methods over constructors</value>
  </data>
  <data name="PreferTestInitializeOverConstructorTitle" xml:space="preserve">
    <value>Prefer TestInitialize methods over constructors</value>
  </data>
  <data name="PublicMethodShouldBeTestMethodAnalyzerDescription" xml:space="preserve">
    <value>Public methods should be test methods (marked with `[TestMethod]`).</value>
  </data>
  <data name="PublicMethodShouldBeTestMethodAnalyzerFormat" xml:space="preserve">
    <value>Public method '{0}' should be a test method</value>
  </data>
  <data name="PublicMethodShouldBeTestMethodAnalyzerTitle" xml:space="preserve">
    <value>Public methods should be test methods</value>
  </data>
  <data name="PublicTypeShouldBeTestClassDescription" xml:space="preserve">
    <value>It's considered a good practice to have only test classes marked public in a test project.</value>
  </data>
  <data name="PublicTypeShouldBeTestClassMessageFormat" xml:space="preserve">
    <value>Public type '{0}' should be marked with '[TestClass]' or changed to 'internal'</value>
  </data>
  <data name="PublicTypeShouldBeTestClassTitle" xml:space="preserve">
    <value>Public types should be test classes</value>
  </data>
  <data name="TestClassShouldBeValidDescription" xml:space="preserve">
    <value>Test classes, classes marked with the '[TestClass]' attribute, should respect the following layout to be considered valid by MSTest:
- it should be 'public' (or 'internal' if '[assembly: DiscoverInternals]' attribute is set)
- it should not be 'static' (except if it contains only 'AssemblyInitialize' and/or 'AssemblyCleanup' methods)
- it should not be generic.</value>
  </data>
  <data name="TestClassShouldBeValidMessageFormat_NotStatic" xml:space="preserve">
    <value>Test class '{0}' should not be 'static'</value>
  </data>
  <data name="TestClassShouldBeValidMessageFormat_Public" xml:space="preserve">
    <value>Test class '{0}' should be 'public'</value>
  </data>
  <data name="TestClassShouldBeValidMessageFormat_PublicOrInternal" xml:space="preserve">
    <value>Test class '{0}' should be 'public' or 'internal'</value>
  </data>
  <data name="TestClassShouldBeValidTitle" xml:space="preserve">
    <value>Test classes should have valid layout</value>
  </data>
  <data name="TestClassShouldHaveTestMethodDescription" xml:space="preserve">
    <value>Test class should have at least one test method or be 'static' with method(s) marked by '[AssemblyInitialization]' and/or '[AssemblyCleanup]'.</value>
  </data>
  <data name="TestClassShouldHaveTestMethodMessageFormat" xml:space="preserve">
    <value>Test class '{0}' should have at least one test method or be 'static' with method(s) marked by '[AssemblyInitialization]' and/or '[AssemblyCleanup]'</value>
  </data>
  <data name="TestClassShouldHaveTestMethodTitle" xml:space="preserve">
    <value>Test class should have test method</value>
  </data>
  <data name="TestCleanupShouldBeValidDescription" xml:space="preserve">
    <value>Methods marked with [TestCleanup] should follow the following layout to be valid:
- be 'public' 
- not be 'static'
- not be generic or be defined on a generic class
- not be 'abstract'
- not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- not be 'async void'
- not be a special method (finalizer, operator...).</value>
  </data>
  <data name="TestCleanupShouldBeValidMessageFormat" xml:space="preserve">
    <value>TestCleanup method '{0}' signature is invalid</value>
  </data>
  <data name="TestCleanupShouldBeValidTitle" xml:space="preserve">
    <value>TestCleanup method should have valid layout</value>
  </data>
  <data name="TestContextShouldBeValidDescription" xml:space="preserve">
    <value>TestContext property should follow the following layout to be valid:
- it should be a property
- it should be 'public' (or 'internal' if '[assembly: DiscoverInternals]' attribute is set)
- it should not be 'static'
- it should not be readonly.</value>
  </data>
  <data name="TestContextShouldBeValidMessageFormat_NotField" xml:space="preserve">
    <value>Member 'TestContext' should be a property and not a field</value>
  </data>
  <data name="TestContextShouldBeValidMessageFormat_NotReadonly" xml:space="preserve">
    <value>Property 'TestContext' should be settable</value>
  </data>
  <data name="TestContextShouldBeValidMessageFormat_NotStatic" xml:space="preserve">
    <value>Property 'TestContext' should not be 'static'</value>
  </data>
  <data name="TestContextShouldBeValidMessageFormat_Public" xml:space="preserve">
    <value>Property 'TestContext' should be 'public'</value>
  </data>
  <data name="TestContextShouldBeValidMessageFormat_PublicOrInternal" xml:space="preserve">
    <value>Property 'TestContext' should be 'public' or 'internal'</value>
  </data>
  <data name="TestContextShouldBeValidTitle" xml:space="preserve">
    <value>Test context property should have valid layout</value>
  </data>
  <data name="TestInitializeShouldBeValidDescription" xml:space="preserve">
    <value>Methods marked with [TestInitialize] should follow the following layout to be valid:
- be 'public' 
- not be 'static'
- not be generic nor defined on a generic class
- not be 'abstract'
- not take any parameter
- return type should be 'void', 'Task' or 'ValueTask'
- not be 'async void'
- not be a special method (finalizer, operator...).</value>
  </data>
  <data name="TestInitializeShouldBeValidMessageFormat" xml:space="preserve">
    <value>TestInitialize method '{0}' signature is invalid</value>
  </data>
  <data name="TestInitializeShouldBeValidTitle" xml:space="preserve">
    <value>TestInitialize method should have valid layout</value>
  </data>
  <data name="TestMethodShouldBeValidDescription" xml:space="preserve">
    <value>Test methods, methods marked with the '[TestMethod]' attribute, should respect the following layout to be considered valid by MSTest:
- it should be 'public' (or 'internal' if '[assembly: DiscoverInternals]' attribute is set)
- it should not be 'static'
- it should not be generic
- it should not be 'abstract'
- return type should be 'void', 'Task' or 'ValueTask'
- it should not be 'async void'
- it should not be a special method (finalizer, operator...).</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_NotAbstract" xml:space="preserve">
    <value>Test method '{0}' should not be 'abstract'</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_NotAsyncVoid" xml:space="preserve">
    <value>Test method '{0}' should not be 'async void'</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_NotGeneric" xml:space="preserve">
    <value>Test method '{0}' should not be generic</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_NotStatic" xml:space="preserve">
    <value>Test method '{0}' should not be 'static'</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_Ordinary" xml:space="preserve">
    <value>Test method '{0}' should be an 'ordinary' method</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_Public" xml:space="preserve">
    <value>Test method '{0}' should be 'public'</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_PublicOrInternal" xml:space="preserve">
    <value>Test method '{0}' should be 'public' or 'internal'</value>
  </data>
  <data name="TestMethodShouldBeValidMessageFormat_ReturnType" xml:space="preserve">
    <value>Test method '{0}' should return 'void', 'Task' or 'ValueTask'</value>
  </data>
  <data name="TestMethodShouldBeValidTitle" xml:space="preserve">
    <value>Test methods should have valid layout</value>
  </data>
  <data name="TestMethodShouldNotBeIgnoredAnalyzerDescription" xml:space="preserve">
    <value>Test methods should not be ignored (marked with '[Ignore]').</value>
  </data>
  <data name="TestMethodShouldNotBeIgnoredAnalyzerFormat" xml:space="preserve">
    <value>Test method '{0}' should not be ignored</value>
  </data>
  <data name="TestMethodShouldNotBeIgnoredAnalyzerTitle" xml:space="preserve">
    <value>Test method should not be ignored</value>
  </data>
  <data name="UseAsyncSuffixTestFixtureMethodSuppressorJustification" xml:space="preserve">
    <value>Asynchronous test fixture methods do not require the 'Async' suffix</value>
  </data>
  <data name="UseAsyncSuffixTestMethodSuppressorJustification" xml:space="preserve">
    <value>Asynchronous test methods do not require the 'Async' suffix</value>
  </data>
  <data name="UseAttributeOnTestMethodAnalyzerMessageFormat" xml:space="preserve">
    <value>[{0}] can only be set on methods marked with [TestMethod]</value>
  </data>
  <data name="UseAttributeOnTestMethodAnalyzerTitle" xml:space="preserve">
    <value>[{0}] can only be set on methods marked with [TestMethod]</value>
  </data>
  <data name="UseParallelizeAttributeAnalyzerDescription" xml:space="preserve">
    <value>By default, MSTest runs tests within the same assembly sequentially, which can lead to severe performance limitations. It is recommended to enable assembly attribute '[Parallelize]' to run tests in parallel, or if the assembly is known to not be parallelizable, to use explicitly the assembly level attribute '[DoNotParallelize]'.</value>
  </data>
  <data name="UseParallelizeAttributeAnalyzerMessageFormat" xml:space="preserve">
    <value>Explicitly enable or disable tests parallelization</value>
  </data>
  <data name="UseParallelizeAttributeAnalyzerTitle" xml:space="preserve">
    <value>Explicitly enable or disable tests parallelization</value>
  </data>
</root>