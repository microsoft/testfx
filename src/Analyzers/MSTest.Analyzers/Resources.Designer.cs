//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MSTest.Analyzers {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MSTest.Analyzers.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods marked with [AssemblyCleanup] should follow the following layout to be valid:
        ///- be &apos;public&apos; 
        ///- be &apos;static&apos;
        ///- not be generic nor defined on a generic class
        ///- not take any parameter
        ///- return type should be &apos;void&apos;, &apos;Task&apos; or &apos;ValueTask&apos;
        ///- not be &apos;async void&apos;
        ///- not be a special method (finalizer, operator...)..
        /// </summary>
        internal static string AssemblyCleanupShouldBeValidDescription {
            get {
                return ResourceManager.GetString("AssemblyCleanupShouldBeValidDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AssemblyCleanup method &apos;{0}&apos; signature is invalid.
        /// </summary>
        internal static string AssemblyCleanupShouldBeValidMessageFormat {
            get {
                return ResourceManager.GetString("AssemblyCleanupShouldBeValidMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AssemblyCleanup methods should have valid layout.
        /// </summary>
        internal static string AssemblyCleanupShouldBeValidTitle {
            get {
                return ResourceManager.GetString("AssemblyCleanupShouldBeValidTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods marked with [AssemblyInitialize] should follow the following layout to be valid:
        ///- be &apos;public&apos; 
        ///- be &apos;static&apos;
        ///- not be generic nor be defined on a generic class
        ///- take a single parameter of type &apos;TestContext&apos;
        ///- return type should be &apos;void&apos;, &apos;Task&apos; or &apos;ValueTask&apos;
        ///- not be &apos;async void&apos;
        ///- not be a special method (finalizer, operator...)..
        /// </summary>
        internal static string AssemblyInitializeShouldBeValidDescription {
            get {
                return ResourceManager.GetString("AssemblyInitializeShouldBeValidDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AssemblyInitialize method &apos;{0}&apos; signature is invalid.
        /// </summary>
        internal static string AssemblyInitializeShouldBeValidMessageFormat {
            get {
                return ResourceManager.GetString("AssemblyInitializeShouldBeValidMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AssemblyInitialize methods should have valid layout.
        /// </summary>
        internal static string AssemblyInitializeShouldBeValidTitle {
            get {
                return ResourceManager.GetString("AssemblyInitializeShouldBeValidTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer adding an additional assertion that checks for null.
        /// </summary>
        internal static string AssertionArgsShouldAvoidConditionalAccessMessageFormat {
            get {
                return ResourceManager.GetString("AssertionArgsShouldAvoidConditionalAccessMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid conditional access in assertions.
        /// </summary>
        internal static string AssertionArgsShouldAvoidConditionalAccessTitle {
            get {
                return ResourceManager.GetString("AssertionArgsShouldAvoidConditionalAccessTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Assert.AreEqual&apos;, &apos;Assert.AreNotEqual&apos;, &apos;Assert.AreSame&apos; and &apos;Assert.AreNotSame&apos; expects the expected value to be passed first and the actual value to be passed as second argument..
        /// </summary>
        internal static string AssertionArgsShouldBePassedInCorrectOrderDescription {
            get {
                return ResourceManager.GetString("AssertionArgsShouldBePassedInCorrectOrderDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assertion arguments should be passed in the correct order. &apos;actual&apos; and &apos;expected&apos;/&apos;notExpected&apos; arguments have been swapped..
        /// </summary>
        internal static string AssertionArgsShouldBePassedInCorrectOrderMessageFormat {
            get {
                return ResourceManager.GetString("AssertionArgsShouldBePassedInCorrectOrderMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assertion arguments should be passed in the correct order.
        /// </summary>
        internal static string AssertionArgsShouldBePassedInCorrectOrderTitle {
            get {
                return ResourceManager.GetString("AssertionArgsShouldBePassedInCorrectOrderTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer &apos;Assert.ThrowsException&apos; or &apos;Assert.ThrowsExceptionAsync&apos; over &apos;[ExpectedException]&apos; as it ensures that only the expected call throws the expected exception. The assert APIs also provide more flexibility and allow you to assert extra properties of the exeption..
        /// </summary>
        internal static string AvoidExpectedExceptionAttributeDescription {
            get {
                return ResourceManager.GetString("AvoidExpectedExceptionAttributeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer &apos;Assert.ThrowsException/ThrowsExceptionAsync&apos; over &apos;[ExpectedException]&apos;.
        /// </summary>
        internal static string AvoidExpectedExceptionAttributeMessageFormat {
            get {
                return ResourceManager.GetString("AvoidExpectedExceptionAttributeMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid &apos;[ExpectedException]&apos;.
        /// </summary>
        internal static string AvoidExpectedExceptionAttributeTitle {
            get {
                return ResourceManager.GetString("AvoidExpectedExceptionAttributeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods marked with [ClassCleanup] should follow the following layout to be valid:
        ///- be &apos;public&apos; 
        ///- not be &apos;static&apos;
        ///- not be generic nor defined on a generic class
        ///- not take any parameter
        ///- return type should be &apos;void&apos;, &apos;Task&apos; or &apos;ValueTask&apos;
        ///- not be &apos;async void&apos;
        ///- not be a special method (finalizer, operator...)..
        /// </summary>
        internal static string ClassCleanupShouldBeValidDescription {
            get {
                return ResourceManager.GetString("ClassCleanupShouldBeValidDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClassCleanup method &apos;{0}&apos; signature is invalid.
        /// </summary>
        internal static string ClassCleanupShouldBeValidMessageFormat {
            get {
                return ResourceManager.GetString("ClassCleanupShouldBeValidMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClassCleanup methods should have valid layout.
        /// </summary>
        internal static string ClassCleanupShouldBeValidTitle {
            get {
                return ResourceManager.GetString("ClassCleanupShouldBeValidTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods marked with [ClassInitialize] should follow the following layout to be valid:
        ///- be &apos;public&apos; 
        ///- be &apos;static&apos;
        ///- not be generic nor be defined on a generic class
        ///- take a single parameter of type &apos;TestContext&apos;
        ///- return type should be &apos;void&apos;, &apos;Task&apos; or &apos;ValueTask&apos;
        ///- not be &apos;async void&apos;
        ///- not be a special method (finalizer, operator...)..
        /// </summary>
        internal static string ClassInitializeShouldBeValidDescription {
            get {
                return ResourceManager.GetString("ClassInitializeShouldBeValidDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClassInitialize method &apos;{0}&apos; signature is invalid.
        /// </summary>
        internal static string ClassInitializeShouldBeValidMessageFormat {
            get {
                return ResourceManager.GetString("ClassInitializeShouldBeValidMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClassInitialize methods should have valid layout.
        /// </summary>
        internal static string ClassInitializeShouldBeValidTitle {
            get {
                return ResourceManager.GetString("ClassInitializeShouldBeValidTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataRow entry should have the following layout to be valid:
        ///- should only be set on a test method;
        ///- argument count should match method argument count;
        ///- argument type should match method argument type..
        /// </summary>
        internal static string DataRowShouldBeValidDescription {
            get {
                return ResourceManager.GetString("DataRowShouldBeValidDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataRow argument count should match method parameter count (constructor arguments: {0}, method parameters: {1}).
        /// </summary>
        internal static string DataRowShouldBeValidMessageFormat_ArgumentCountMismatch {
            get {
                return ResourceManager.GetString("DataRowShouldBeValidMessageFormat_ArgumentCountMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataRow argument type should match method parameter type. Mismatches occur at indices: {0}.
        /// </summary>
        internal static string DataRowShouldBeValidMessageFormat_ArgumentTypeMismatch {
            get {
                return ResourceManager.GetString("DataRowShouldBeValidMessageFormat_ArgumentTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataRow should only be set on a test method.
        /// </summary>
        internal static string DataRowShouldBeValidMessageFormat_OnTestMethod {
            get {
                return ResourceManager.GetString("DataRowShouldBeValidMessageFormat_OnTestMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataRow should be valid.
        /// </summary>
        internal static string DataRowShouldBeValidTitle {
            get {
                return ResourceManager.GetString("DataRowShouldBeValidTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not negate boolean assertions, instead use the opposite assertion.
        /// </summary>
        internal static string DoNotNegateBooleanAssertionMessageFormat {
            get {
                return ResourceManager.GetString("DoNotNegateBooleanAssertionMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not negate boolean assertions.
        /// </summary>
        internal static string DoNotNegateBooleanAssertionTitle {
            get {
                return ResourceManager.GetString("DoNotNegateBooleanAssertionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not store TestContext in a static member.
        /// </summary>
        internal static string DoNotStoreStaticTestContextAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("DoNotStoreStaticTestContextAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not store TestContext in a static member.
        /// </summary>
        internal static string DoNotStoreStaticTestContextAnalyzerTitle {
            get {
                return ResourceManager.GetString("DoNotStoreStaticTestContextAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Assert.Fail&apos; instead of an always-failing &apos;Assert.{0}&apos; assert.
        /// </summary>
        internal static string PreferAssertFailOverAlwaysFalseConditionsMessageFormat {
            get {
                return ResourceManager.GetString("PreferAssertFailOverAlwaysFalseConditionsMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Assert.Fail&apos; instead of an always-failing assert.
        /// </summary>
        internal static string PreferAssertFailOverAlwaysFalseConditionsTitle {
            get {
                return ResourceManager.GetString("PreferAssertFailOverAlwaysFalseConditionsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer constructors over TestInitialize methods.
        /// </summary>
        internal static string PreferConstructorOverTestInitializeMessageFormat {
            get {
                return ResourceManager.GetString("PreferConstructorOverTestInitializeMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer constructors over TestInitialize methods.
        /// </summary>
        internal static string PreferConstructorOverTestInitializeTitle {
            get {
                return ResourceManager.GetString("PreferConstructorOverTestInitializeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer &apos;Dispose&apos; over TestCleanup methods.
        /// </summary>
        internal static string PreferDisposeOverTestCleanupMessageFormat {
            get {
                return ResourceManager.GetString("PreferDisposeOverTestCleanupMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer &apos;Dispose&apos; over TestCleanup methods.
        /// </summary>
        internal static string PreferDisposeOverTestCleanupTitle {
            get {
                return ResourceManager.GetString("PreferDisposeOverTestCleanupTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer TestCleanup over &apos;Dispose&apos; methods.
        /// </summary>
        internal static string PreferTestCleanupOverDisposeMessageFormat {
            get {
                return ResourceManager.GetString("PreferTestCleanupOverDisposeMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer TestCleanup over &apos;Dispose&apos; methods.
        /// </summary>
        internal static string PreferTestCleanupOverDisposeTitle {
            get {
                return ResourceManager.GetString("PreferTestCleanupOverDisposeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer TestInitialize methods over constructors.
        /// </summary>
        internal static string PreferTestInitializeOverConstructorMessageFormat {
            get {
                return ResourceManager.GetString("PreferTestInitializeOverConstructorMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer TestInitialize methods over constructors.
        /// </summary>
        internal static string PreferTestInitializeOverConstructorTitle {
            get {
                return ResourceManager.GetString("PreferTestInitializeOverConstructorTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public methods should be test methods (marked with `[TestMethod]`)..
        /// </summary>
        internal static string PublicMethodShouldBeTestMethodAnalyzerDescription {
            get {
                return ResourceManager.GetString("PublicMethodShouldBeTestMethodAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public method &apos;{0}&apos; should be a test method.
        /// </summary>
        internal static string PublicMethodShouldBeTestMethodAnalyzerFormat {
            get {
                return ResourceManager.GetString("PublicMethodShouldBeTestMethodAnalyzerFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public methods should be test methods.
        /// </summary>
        internal static string PublicMethodShouldBeTestMethodAnalyzerTitle {
            get {
                return ResourceManager.GetString("PublicMethodShouldBeTestMethodAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It&apos;s considered a good practice to have only test classes marked public in a test project..
        /// </summary>
        internal static string PublicTypeShouldBeTestClassDescription {
            get {
                return ResourceManager.GetString("PublicTypeShouldBeTestClassDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public type &apos;{0}&apos; should be marked with &apos;[TestClass]&apos; or changed to &apos;internal&apos;.
        /// </summary>
        internal static string PublicTypeShouldBeTestClassMessageFormat {
            get {
                return ResourceManager.GetString("PublicTypeShouldBeTestClassMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public types should be test classes.
        /// </summary>
        internal static string PublicTypeShouldBeTestClassTitle {
            get {
                return ResourceManager.GetString("PublicTypeShouldBeTestClassTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test classes, classes marked with the &apos;[TestClass]&apos; attribute, should respect the following layout to be considered valid by MSTest:
        ///- it should be &apos;public&apos; (or &apos;internal&apos; if &apos;[assembly: DiscoverInternals]&apos; attribute is set)
        ///- it should not be &apos;static&apos; (except if it contains only &apos;AssemblyInitialize&apos; and/or &apos;AssemblyCleanup&apos; methods)
        ///- it should not be generic..
        /// </summary>
        internal static string TestClassShouldBeValidDescription {
            get {
                return ResourceManager.GetString("TestClassShouldBeValidDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test class &apos;{0}&apos; should not be &apos;static&apos;.
        /// </summary>
        internal static string TestClassShouldBeValidMessageFormat_NotStatic {
            get {
                return ResourceManager.GetString("TestClassShouldBeValidMessageFormat_NotStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test class &apos;{0}&apos; should be &apos;public&apos;.
        /// </summary>
        internal static string TestClassShouldBeValidMessageFormat_Public {
            get {
                return ResourceManager.GetString("TestClassShouldBeValidMessageFormat_Public", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test class &apos;{0}&apos; should be &apos;public&apos; or &apos;internal&apos;.
        /// </summary>
        internal static string TestClassShouldBeValidMessageFormat_PublicOrInternal {
            get {
                return ResourceManager.GetString("TestClassShouldBeValidMessageFormat_PublicOrInternal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test classes should have valid layout.
        /// </summary>
        internal static string TestClassShouldBeValidTitle {
            get {
                return ResourceManager.GetString("TestClassShouldBeValidTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test class should have at least one test method or be &apos;static&apos; with method(s) marked by &apos;[AssemblyInitialization]&apos; and/or &apos;[AssemblyCleanup]&apos;..
        /// </summary>
        internal static string TestClassShouldHaveTestMethodDescription {
            get {
                return ResourceManager.GetString("TestClassShouldHaveTestMethodDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test class &apos;{0}&apos; should have at least one test method or be &apos;static&apos; with method(s) marked by &apos;[AssemblyInitialization]&apos; and/or &apos;[AssemblyCleanup]&apos;.
        /// </summary>
        internal static string TestClassShouldHaveTestMethodMessageFormat {
            get {
                return ResourceManager.GetString("TestClassShouldHaveTestMethodMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test class should have test method.
        /// </summary>
        internal static string TestClassShouldHaveTestMethodTitle {
            get {
                return ResourceManager.GetString("TestClassShouldHaveTestMethodTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods marked with [TestCleanup] should follow the following layout to be valid:
        ///- be &apos;public&apos; 
        ///- not be &apos;static&apos;
        ///- not be generic or be defined on a generic class
        ///- not be &apos;abstract&apos;
        ///- not take any parameter
        ///- return type should be &apos;void&apos;, &apos;Task&apos; or &apos;ValueTask&apos;
        ///- not be &apos;async void&apos;
        ///- not be a special method (finalizer, operator...)..
        /// </summary>
        internal static string TestCleanupShouldBeValidDescription {
            get {
                return ResourceManager.GetString("TestCleanupShouldBeValidDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TestCleanup method &apos;{0}&apos; signature is invalid.
        /// </summary>
        internal static string TestCleanupShouldBeValidMessageFormat {
            get {
                return ResourceManager.GetString("TestCleanupShouldBeValidMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TestCleanup method should have valid layout.
        /// </summary>
        internal static string TestCleanupShouldBeValidTitle {
            get {
                return ResourceManager.GetString("TestCleanupShouldBeValidTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TestContext property should follow the following layout to be valid:
        ///- it should be a property
        ///- it should be &apos;public&apos; (or &apos;internal&apos; if &apos;[assembly: DiscoverInternals]&apos; attribute is set)
        ///- it should not be &apos;static&apos;
        ///- it should not be readonly..
        /// </summary>
        internal static string TestContextShouldBeValidDescription {
            get {
                return ResourceManager.GetString("TestContextShouldBeValidDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;TestContext&apos; should be a property and not a field.
        /// </summary>
        internal static string TestContextShouldBeValidMessageFormat_NotField {
            get {
                return ResourceManager.GetString("TestContextShouldBeValidMessageFormat_NotField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;TestContext&apos; should be settable.
        /// </summary>
        internal static string TestContextShouldBeValidMessageFormat_NotReadonly {
            get {
                return ResourceManager.GetString("TestContextShouldBeValidMessageFormat_NotReadonly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;TestContext&apos; should not be &apos;static&apos;.
        /// </summary>
        internal static string TestContextShouldBeValidMessageFormat_NotStatic {
            get {
                return ResourceManager.GetString("TestContextShouldBeValidMessageFormat_NotStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;TestContext&apos; should be &apos;public&apos;.
        /// </summary>
        internal static string TestContextShouldBeValidMessageFormat_Public {
            get {
                return ResourceManager.GetString("TestContextShouldBeValidMessageFormat_Public", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;TestContext&apos; should be &apos;public&apos; or &apos;internal&apos;.
        /// </summary>
        internal static string TestContextShouldBeValidMessageFormat_PublicOrInternal {
            get {
                return ResourceManager.GetString("TestContextShouldBeValidMessageFormat_PublicOrInternal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test context property should have valid layout.
        /// </summary>
        internal static string TestContextShouldBeValidTitle {
            get {
                return ResourceManager.GetString("TestContextShouldBeValidTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods marked with [TestInitialize] should follow the following layout to be valid:
        ///- be &apos;public&apos; 
        ///- not be &apos;static&apos;
        ///- not be generic nor defined on a generic class
        ///- not be &apos;abstract&apos;
        ///- not take any parameter
        ///- return type should be &apos;void&apos;, &apos;Task&apos; or &apos;ValueTask&apos;
        ///- not be &apos;async void&apos;
        ///- not be a special method (finalizer, operator...)..
        /// </summary>
        internal static string TestInitializeShouldBeValidDescription {
            get {
                return ResourceManager.GetString("TestInitializeShouldBeValidDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TestInitialize method &apos;{0}&apos; signature is invalid.
        /// </summary>
        internal static string TestInitializeShouldBeValidMessageFormat {
            get {
                return ResourceManager.GetString("TestInitializeShouldBeValidMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TestInitialize method should have valid layout.
        /// </summary>
        internal static string TestInitializeShouldBeValidTitle {
            get {
                return ResourceManager.GetString("TestInitializeShouldBeValidTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods, methods marked with the &apos;[TestMethod]&apos; attribute, should respect the following layout to be considered valid by MSTest:
        ///- it should be &apos;public&apos; (or &apos;internal&apos; if &apos;[assembly: DiscoverInternals]&apos; attribute is set)
        ///- it should not be &apos;static&apos;
        ///- it should not be generic
        ///- it should not be &apos;abstract&apos;
        ///- return type should be &apos;void&apos;, &apos;Task&apos; or &apos;ValueTask&apos;
        ///- it should not be &apos;async void&apos;
        ///- it should not be a special method (finalizer, operator...)..
        /// </summary>
        internal static string TestMethodShouldBeValidDescription {
            get {
                return ResourceManager.GetString("TestMethodShouldBeValidDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test method &apos;{0}&apos; should not be &apos;abstract&apos;.
        /// </summary>
        internal static string TestMethodShouldBeValidMessageFormat_NotAbstract {
            get {
                return ResourceManager.GetString("TestMethodShouldBeValidMessageFormat_NotAbstract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test method &apos;{0}&apos; should not be &apos;async void&apos;.
        /// </summary>
        internal static string TestMethodShouldBeValidMessageFormat_NotAsyncVoid {
            get {
                return ResourceManager.GetString("TestMethodShouldBeValidMessageFormat_NotAsyncVoid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test method &apos;{0}&apos; should not be generic.
        /// </summary>
        internal static string TestMethodShouldBeValidMessageFormat_NotGeneric {
            get {
                return ResourceManager.GetString("TestMethodShouldBeValidMessageFormat_NotGeneric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test method &apos;{0}&apos; should not be &apos;static&apos;.
        /// </summary>
        internal static string TestMethodShouldBeValidMessageFormat_NotStatic {
            get {
                return ResourceManager.GetString("TestMethodShouldBeValidMessageFormat_NotStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test method &apos;{0}&apos; should be an &apos;ordinary&apos; method.
        /// </summary>
        internal static string TestMethodShouldBeValidMessageFormat_Ordinary {
            get {
                return ResourceManager.GetString("TestMethodShouldBeValidMessageFormat_Ordinary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test method &apos;{0}&apos; should be &apos;public&apos;.
        /// </summary>
        internal static string TestMethodShouldBeValidMessageFormat_Public {
            get {
                return ResourceManager.GetString("TestMethodShouldBeValidMessageFormat_Public", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test method &apos;{0}&apos; should be &apos;public&apos; or &apos;internal&apos;.
        /// </summary>
        internal static string TestMethodShouldBeValidMessageFormat_PublicOrInternal {
            get {
                return ResourceManager.GetString("TestMethodShouldBeValidMessageFormat_PublicOrInternal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test method &apos;{0}&apos; should return &apos;void&apos;, &apos;Task&apos; or &apos;ValueTask&apos;.
        /// </summary>
        internal static string TestMethodShouldBeValidMessageFormat_ReturnType {
            get {
                return ResourceManager.GetString("TestMethodShouldBeValidMessageFormat_ReturnType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should have valid layout.
        /// </summary>
        internal static string TestMethodShouldBeValidTitle {
            get {
                return ResourceManager.GetString("TestMethodShouldBeValidTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should not be ignored (marked with &apos;[Ignore]&apos;)..
        /// </summary>
        internal static string TestMethodShouldNotBeIgnoredAnalyzerDescription {
            get {
                return ResourceManager.GetString("TestMethodShouldNotBeIgnoredAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test method &apos;{0}&apos; should not be ignored.
        /// </summary>
        internal static string TestMethodShouldNotBeIgnoredAnalyzerFormat {
            get {
                return ResourceManager.GetString("TestMethodShouldNotBeIgnoredAnalyzerFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test method should not be ignored.
        /// </summary>
        internal static string TestMethodShouldNotBeIgnoredAnalyzerTitle {
            get {
                return ResourceManager.GetString("TestMethodShouldNotBeIgnoredAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asynchronous test fixture methods do not require the &apos;Async&apos; suffix.
        /// </summary>
        internal static string UseAsyncSuffixTestFixtureMethodSuppressorJustification {
            get {
                return ResourceManager.GetString("UseAsyncSuffixTestFixtureMethodSuppressorJustification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asynchronous test methods do not require the &apos;Async&apos; suffix.
        /// </summary>
        internal static string UseAsyncSuffixTestMethodSuppressorJustification {
            get {
                return ResourceManager.GetString("UseAsyncSuffixTestMethodSuppressorJustification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [{0}] can only be set on methods marked with [TestMethod].
        /// </summary>
        internal static string UseAttributeOnTestMethodAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("UseAttributeOnTestMethodAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [{0}] can only be set on methods marked with [TestMethod].
        /// </summary>
        internal static string UseAttributeOnTestMethodAnalyzerTitle {
            get {
                return ResourceManager.GetString("UseAttributeOnTestMethodAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default, MSTest runs tests within the same assembly sequentially, which can lead to severe performance limitations. It is recommended to enable assembly attribute &apos;[Parallelize]&apos; to run tests in parallel, or if the assembly is known to not be parallelizable, to use explicitly the assembly level attribute &apos;[DoNotParallelize]&apos;..
        /// </summary>
        internal static string UseParallelizeAttributeAnalyzerDescription {
            get {
                return ResourceManager.GetString("UseParallelizeAttributeAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explicitly enable or disable tests parallelization.
        /// </summary>
        internal static string UseParallelizeAttributeAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("UseParallelizeAttributeAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explicitly enable or disable tests parallelization.
        /// </summary>
        internal static string UseParallelizeAttributeAnalyzerTitle {
            get {
                return ResourceManager.GetString("UseParallelizeAttributeAnalyzerTitle", resourceCulture);
            }
        }
    }
}
