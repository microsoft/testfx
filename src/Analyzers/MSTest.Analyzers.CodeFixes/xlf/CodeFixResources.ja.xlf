<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="ja" original="../CodeFixResources.resx">
    <body>
      <trans-unit id="AddCallerInfoParametersFix">
        <source>Add '[CallerFilePath]' and '[CallerLineNumber]' parameters</source>
        <target state="translated">'[CallerFilePath]' パラメーターと '[CallerLineNumber]' パラメーターを追加する</target>
        <note />
      </trans-unit>
      <trans-unit id="AddTestClassFix">
        <source>Add '[TestClass]'</source>
        <target state="translated">'[TestClass]' の追加</target>
        <note />
      </trans-unit>
      <trans-unit id="AddTestMethodAttributeFix">
        <source>Add '[TestMethod]'</source>
        <target state="translated">'[TestMethod]' の追加</target>
        <note />
      </trans-unit>
      <trans-unit id="AssertionArgsShouldAvoidConditionalAccessFix">
        <source>Move conditional access in assertion to separate 'Assert.IsNotNull' check</source>
        <target state="translated">アサーション内の条件付きアクセスを個別の 'Assert.IsNotNull' チェックに移動します</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidAssertAreSameWithValueTypesFix">
        <source>Use '{0}'</source>
        <target state="translated">'{0}' を使用する</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidOutParameterOnAssertIsInstanceOfTypeFix">
        <source>Use assignment instead of 'out' parameter</source>
        <target state="translated">'out' パラメーターの代わりに代入を使用する</target>
        <note />
      </trans-unit>
      <trans-unit id="ChangeMethodAccessibilityToPrivateFix">
        <source>Change method accessibility to 'private'</source>
        <target state="translated">メソッドのアクセシビリティを 'private' に変更する</target>
        <note />
      </trans-unit>
      <trans-unit id="ChangeStructToClassAndAddTestClassFix">
        <source>Change to 'class' and add '[TestClass]'</source>
        <target state="translated">'class' に変更し、'[TestClass]' を追加します</target>
        <note />
      </trans-unit>
      <trans-unit id="FixAssertionArgsOrder">
        <source>Fix actual/expected arguments order</source>
        <target state="translated">実際の引数と予想される引数の順序を修正する</target>
        <note />
      </trans-unit>
      <trans-unit id="FixSignatureCodeFix">
        <source>Fix signature</source>
        <target state="translated">署名の修正</target>
        <note />
      </trans-unit>
      <trans-unit id="PassCancellationTokenFix">
        <source>Pass 'TestContext.CancellationToken' argument to method call</source>
        <target state="translated">'TestContext.CancellationToken' 引数をメソッド呼び出しに渡す</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveClassCleanupBehaviorArgumentFix">
        <source>Remove 'ClassCleanupBehavior' argument</source>
        <target state="translated">'ClassCleanupBehavior' 引数を削除する</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveDynamicDataSourceTypeFix">
        <source>Remove 'DynamicDataSourceType' parameter to use default 'AutoDetect'</source>
        <target state="translated">'DynamicDataSourceType' パラメーターを削除して、既定の 'AutoDetect' を使用します</target>
        <note />
      </trans-unit>
      <trans-unit id="ReplaceDataTestMethodWithTestMethodTitle">
        <source>Replace 'DataTestMethod' with 'TestMethod'</source>
        <target state="translated">'DataTestMethod' を 'TestMethod' に置き換えます</target>
        <note />
      </trans-unit>
      <trans-unit id="ReplaceWithConstructorFix">
        <source>Replace TestInitialize method with constructor</source>
        <target state="translated">TestInitialize メソッドをコンストラクターに置き換える</target>
        <note />
      </trans-unit>
      <trans-unit id="ReplaceWithDisposeFix">
        <source>Replace TestCleanup with Dispose method</source>
        <target state="translated">TestCleanup を Dispose メソッドに置換する</target>
        <note />
      </trans-unit>
      <trans-unit id="ReplaceWithFailAssertionFix">
        <source>Replace the assertion with 'Assert.Fail()'</source>
        <target state="translated">アサーションを 'Assert.Fail()' に置き換えます</target>
        <note />
      </trans-unit>
      <trans-unit id="ReplaceWithTestCleanuFix">
        <source>Replace 'Dispose' with a TestCleanup method</source>
        <target state="translated">'Dispose' を TestCleanup メソッドに置き換える</target>
        <note />
      </trans-unit>
      <trans-unit id="ReplaceWithTestInitializeFix">
        <source>Replace constructor with TestInitialize method</source>
        <target state="translated">コンストラクターを TestInitialize メソッドに置き換える</target>
        <note />
      </trans-unit>
      <trans-unit id="StringAssertToAssertTitle">
        <source>Use 'Assert.{0}' instead of 'StringAssert'</source>
        <target state="translated">'StringAssert' の代わりに 'Assert.{0}' を使用</target>
        <note />
      </trans-unit>
      <trans-unit id="TestClassShouldBeValidFix">
        <source>Fix test class signature</source>
        <target state="translated">テスト クラスのシグネチャの修正</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextShouldBeValidFix">
        <source>Fix test context</source>
        <target state="translated">テスト コンテキストの修正</target>
        <note />
      </trans-unit>
      <trans-unit id="TestMethodShouldBeValidFix">
        <source>Fix test method signature</source>
        <target state="translated">テスト メソッドのシグネチャを修正する</target>
        <note />
      </trans-unit>
      <trans-unit id="TransformExecuteToExecuteAsyncFix">
        <source>Transform 'Execute' override to 'ExecuteAsync'</source>
        <target state="translated">'Execute' オーバーライドを 'ExecuteAsync' に変換する</target>
        <note />
      </trans-unit>
      <trans-unit id="UseAttributeOnTestMethodFix">
        <source>Add '[TestMethod]'</source>
        <target state="translated">'[TestMethod]' の追加</target>
        <note />
      </trans-unit>
      <trans-unit id="UseContainsKeyInsteadOfContainsFix">
        <source>Use 'ContainsKey' instead of 'Contains'</source>
        <target state="translated">'Contains' の代わりに 'ContainsKey' を使用する</target>
        <note />
      </trans-unit>
      <trans-unit id="UseCancellationTokenPropertyFix">
        <source>Use 'TestContext.CancellationToken' instead</source>
        <target state="translated">代わりに 'TestContext.CancellationToken' を使用する</target>
        <note />
      </trans-unit>
      <trans-unit id="UseCooperativeCancellationForTimeoutFix">
        <source>Use 'CooperativeCancellation = true'</source>
        <target state="translated">'CooperativeCancellation = true' を使用する</target>
        <note />
      </trans-unit>
      <trans-unit id="UseDisplayNamePropertyInsteadOfStringArgumentFix">
        <source>Use 'DisplayName' property instead of string argument</source>
        <target state="translated">文字列引数の代わりに 'DisplayName' プロパティを使用する</target>
        <note />
      </trans-unit>
      <trans-unit id="UseProperAssertMethodsFix">
        <source>Use '{0}'</source>
        <target state="translated">'{0}' を使用します</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveParallelizeAttributeFix">
        <source>Remove '[Parallelize]' attribute</source>
        <target state="new">Remove '[Parallelize]' attribute</target>
        <note>{Locked="[Parallelize]"}</note>
      </trans-unit>
      <trans-unit id="RemoveDoNotParallelizeAttributeFix">
        <source>Remove '[DoNotParallelize]' attribute</source>
        <target state="new">Remove '[DoNotParallelize]' attribute</target>
        <note>{Locked="[DoNotParallelize]"}</note>
      </trans-unit>
    </body>
  </file>
</xliff>