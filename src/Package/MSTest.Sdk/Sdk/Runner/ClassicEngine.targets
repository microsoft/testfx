<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(MSBuildThisFileDirectory)Common.targets"/>

  <PropertyGroup>
    <EnableMSTestRunner>true</EnableMSTestRunner>
  </PropertyGroup>

  <!-- Extensions -->
  <PropertyGroup>
    <!-- Hot Reload -->
    <EnableMicrosoftTestingExtensionsHotReload Condition=" '$(EnableMicrosoftTestingExtensionsHotReload)' != 'false' and '$(TestingExtensionsProfile)' == 'AllMicrosoft' " >true</EnableMicrosoftTestingExtensionsHotReload>
    <MicrosoftTestingExtensionsHotReloadVersion Condition=" '$(MicrosoftTestingExtensionsHotReloadVersion)' == '' " >$(MicrosoftTestingEntrepriseExtensionsVersion)</MicrosoftTestingExtensionsHotReloadVersion>

    <!-- Retry -->
    <EnableMicrosoftTestingExtensionsRetry Condition=" '$(EnableMicrosoftTestingExtensionsRetry)' != 'false' and '$(TestingExtensionsProfile)' == 'AllMicrosoft' " >true</EnableMicrosoftTestingExtensionsRetry>
    <MicrosoftTestingExtensionsRetryVersion Condition=" '$(MicrosoftTestingExtensionsRetryVersion)' == '' " >$(MicrosoftTestingEntrepriseExtensionsVersion)</MicrosoftTestingExtensionsRetryVersion>

    <!-- Crash dump -->
    <EnableMicrosoftTestingExtensionsCrashDump Condition=" '$(EnableMicrosoftTestingExtensionsCrashDump)' != 'false' and '$(TestingExtensionsProfile)' == 'AllMicrosoft' " >true</EnableMicrosoftTestingExtensionsCrashDump>
    <MicrosoftTestingExtensionsCrashDumpVersion Condition=" '$(MicrosoftTestingExtensionsCrashDumpVersion)' == '' " >$(MicrosoftTestingExtensionsCommonVersion)</MicrosoftTestingExtensionsCrashDumpVersion>

    <!-- Hang dump -->
    <EnableMicrosoftTestingExtensionsHangDump Condition=" '$(EnableMicrosoftTestingExtensionsHangDump)' != 'false' and '$(TestingExtensionsProfile)' == 'AllMicrosoft' " >true</EnableMicrosoftTestingExtensionsHangDump>
    <MicrosoftTestingExtensionsHangDumpVersion Condition=" '$(MicrosoftTestingExtensionsHangDumpVersion)' == '' " >$(MicrosoftTestingExtensionsCommonVersion)</MicrosoftTestingExtensionsHangDumpVersion>
  </PropertyGroup>

  <!-- Core -->
  <ItemGroup>
    <PackageReference Include="MSTest.TestFramework" Sdk="MSTest"
                      Version="$(MSTestVersion)" VersionOverride="$(MSTestVersion)" />
    <PackageReference Include="MSTest.Analyzers" Sdk="MSTest"
                      Version="$(MSTestVersion)" VersionOverride="$(MSTestVersion)"
                      Condition=" '$(EnableMSTestAnalyzers)' != 'false' " />
  </ItemGroup>

  <!-- Core (for test applications - not for test libraries) -->
  <ItemGroup Condition=" '$(IsTestApplication)' == 'true' ">
    <PackageReference Include="Microsoft.NET.Test.Sdk" Sdk="MSTest"
                      Version="$(MicrosoftNETTestSdkVersion)" VersionOverride="$(MicrosoftNETTestSdkVersion)" />
    <!--
      Most of the times this dependency is not required but we leave the opportunity to align the version of the platform being used.
      At the moment this is mainly used for our acceptance tests because the locally/CI built version ends with -dev or -ci which is
      considered by NuGet resolver as older than any -preview version. Using this property we can ensure the local version is being
      selected.
      -->
    <PackageReference Include="Microsoft.Testing.Platform" Sdk="MSTest"
                      Version="$(MicrosoftTestingPlatformVersion)" VersionOverride="$(MicrosoftTestingPlatformVersion)"
                      Condition=" '$(EnableMicrosoftTestingPlatform)' == 'true' " />
    <PackageReference Include="MSTest.TestAdapter" Sdk="MSTest"
                      Version="$(MSTestVersion)" VersionOverride="$(MSTestVersion)" />
  </ItemGroup>

  <!-- Extensions (for test applications - not for test libraries) -->
  <ItemGroup Condition=" '$(IsTestApplication)' == 'true' ">
    <PackageReference Include="Microsoft.Testing.Extensions.TrxReport" Sdk="MSTest"
                      Version="$(MicrosoftTestingExtensionsTrxReportVersion)" VersionOverride="$(MicrosoftTestingExtensionsTrxReportVersion)"
                      Condition=" '$(EnableMicrosoftTestingExtensionsTrxReport)' == 'true' " />
    <PackageReference Include="Microsoft.Testing.Extensions.CrashDump" Sdk="MSTest"
                      Version="$(MicrosoftTestingExtensionsCrashDumpVersion)" VersionOverride="$(MicrosoftTestingExtensionsCrashDumpVersion)"
                      Condition=" '$(EnableMicrosoftTestingExtensionsCrashDump)' == 'true' " />
    <PackageReference Include="Microsoft.Testing.Extensions.HangDump" Sdk="MSTest"
                      Version="$(MicrosoftTestingExtensionsHangDumpVersion)" VersionOverride="$(MicrosoftTestingExtensionsHangDumpVersion)"
                      Condition=" '$(EnableMicrosoftTestingExtensionsHangDump)' == 'true' " />
    <PackageReference Include="Microsoft.Testing.Extensions.CodeCoverage" Sdk="MSTest"
                      Version="$(MicrosoftTestingExtensionsCodeCoverageVersion)" VersionOverride="$(MicrosoftTestingExtensionsCodeCoverageVersion)"
                      Condition=" '$(EnableMicrosoftTestingExtensionsCodeCoverage)' == 'true' " />
    <PackageReference Include="Microsoft.Testing.Extensions.HotReload" Sdk="MSTest"
                      Version="$(MicrosoftTestingExtensionsHotReloadVersion)" VersionOverride="$(MicrosoftTestingExtensionsHotReloadVersion)"
                      Condition=" '$(EnableMicrosoftTestingExtensionsHotReload)' == 'true' " />
    <PackageReference Include="Microsoft.Testing.Extensions.Retry" Sdk="MSTest"
                      Version="$(MicrosoftTestingExtensionsRetryVersion)" VersionOverride="$(MicrosoftTestingExtensionsRetryVersion)"
                      Condition=" '$(EnableMicrosoftTestingExtensionsRetry)' == 'true' " />
  </ItemGroup>

  <Import Project="$(MSBuildThisFileDirectory)../Features/Aspire.targets" Condition=" '$(EnableAspireTesting)' == 'true' " />
  <Import Project="$(MSBuildThisFileDirectory)../Features/Playwright.targets" Condition=" '$(EnablePlaywright)' == 'true' " />

</Project>
