<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">

  <!-- Setup the task folder -->
  <PropertyGroup>
    <!-- Constants -->
    <MicrosoftTestingPlatformMSBuildTaskFolder Condition=" $(MicrosoftTestingPlatformMSBuildTaskFolder) == '' ">$(MSBuildThisFileDirectory)..\_MSBuildTasks\netstandard2.0\</MicrosoftTestingPlatformMSBuildTaskFolder>
  </PropertyGroup>


  <!--
    Configuration file generation
    ===========================

    The configuration file is generated by the GenerateTestingPlatformConfigurationFile target.
    We copy the file called testconfig.json from the project directory to the output directory.
    The file is copied only if it does not exist in the output directory or if it has changed.
    The file is copied to the output directory before the CopyFilesToOutputDirectory target is executed.
  -->

  <!-- Import task -->
  <UsingTask TaskName="Microsoft.Testing.Platform.MSBuild.ConfigurationFileTask"
         AssemblyFile="$(MicrosoftTestingPlatformMSBuildTaskFolder)Microsoft.Testing.Platform.MSBuild.dll"/>

  <PropertyGroup>
    <_TestingPlatformConfigurationFileSourceFileName>testconfig.json</_TestingPlatformConfigurationFileSourceFileName>
    <_TestingPlatformConfigurationFileSourcePath>$([System.IO.Path]::Combine($(MSBuildProjectDirectory),$(_TestingPlatformConfigurationFileSourceFileName)))</_TestingPlatformConfigurationFileSourcePath>
    <_TestingPlatformConfigurationFileName>$(AssemblyName).testconfig.json</_TestingPlatformConfigurationFileName>
    <_TestingPlatformConfigurationFile>$([System.IO.Path]::Combine($(MSBuildProjectDirectory),$(OutputPath),$(_TestingPlatformConfigurationFileName)))</_TestingPlatformConfigurationFile>
  </PropertyGroup>

  <Target Name="_CalculateGenerateTestingPlatformConfigurationFile">
    <PropertyGroup>
      <!-- We add this to a target to allow setting IsTestingPlatformApplication as late as possible -->
      <!-- For example, MSTest.TestAdapter.targets is imported *after* Microsoft.Testing.Platform.MSBuild.targets -->
      <!-- We want to allow MSTest.TestAdapter.targets to set IsTestingPlatformApplication to false if EnableMSTestRunner is not set to true. -->
      <GenerateTestingPlatformConfigurationFile Condition=" '$(GenerateTestingPlatformConfigurationFile)' == '' " >$(IsTestingPlatformApplication)</GenerateTestingPlatformConfigurationFile>
    </PropertyGroup>
  </Target>

  <Target Name="GenerateTestingPlatformConfigurationFile" BeforeTargets="CopyFilesToOutputDirectory"
          DependsOnTargets="_CalculateGenerateTestingPlatformConfigurationFile;_GenerateTestingPlatformConfigurationFileCore" />

  <Target Name="_GenerateTestingPlatformConfigurationFileCore"
          Inputs="$(_TestingPlatformConfigurationFileSourcePath)"
          Outputs="$(_TestingPlatformConfigurationFile)"
          Condition=" '$(GenerateTestingPlatformConfigurationFile)' == 'true' And Exists('$(_TestingPlatformConfigurationFileSourcePath)') " >
    <ConfigurationFileTask
      MSBuildProjectDirectory="$(MSBuildProjectDirectory)"
      AssemblyName="$(AssemblyName)"
      OutputPath="$(OutputPath)"
      TestingPlatformConfigurationFileSource="$(_TestingPlatformConfigurationFileSourcePath)" >
      <Output TaskParameter="FinalTestingPlatformConfigurationFile" ItemName="TestingPlatformConfigurationFile" />
    </ConfigurationFileTask>
    <ItemGroup>
      <FileWrites Include="$(_TestingPlatformConfigurationFile)" />
    </ItemGroup>
    <ItemGroup>
      <ResolvedFileToPublish Include="$(_TestingPlatformConfigurationFile)" >
        <RelativePath>$(_TestingPlatformConfigurationFileName)</RelativePath>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>


  <!--
    Inject application entry point a.k.a. Program.* file
    ===========================
  -->

  <!-- Import task -->
  <UsingTask TaskName="Microsoft.Testing.Platform.MSBuild.TestingPlatformEntryPointTask"
         AssemblyFile="$(MicrosoftTestingPlatformMSBuildTaskFolder)Microsoft.Testing.Platform.MSBuild.dll"/>

  <Target Name="_CalculateGenerateTestingPlatformEntryPoint">
    <PropertyGroup>
      <!-- We add this to a target to allow setting IsTestingPlatformApplication as late as possible -->
      <!-- For example, MSTest.TestAdapter.targets is imported *after* Microsoft.Testing.Platform.MSBuild.targets -->
      <!-- We want to allow MSTest.TestAdapter.targets to set IsTestingPlatformApplication to false if EnableMSTestRunner is not set to true. -->
      <GenerateTestingPlatformEntryPoint Condition=" '$(GenerateTestingPlatformEntryPoint)' == '' " >$(IsTestingPlatformApplication)</GenerateTestingPlatformEntryPoint>
    </PropertyGroup>
  </Target>

  <Target Name="_GenerateTestingPlatformEntryPointFileInputCache" DependsOnTargets="_CalculateGenerateTestingPlatformEntryPoint">
    <PropertyGroup>
      <!-- Cache file to check -->
      <_GenerateTestingPlatformEntryPointInputsCachFilePath>$(IntermediateOutputPath)$(MSBuildProjectName).gentestingplatformentrypointinputcache.cache</_GenerateTestingPlatformEntryPointInputsCachFilePath>
      <_GenerateTestingPlatformEntryPointInputsCachFilePath>$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), $(_GenerateTestingPlatformEntryPointInputsCachFilePath)))</_GenerateTestingPlatformEntryPointInputsCachFilePath>
    </PropertyGroup>
    <ItemGroup>
      <!-- Items to hash-->
      <_GenerateTestingPlatformEntryPointInputsCacheToHash Include="@(TestingPlatformBuilderHook)"/>
      <_GenerateTestingPlatformEntryPointInputsCacheToHash Include="$(RootNamespace)"/>
      <_GenerateTestingPlatformEntryPointInputsCacheToHash Include="$(GenerateTestingPlatformEntryPoint)" />

      <!-- Export the items name for the _GenerateTestingPlatformInjectEntryPoint task-->
      <GenerateTestingPlatformEntryPointInputsCacheFilePath Include="$(_GenerateTestingPlatformEntryPointInputsCachFilePath)" />
    </ItemGroup>
    <!-- Hash the extensions information -->
    <Hash ItemsToHash="@(_GenerateTestingPlatformEntryPointInputsCacheToHash)">
      <Output TaskParameter="HashResult" PropertyName="_GenerateTestingPlatformEntryPointInputsCache" />
    </Hash>
    <!-- Write the hash value to the cache file -->
    <WriteLinesToFile Lines="$(_GenerateTestingPlatformEntryPointInputsCache)"
                  File="$(_GenerateTestingPlatformEntryPointInputsCachFilePath)"
                  Overwrite="true"
                  WriteOnlyWhenDifferent="true" />
    <ItemGroup>
      <FileWrites Include="$(_GenerateTestingPlatformEntryPointInputsCachFilePath)" />
    </ItemGroup>
  </Target>

  <!-- Generate the entry point source using the user extensions informations -->
  <PropertyGroup>
    <_TestingPlatformEntryPointSourceName>TestPlatformEntryPoint$(DefaultLanguageSourceExtension)</_TestingPlatformEntryPointSourceName>
    <_TestingPlatformEntryPointSourcePath>$([System.IO.Path]::Combine($(IntermediateOutputPath),$(_TestingPlatformEntryPointSourceName)))</_TestingPlatformEntryPointSourcePath>
    <_TestingPlatformEntryPointSourcePath>$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), $(_TestingPlatformEntryPointSourcePath)))</_TestingPlatformEntryPointSourcePath>
  </PropertyGroup>
  <Target Name="_GenerateTestingPlatformEntryPoint"
          Inputs="@(GenerateTestingPlatformEntryPointInputsCacheFilePath)" Outputs="$(_TestingPlatformEntryPointSourcePath)"
          Condition=" '$(GenerateTestingPlatformEntryPoint)' == 'true' " >
    <TestingPlatformEntryPointTask TestingPlatformEntryPointSourcePath="$(_TestingPlatformEntryPointSourcePath)"
                                   RootNamespace="$(RootNamespace)"
                                   Language="$(Language)" >
      <Output TaskParameter="TestingPlatformEntryPointGeneratedFilePath" PropertyName ="TestingPlatformEntryPointGeneratedFilePath" />
    </TestingPlatformEntryPointTask>
    <ItemGroup>
      <FileWrites Include="$(_TestingPlatformEntryPointSourcePath)" />
    </ItemGroup>
  </Target>

  <Target Name="_IncludeGenerateTestingPlatformEntryPointIntoCompilation" BeforeTargets="BeforeCompile;XamlPreCompile"
          DependsOnTargets="_CalculateGenerateTestingPlatformEntryPoint;_GenerateTestingPlatformEntryPointFileInputCache;_GenerateTestingPlatformEntryPoint">

    <ItemGroup Condition=" '$(GenerateTestingPlatformEntryPoint)' == 'true' ">
      <!-- Order of files matter in F#. Make sure to include the entry-point last. -->
      <!-- See https://github.com/dotnet/fsharp/blob/27db996c58a511386ad754e34f4b57877aa1d99e/src/FSharp.Build/Microsoft.FSharp.Targets#L258-L277 -->
      <!-- IMPORTANT: We use CompileAfter and not CompileLast as CompileLast is quite recent: https://github.com/dotnet/fsharp/pull/17103 -->
      <!-- Note that we only add the entry point in CompileAfter. The self-registered extensions is still in Compile -->
      <!-- If the user enables only self-registered extensions generation and decides to write their own entry point, they should add
           their entry point file to CompileAfter as well -->
      <Compile Include="$(_TestingPlatformEntryPointSourcePath)" Condition=" '$(Language)' != 'F#' " />
      <CompileAfter Include="$(_TestingPlatformEntryPointSourcePath)" Condition=" '$(Language)' == 'F#' " />

      <!-- We need to report to the FileWrites here because is possible that we skip _GenerateTestingPlatformInjectEntryPoint and we want to correctly handle the "dotnet clean" target -->
      <FileWrites Include="$(_TestingPlatformEntryPointSourcePath)" />
    </ItemGroup>
  </Target>

  <!--
    Inject SelfRegisteredExtensions
    ===========================

    Expected extensions items shape

  <ItemGroup>
    <TestingPlatformBuilderHook Include="8E680F4D-E423-415A-9566-855439363BC0" >
      <DisplayName>MyBuilderHook</DisplayName>
      <TypeFullName>Contoso.BuilderHook</TypeFullName>
    </TestingPlatformBuilderHook>
  </ItemGroup>
  -->

  <!-- Import task -->
  <UsingTask TaskName="Microsoft.Testing.Platform.MSBuild.TestingPlatformSelfRegisteredExtensions"
         AssemblyFile="$(MicrosoftTestingPlatformMSBuildTaskFolder)Microsoft.Testing.Platform.MSBuild.dll"/>

  <Target Name="_CalculateGenerateSelfRegisteredExtensions">
    <PropertyGroup>
      <!-- We add this to a target to allow setting IsTestingPlatformApplication as late as possible -->
      <!-- For example, MSTest.TestAdapter.targets is imported *after* Microsoft.Testing.Platform.MSBuild.targets -->
      <!-- We want to allow MSTest.TestAdapter.targets to set IsTestingPlatformApplication to false if EnableMSTestRunner is not set to true. -->
      <GenerateSelfRegisteredExtensions Condition=" '$(GenerateSelfRegisteredExtensions)' == '' " >$(IsTestingPlatformApplication)</GenerateSelfRegisteredExtensions>
    </PropertyGroup>
  </Target>

  <Target Name="_GenerateSelfRegisteredExtensionsFileInputCache" DependsOnTargets="_CalculateGenerateSelfRegisteredExtensions">
    <PropertyGroup>
      <!-- Cache file to check -->
      <_GenerateSelfRegisteredExtensionsInputsCachFilePath>$(IntermediateOutputPath)$(MSBuildProjectName).genautoregisteredextensionsinputcache.cache</_GenerateSelfRegisteredExtensionsInputsCachFilePath>
      <_GenerateSelfRegisteredExtensionsInputsCachFilePath>$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), $(_GenerateSelfRegisteredExtensionsInputsCachFilePath)))</_GenerateSelfRegisteredExtensionsInputsCachFilePath>
    </PropertyGroup>
    <ItemGroup>
      <!-- Items to hash-->
      <_GenerateSelfRegisteredExtensionsInputsCacheToHash Include="@(TestingPlatformBuilderHook)"/>
      <_GenerateSelfRegisteredExtensionsInputsCacheToHash Include="$(RootNamespace)"/>
      <_GenerateSelfRegisteredExtensionsInputsCacheToHash Include="$(GenerateSelfRegisteredExtensions)"/>

      <!-- Export the items name for the _GenerateSelfRegisteredExtensions task-->
      <GenerateSelfRegisteredExtensionsInputsCacheFilePath Include="$(_GenerateSelfRegisteredExtensionsInputsCachFilePath)" />
    </ItemGroup>
    <!-- Hash the extensions information -->
    <Hash ItemsToHash="@(_GenerateSelfRegisteredExtensionsInputsCacheToHash)">
      <Output TaskParameter="HashResult" PropertyName="_GenerateSelfRegisteredExtensionsInputsCache" />
    </Hash>
    <!-- Write the hash value to the cache file -->
    <WriteLinesToFile Lines="$(_GenerateSelfRegisteredExtensionsInputsCache)"
                  File="$(_GenerateSelfRegisteredExtensionsInputsCachFilePath)"
                  Overwrite="true"
                  WriteOnlyWhenDifferent="true" />
    <ItemGroup>
      <FileWrites Include="$(_GenerateSelfRegisteredExtensionsInputsCachFilePath)" />
    </ItemGroup>
  </Target>

  <!-- Generate the extensions source file using the user extensions informations -->
  <PropertyGroup>
    <_SelfRegisteredExtensionsSourceName>SelfRegisteredExtensions$(DefaultLanguageSourceExtension)</_SelfRegisteredExtensionsSourceName>
    <_SelfRegisteredExtensionsSourcePath>$([System.IO.Path]::Combine($(IntermediateOutputPath),$(_SelfRegisteredExtensionsSourceName)))</_SelfRegisteredExtensionsSourcePath>
    <_SelfRegisteredExtensionsSourcePath>$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), $(_SelfRegisteredExtensionsSourcePath)))</_SelfRegisteredExtensionsSourcePath>
  </PropertyGroup>
  <Target Name="_GenerateSelfRegisteredExtensions"
          Inputs="@(GenerateSelfRegisteredExtensionsInputsCacheFilePath)" Outputs="$(_SelfRegisteredExtensionsSourcePath)"
          Condition=" '$(GenerateSelfRegisteredExtensions)' == 'true' " >
    <TestingPlatformSelfRegisteredExtensions SelfRegisteredExtensionsSourcePath="$(_SelfRegisteredExtensionsSourcePath)"
                                             SelfRegisteredExtensionsBuilderHook="@(TestingPlatformBuilderHook)"
                                             RootNamespace="$(RootNamespace)"
                                             Language="$(Language)" >
      <Output TaskParameter="SelfRegisteredExtensionsGeneratedFilePath" PropertyName ="SelfRegisteredExtensionsGeneratedFilePath" />
    </TestingPlatformSelfRegisteredExtensions>
    <ItemGroup>
      <FileWrites Include="$(_SelfRegisteredExtensionsSourcePath)" />
    </ItemGroup>
  </Target>

  <!-- We always include the entry point also if the task _GenerateSelfRegisteredExtensions is skipped for caching reason -->
  <!-- !!! DO NOT CHANGE THE NAME OF THIS TARGET IS USED BY ADAPTERS https://github.com/microsoft/testfx/issues/3478#issuecomment-2313889212 !!! -->
  <Target Name="_IncludeGenerateAutoRegisteredExtensionsIntoCompilation" BeforeTargets="BeforeCompile;XamlPreCompile"
          DependsOnTargets="_CalculateGenerateSelfRegisteredExtensions;_GenerateSelfRegisteredExtensionsFileInputCache;_GenerateSelfRegisteredExtensions">

    <ItemGroup Condition=" '$(GenerateSelfRegisteredExtensions)' == 'true' ">
      <Compile Include="$(_SelfRegisteredExtensionsSourcePath)" />

      <!-- We need to report to the FileWrites here because is possible that we skip _GenerateSelfRegisteredExtensions and we want to correctly handle the "dotnet clean" target -->
      <FileWrites Include="$(_SelfRegisteredExtensionsSourcePath)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <!-- Disable custom -t:Test target -->
    <TestingPlatformDisableCustomTestTarget Condition=" '$(TestingPlatformDisableCustomTestTarget)' == '' ">false</TestingPlatformDisableCustomTestTarget>
    <!-- Support dotnet test -->
    <TestingPlatformDotnetTestSupport Condition=" '$(TestingPlatformDotnetTestSupport)' == '' ">false</TestingPlatformDotnetTestSupport>
    <!--
        Verify if the <UseMSBuildTestInfrastructure> is available
        https://github.com/dotnet/msbuild/blob/main/src/Tasks/Microsoft.Common.CurrentVersion.targets#L6807
        https://github.com/dotnet/msbuild/blob/main/src/Tasks/Microsoft.Common.Test.targets
    -->
    <_MSBuildTestInfrastructureAvailable Condition="Exists('$(MSBuildExtensionsPath)\Microsoft.Common.Test.targets')" >true</_MSBuildTestInfrastructureAvailable>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)Microsoft.Testing.Platform.MSBuild.DotnetTestSupport.targets" Condition="'$(TestingPlatformDotnetTestSupport)' == 'true'" />

  <Target Name="_SetTestingPlatformDefaultsForContainerBuild" BeforeTargets="ComputeContainerConfig"
    Condition="'$(IsPublishable)' == 'true' AND '$(EnableSdkContainerSupport)' == 'true' AND !$(RuntimeIdentifier.StartsWith('win'))">
    <!--
    When PublishContainer target is used to create a docker image for the test project, it will try to write /app/TestResults folder
    which is a non-writable folder. The environment variable below (notice double underscore) is used to override option defaults, and is picked up
    EnvironmentVariablesConfigurationProvider.

    ComputeContainerConfig is target that PublishContainer depends on to figure out the configuration for the container.
    -->
    <ItemGroup>
      <ContainerEnvironmentVariable Include="platformOptions__resultDirectory" Value="/tmp/TestResults"></ContainerEnvironmentVariable>
    </ItemGroup>
  </Target>
</Project>
