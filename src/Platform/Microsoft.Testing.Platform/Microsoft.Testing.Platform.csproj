<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>$(MicrosoftTestingTargetFrameworks);netstandard2.0</TargetFrameworks>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <ItemGroup>
    <AssemblyMetadata Include="Microsoft.Testing.Platform.Application.BuildTimeUTC" Value="$([System.DateTime]::UtcNow.ToString('yyyy/MM/dd'))" />
  </ItemGroup>

  <!-- NuGet properties -->
  <PropertyGroup>
    <PackageDescription>
      <![CDATA[Microsoft Testing is a set of platform, framework and protocol intended to make it possible to run any test on any target or device.

This package provides the core platform and the .NET implementation of the protocol.]]>
    </PackageDescription>
  </PropertyGroup>

  <!-- Exclude .NET Json api not available in netstandard2.0 -->
  <ItemGroup Condition="$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) != '.NETCoreApp'">
    <Compile Remove="Configurations/JsonConfigurationFileParser.cs" />
    <Compile Remove="ServerMode/JsonRpc/Json/Json.cs" />
    <Compile Remove="ServerMode/JsonRpc/Json/JsonCollectionDeserializer.cs" />
    <Compile Remove="ServerMode/JsonRpc/Json/JsonDeserializer.cs" />
    <Compile Remove="ServerMode/JsonRpc/Json/JsonElementDeserializer.cs" />
    <Compile Remove="ServerMode/JsonRpc/Json/JsonExtensions.cs" />
    <Compile Remove="ServerMode/JsonRpc/Json/JsonObjectSerializer.cs" />
    <Compile Remove="ServerMode/JsonRpc/Json/JsonObjectSerializer1.cs" />
    <Compile Remove="ServerMode/JsonRpc/Json/JsonPropertyBagDeserializer.cs" />
    <Compile Remove="ServerMode/JsonRpc/Json/JsonSerializer.cs" />
    <Compile Remove="ServerMode/JsonRpc/Json/JsonValueSerializer.cs" />
    <Compile Remove="ServerMode/JsonRpc/Json/JsonValueSerializer1.cs" />
  </ItemGroup>
  <!-- end netstandard2.0 polyfill -->

  <ItemGroup>
    <InternalsVisibleTo Include="DynamicProxyGenAssembly2" Key="$(MoqPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.AzureDevOpsReport" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.CrashDump" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.Experimental" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.HangDump" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.HotReload" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.MSBuild" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.Retry" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.Telemetry" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.TrxReport" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.TrxReport.Abstractions" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.UnitTests" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.VSTestBridge" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.VSTestBridge.TestAdapter" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.VSTestBridge.UnitTests" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Platform.Acceptance.IntegrationTests" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Platform.MSBuild" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Platform.UnitTests" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.TestInfrastructure" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="MSTest.Acceptance.IntegrationTests" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="MSTest.Engine" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="MSTest.Engine.UnitTests" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="TestFramework.ForTestingMSTest" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="MSTest.IntegrationTests" Key="$(VsPublicKey)" />
  </ItemGroup>

  <ItemGroup>
    <AdditionalFiles Include="BannedSymbols.txt" />
    <!-- Framework specific API -->
    <AdditionalFiles Include="PublicAPI/netstandard2.0/PublicAPI.Shipped.txt" Condition=" '$(TargetFramework)' == 'netstandard2.0' " />
    <AdditionalFiles Include="PublicAPI/netstandard2.0/PublicAPI.Unshipped.txt" Condition=" '$(TargetFramework)' == 'netstandard2.0' " />
    <AdditionalFiles Include="PublicAPI/net/PublicAPI.Shipped.txt" Condition=" '$(TargetFramework)' != 'netstandard2.0' " />
    <AdditionalFiles Include="PublicAPI/net/PublicAPI.Unshipped.txt" Condition=" '$(TargetFramework)' != 'netstandard2.0' " />
    <!-- API that is common to all frameworks that we build for. -->
    <AdditionalFiles Include="PublicAPI/PublicAPI.Shipped.txt" />
    <AdditionalFiles Include="PublicAPI/PublicAPI.Unshipped.txt" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Resources\PlatformResources.resx" GenerateSource="true" />
  </ItemGroup>

  <ItemGroup>
    <!-- NOTE: SDK already adds Linux, macOS, and Windows. -->
    <!-- See https://github.com/dotnet/sdk/blob/cb459ebc2d9374b2bc5ce944cc633a6e79ed8275/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.SupportedPlatforms.props -->
    <SupportedPlatform Include="android" />
    <SupportedPlatform Include="ios" />
    <SupportedPlatform Include="browser" />
    <SupportedPlatform Include="tvos" />
    <SupportedPlatform Include="wasi" />
  </ItemGroup>

  <!-- Version templating -->
  <ItemGroup>
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Templating" Version="$(MicrosoftDotNetBuildTasksTemplatingPackageVersion)" AllowExplicitReference="true" PrivateAssets="All" IsImplicitlyDefined="true" />
    <PackageReference Include="Polyfill" PrivateAssets="all" />
  </ItemGroup>
  <Target Name="GeneratePlatformVersionSourceFile" AfterTargets="PrepareForBuild">
    <PropertyGroup>
      <_TemplateProperties>Version=$(Version)</_TemplateProperties>
    </PropertyGroup>
    <ItemGroup>
      <_TemplateCsproj Include="$(MSBuildProjectDirectory)/PlatformVersion.cs.template" Destination="$(IntermediateOutputPath)/PlatformVersion.cs" />
    </ItemGroup>
    <GenerateFileFromTemplate TemplateFile="%(_TemplateCsproj.Identity)" OutputPath="%(_TemplateCsproj.Destination)" Properties="$(_TemplateProperties)">
      <Output TaskParameter="ResolvedOutputPath" ItemName="FileWrites" />
    </GenerateFileFromTemplate>

    <ItemGroup>
      <Compile Include="$(IntermediateOutputPath)/PlatformVersion.cs" />
    </ItemGroup>
  </Target>

  <!-- NuGet package layout -->
  <!-- NuGet folders https://learn.microsoft.com/nuget/create-packages/creating-a-package#from-a-convention-based-working-directory -->
  <ItemGroup>
    <Content Include="buildMultiTargeting/**">
      <Pack>true</Pack>
      <PackagePath>buildMultiTargeting</PackagePath>
    </Content>
    <TfmSpecificPackageFile Include="buildTransitive/**">
      <PackagePath>buildTransitive/$(TargetFramework)</PackagePath>
    </TfmSpecificPackageFile>
    <TfmSpecificPackageFile Include="build/**">
      <PackagePath>build/$(TargetFramework)</PackagePath>
    </TfmSpecificPackageFile>
  </ItemGroup>

</Project>
