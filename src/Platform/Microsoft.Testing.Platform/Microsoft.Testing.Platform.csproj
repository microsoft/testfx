<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>$(MicrosoftTestingTargetFrameworks);netstandard2.0</TargetFrameworks>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <IsPackable>true</IsPackable>
    <IsShippingPackage Condition=" '$(DoNotShipTestingPlatformPackage)' == 'true' ">false</IsShippingPackage>
    <SuppressLicenseValidation>true</SuppressLicenseValidation>
  </PropertyGroup>

  <!-- Insert the PlatformVersion.cs -->
  <PropertyGroup>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="**/*.cs" Exclude="**/*.user; **/*.*proj; **/*.sln; **/*.vssscc" />
  </ItemGroup>
  <Target Name="InsertPlatformVersion" BeforeTargets="PrepareForBuild" >
    <ItemGroup>
      <Compile Include="$(Compile);$(IntermediateOutputPath)/PlatformVersion.cs" />
    </ItemGroup>
  </Target>

  <ItemGroup>
    <AssemblyMetadata Include="Microsoft.Testing.Platform.Application.BuildTimeUTC" Value="$([System.DateTime]::UtcNow.ToString('yyyy/MM/dd'))" />
  </ItemGroup>

  <!-- NuGet properties -->
  <PropertyGroup>
    <PackageDescription>
      <![CDATA[Microsoft Testing is a set of platform, framework and protocol intended to make it possible to run any test on any target or device.

This package provides the core platform and the .NET implementation of the protocol.]]>
    </PackageDescription>
  </PropertyGroup>

  <!-- Exclude .NET Json api not available in netstandard2.0 -->
  <ItemGroup Condition="$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) != '.NETCoreApp'">
    <Compile Remove="Configurations/JsonConfigurationFileParser.cs" />
    <Compile Remove="ServerMode/Json/Json.cs" />
    <Compile Remove="ServerMode/Json/JsonCollectionDeserializer.cs" />
    <Compile Remove="ServerMode/Json/JsonDeserializer.cs" />
    <Compile Remove="ServerMode/Json/JsonElementDeserializer.cs" />
    <Compile Remove="ServerMode/Json/JsonExtensions.cs" />
    <Compile Remove="ServerMode/Json/JsonObjectSerializer.cs" />
    <Compile Remove="ServerMode/Json/JsonObjectSerializer1.cs" />
    <Compile Remove="ServerMode/Json/JsonPropertyBagDeserializer.cs" />
    <Compile Remove="ServerMode/Json/JsonSerializer.cs" />
    <Compile Remove="ServerMode/Json/JsonValueSerializer.cs" />
    <Compile Remove="ServerMode/Json/JsonValueSerializer1.cs" />
  </ItemGroup>
  <!-- end netstandard2.0 polyfill -->

  <ItemGroup>
    <InternalsVisibleTo Include="DynamicProxyGenAssembly2" Key="$(MoqPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.CrashDump" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.Experimental" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.HangDump" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.HotReload" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.Retry" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.Telemetry" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.TrxReport" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.VSTestBridge" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.VSTestBridge.TestAdapter" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Internal.Framework" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Internal.Framework.UnitTests" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="MSTest.Engine" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="MSTest.Engine.UnitTests" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Platform.Acceptance.IntegrationTests" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="MSTest.Acceptance.IntegrationTests" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.UnitTests" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Extensions.VSTestBridge.UnitTests" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Platform.MSBuild" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.Platform.UnitTests" Key="$(VsPublicKey)" />
    <InternalsVisibleTo Include="Microsoft.Testing.TestInfrastructure" Key="$(VsPublicKey)" />
  </ItemGroup>

  <ItemGroup>
    <AdditionalFiles Include="BannedSymbols.txt" />
    <!-- Framework specific API -->
    <AdditionalFiles Include="PublicAPI/netstandard2.0/PublicAPI.Shipped.txt" Condition=" '$(TargetFramework)' == 'netstandard2.0' " />
    <AdditionalFiles Include="PublicAPI/netstandard2.0/PublicAPI.Unshipped.txt" Condition=" '$(TargetFramework)' == 'netstandard2.0' " />
    <AdditionalFiles Include="PublicAPI/net/PublicAPI.Shipped.txt" Condition=" '$(TargetFramework)' != 'netstandard2.0' " />
    <AdditionalFiles Include="PublicAPI/net/PublicAPI.Unshipped.txt" Condition=" '$(TargetFramework)' != 'netstandard2.0' " />
    <!-- API that is common to all frameworks that we build for. -->
    <AdditionalFiles Include="PublicAPI/PublicAPI.Shipped.txt" />
    <AdditionalFiles Include="PublicAPI/PublicAPI.Unshipped.txt" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Resources\PlatformResources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>PlatformResources.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Resources\PlatformResources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>PlatformResources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

  <!-- Version templating -->
  <ItemGroup>
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Templating" Version="$(MicrosoftDotNetBuildTasksTemplatingPackageVersion)" AllowExplicitReference="true" PrivateAssets="All" IsImplicitlyDefined="true" />
  </ItemGroup>
  <Target Name="GeneratePlatformVersionSourceFile" AfterTargets="PrepareForBuild" >
    <PropertyGroup>
      <_TemplateProperties>Version=$(Version)</_TemplateProperties>
    </PropertyGroup>
    <ItemGroup>
      <_TemplateCsproj Include="$(MSBuildProjectDirectory)/PlatformVersion.cs.template" Destination="$(IntermediateOutputPath)/PlatformVersion.cs" />
    </ItemGroup>
    <GenerateFileFromTemplate TemplateFile="%(_TemplateCsproj.Identity)" OutputPath="%(_TemplateCsproj.Destination)" Properties="$(_TemplateProperties)">
      <Output TaskParameter="ResolvedOutputPath" ItemName="FileWrites" />
    </GenerateFileFromTemplate>
  </Target>

  <!-- NuGet package layout -->
  <!-- NuGet folders https://learn.microsoft.com/nuget/create-packages/creating-a-package#from-a-convention-based-working-directory -->
  <ItemGroup>
    <Content Include="buildMultiTargeting/**">
      <Pack>true</Pack>
      <PackagePath>buildMultiTargeting</PackagePath>
    </Content>
    <TfmSpecificPackageFile Include="buildTransitive/**">
      <PackagePath>buildTransitive/$(TargetFramework)</PackagePath>
    </TfmSpecificPackageFile>
    <TfmSpecificPackageFile Include="build/**">
      <PackagePath>build/$(TargetFramework)</PackagePath>
    </TfmSpecificPackageFile>
  </ItemGroup>

  <Target Name="MoveNuGetPackage" AfterTargets="Pack" Condition=" '$(DoNotShipTestingPlatformPackage)' == 'true' ">
    <ItemGroup>
      <MicrosoftTestingPlatformNuGetPackage Include="$(ArtifactsNonShippingPackagesDir)Microsoft.Testing.Platform.*.nupkg" />
    </ItemGroup>

    <Move SourceFiles="@(MicrosoftTestingPlatformNuGetPackage)" DestinationFiles="$(ArtifactsTmpDir)/packages/%(Filename)%(Extension)" />
  </Target>

</Project>
