<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotCreateTestExecutionFilterErrorMessage" xml:space="preserve">
    <value>Failed to create a test execution filter</value>
  </data>
  <data name="CompositeServiceFactoryInstanceAlreadyRegistered" xml:space="preserve">
    <value>The same instance of 'CompositeExtensonFactory' is already registered</value>
  </data>
  <data name="ConfigurationManagerCannotFindDefaultJsonConfigurationErrorMessage" xml:space="preserve">
    <value>Could not find the default json configuration</value>
  </data>
  <data name="ConsoleTestExecutionFilterFactoryDescription" xml:space="preserve">
    <value>Creates the right test execution filter for console mode</value>
  </data>
  <data name="ConsoleTestExecutionFilterFactoryDisplayName" xml:space="preserve">
    <value>Console test execution filter factory</value>
  </data>
  <data name="ExtensionDoesNotImplementGivenInterfaceErrorMessage" xml:space="preserve">
    <value>Extension of type '{0}' is not implementing the required '{1}' interface</value>
  </data>
  <data name="ExtensionWithSameUidAlreadyRegisteredErrorMessage" xml:space="preserve">
    <value>Another extension with same the same UID '{0}' has already been registered. Registered extension is of type '{1}'</value>
  </data>
  <data name="JsonConfigurationFileParserDuplicateKeyErrorMessage" xml:space="preserve">
    <value>A duplicate key '{0}' was found</value>
  </data>
  <data name="JsonConfigurationFileParserTopLevelElementIsNotAnObjectErrorMessage" xml:space="preserve">
    <value>Top-level JSON element must be an object. Instead, '{0}' was found</value>
  </data>
  <data name="JsonConfigurationFileParserUnsupportedTokenErrorMessage" xml:space="preserve">
    <value>Unsupported JSON token '{0}' was found</value>
  </data>
  <data name="ServerTestExecutionFilterFactoryDescription" xml:space="preserve">
    <value>Creates the right test execution filter for server mode</value>
  </data>
  <data name="ServerTestExecutionFilterFactoryDisplayName" xml:space="preserve">
    <value>Server test execution filter factory</value>
  </data>
  <data name="ServiceProviderCannotFindServiceErrorMessage" xml:space="preserve">
    <value>Cannot find service of type '{0}'</value>
  </data>
  <data name="ServiceProviderServiceAlreadyRegistered" xml:space="preserve">
    <value>Instance of type '{0}' is already registered</value>
  </data>
  <data name="ServiceProviderShouldNotRegisterTestFramework" xml:space="preserve">
    <value>Instances of type 'ITestFramework' should not be registered through the service provider but through 'ITestApplicationBuilder.RegisterTestFramework'</value>
  </data>
  <data name="TestAdapterInvokerFactoryAlreadySetErrorMessage" xml:space="preserve">
    <value>An 'ITestFrameworkInvoker' factory is already set</value>
  </data>
  <data name="TestApplicationBuilderApplicationAlreadyRegistered" xml:space="preserve">
    <value>The application has already been built</value>
  </data>
  <data name="TestApplicationBuilderFrameworkAdapterFactoryAlreadyRegisteredErrorMessage" xml:space="preserve">
    <value>The test framework adapter factory has already been registered</value>
  </data>
  <data name="TestApplicationBuilderTestFrameworkCapabilitiesAlreadyRegistered" xml:space="preserve">
    <value>The test framework capabilities factory has already been registered</value>
  </data>
  <data name="TestApplicationBuilderTestFrameworkNotRegistered" xml:space="preserve">
    <value>The test framework adapter has not been registered. Use 'ITestApplicationBuilder.RegisterTestFramework' to register it</value>
  </data>
  <data name="TestApplicationResultDescription" xml:space="preserve">
    <value>Determine the result of the test application execution</value>
  </data>
  <data name="TestApplicationResultDisplayName" xml:space="preserve">
    <value>Test application result</value>
  </data>
  <data name="TestApplicationVSTestModeTooManyBuilders" xml:space="preserve">
    <value>VSTest mode only supports a single TestApplicationBuilder per process</value>
  </data>
  <data name="TestHostAdapterInvokerFailedTestSessionErrorMessage" xml:space="preserve">
    <value>Test adapter test session failure</value>
  </data>
  <data name="TreeNodeFilterCannotContainSlashCharacterErrorMessage" xml:space="preserve">
    <value>A filter '{0}' should not contain a '/' character</value>
  </data>
  <data name="TreeNodeFilterEscapeCharacterShouldNotBeLastErrorMessage" xml:space="preserve">
    <value>An escape character should not terminate the filter string '{0}'</value>
  </data>
  <data name="TreeNodeFilterOnlyLastLevelCanContainMutiLevelWildcardErrorMessage" xml:space="preserve">
    <value>Only the final filter path can contain '**' wildcard</value>
  </data>
  <data name="TreeNodeFilterOperatorNotAllowedErrorMessage" xml:space="preserve">
    <value>Unexpected operator '&amp;' or '|' within filter expression '{0}'</value>
  </data>
  <data name="TreeNodeFilterPathShouldStartWithSlashErrorMessage" xml:space="preserve">
    <value>Invalid node path, expected root as first character '{0}'</value>
  </data>
  <data name="TreeNodeFilterUnbalancedFilterErrorMessage" xml:space="preserve">
    <value>Filter expression '{0}' contains an unbalanced number of '{1}' '{2}' operators</value>
    <comment>{1} and {2} are () or []</comment>
  </data>
  <data name="TreeNodeFilterUnexpectedSlashOperatorErrorMessage" xml:space="preserve">
    <value>Filter contains an unexpected '/' operator inside a parenthesized expression</value>
  </data>
  <data name="TEstExecutionFilterFactoryFactoryAlreadySetErrorMessage" xml:space="preserve">
    <value>An 'ITestExecutionFilterFactory' factory is already set</value>
  </data>
  <data name="CannotRemoveEnvironmentVariableAtThisStageErrorMessage" xml:space="preserve">
    <value>Cannot remove environment variables at this stage</value>
  </data>
  <data name="CannotRemoveEnvironmentVariableItIsLockedErrorMessage" xml:space="preserve">
    <value>Extension '{0}' tried to remove environment variable '{1}' but it was locked by extension '{2}'</value>
  </data>
  <data name="CannotSetEnvironmentVariableAtThisStageErrorMessage" xml:space="preserve">
    <value>Cannot set environment variables at this stage</value>
  </data>
  <data name="CannotSetEnvironmentVariableItIsLockedErrorMessage" xml:space="preserve">
    <value>Extension '{0}' tried to set environment variable '{1}' but it was locked by extension '{2}'</value>
  </data>
  <data name="ProcessHasNotYetExitedErrorMessage" xml:space="preserve">
    <value>Process should have exited before we can determine this value</value>
  </data>
  <data name="CannotStartProcessErrorMessage" xml:space="preserve">
    <value>Cannot start process '{0}'</value>
  </data>
  <data name="EnvironmentVariableProviderFailedWithError" xml:space="preserve">
    <value>Provider '{0}' (UID: {1}) failed with error: {2}</value>
  </data>
  <data name="GlobalValidationOfTestHostEnvironmentVariablesFailedErrorMessage" xml:space="preserve">
    <value>The following 'ITestHostEnvironmentVariableProvider' providers rejected the final environment variables setup:</value>
  </data>
  <data name="TestFrameworkProxyApiShouldNotBeCalled" xml:space="preserve">
    <value>Method '{0}' should not have been called on this proxy object</value>
  </data>
  <data name="TestProcessDidNotExitGracefullyErrorMessage" xml:space="preserve">
    <value>Test application process didn't exit gracefully, exit code is '{0}'</value>
  </data>
  <data name="CannotCreateUniqueLogFileErrorMessage" xml:space="preserve">
    <value>Failed to create a unique log file after 3 seconds. Lastly tried file name is '{0}'.</value>
  </data>
  <data name="FailedToWriteLogToChannelErrorMessage" xml:space="preserve">
    <value>Failed to write the log to the channel. Missed log content:
{0}</value>
  </data>
  <data name="ServerLogMessageDescription" xml:space="preserve">
    <value>This data represents a server log message</value>
  </data>
  <data name="ServerLogMessageDisplayName" xml:space="preserve">
    <value>Server log message</value>
  </data>
  <data name="TimeoutAcquiringSemaphoreErrorMessage" xml:space="preserve">
    <value>Failed to acquire semaphore before timeout of '{0}' seconds</value>
  </data>
  <data name="TimeoutFlushingLogsErrorMessage" xml:space="preserve">
    <value>Failed to flush logs before the timeout of '{0}' seconds</value>
  </data>
  <data name="UnexpectedExceptionInFileLoggerErrorMessage" xml:space="preserve">
    <value>An unexpected exception occured in 'FileLogger.WriteLogToFileAsync'.
{0}</value>
    <comment>{0} exception ToString</comment>
  </data>
  <data name="UnexpectedStateErrorMessage" xml:space="preserve">
    <value>Unexpected state in file '{0}' at line '{1}'</value>
  </data>
  <data name="UnreachableLocationErrorMessage" xml:space="preserve">
    <value>This program location is thought to be unreachable. File='{0}' Line={1}</value>
  </data>
  <data name="RetryFailedAfterTriesErrorMessage" xml:space="preserve">
    <value>Retry failed after {0} times</value>
  </data>
  <data name="CommandLineInvalidArgumentsForOption" xml:space="preserve">
    <value>Option '--{0}' has invalid arguments: {1}</value>
  </data>
  <data name="CommandLineInvalidConfiguration" xml:space="preserve">
    <value>Invalid configuration for provider '{0}' (UID: {1}). Error: {2}</value>
  </data>
  <data name="CommandLineOptionExpectsAtLeastArguments" xml:space="preserve">
    <value>Option '--{0}' from provider '{1}' (UID: {2}) expects at least {3} arguments</value>
  </data>
  <data name="CommandLineOptionExpectsAtMostArguments" xml:space="preserve">
    <value>Option '--{0}' from provider '{1}' (UID: {2}) expects at most {3} arguments</value>
  </data>
  <data name="CommandLineOptionExpectsNoArguments" xml:space="preserve">
    <value>Option '--{0}' from provider '{1}' (UID: {2}) expects no arguments</value>
  </data>
  <data name="CommandLineOptionIsUsingReservedPrefix" xml:space="preserve">
    <value>Option `--{0}` from provider '{1}' (UID: {2}) is using the reserved prefix '--internal'</value>
  </data>
  <data name="CommandLineUnknownOption" xml:space="preserve">
    <value>Unknown option '--{0}'</value>
  </data>
  <data name="InvalidCommandLineArguments" xml:space="preserve">
    <value>Invalid command line arguments:</value>
  </data>
  <data name="CommandLineInvalidArityErrorMessage" xml:space="preserve">
    <value>Invalid arity, maximum must be greater than minimum</value>
  </data>
  <data name="CommandLineInvalidOptionName" xml:space="preserve">
    <value>Invalid option name '{0}', it must contain only letter and '-' (e.g. my-option)</value>
  </data>
  <data name="CommandLineOptionIsDeclaredByMultipleProviders" xml:space="preserve">
    <value>Option '--{0}' is declared by multiple extensions: '{0}'</value>
  </data>
  <data name="CommandLineOptionIsDeclaredByMultipleProvidersWorkaround" xml:space="preserve">
    <value>You can fix the previous option clash by overriding the option name using the configuration file</value>
  </data>
  <data name="CommandLineOptionIsReserved" xml:space="preserve">
    <value>Option '--{0}' is reserved and cannot be used by providers: '{0}'</value>
  </data>
  <data name="CommandLineParserUnexpectedArgument" xml:space="preserve">
    <value>Unexpected argument {0}</value>
  </data>
  <data name="CommandLineParserUnexpectedNullArgument" xml:space="preserve">
    <value>Unexpected null argument at index {0}</value>
  </data>
  <data name="CommandLineParserUnexpectedSingleQuoteInArgument" xml:space="preserve">
    <value>Unexpected single quote in argument: {0}</value>
  </data>
  <data name="CommandLineParserUnexpectedSingleQuoteInArgumentForOption" xml:space="preserve">
    <value>Unexpected single quote in argument: {0} for option '--{1}'</value>
  </data>
  <data name="HelpApplicationUsage" xml:space="preserve">
    <value>Usage {0} [option providers] [extension option providers]</value>
  </data>
  <data name="HelpExecuteTestApplication" xml:space="preserve">
    <value>Execute a .NET Test Application.</value>
  </data>
  <data name="HelpExtensionOptions" xml:space="preserve">
    <value>Extension options:</value>
  </data>
  <data name="HelpNoExtensionRegistered" xml:space="preserve">
    <value>    No extension registered.</value>
  </data>
  <data name="HelpOptions" xml:space="preserve">
    <value>Options:</value>
  </data>
  <data name="HelpTestApplicationRunner" xml:space="preserve">
    <value>&lt;test application runner&gt;</value>
  </data>
  <data name="NotAvailable" xml:space="preserve">
    <value>Not available</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value>Not found</value>
  </data>
  <data name="PlatformCommandLineClientHostOptionDescription" xml:space="preserve">
    <value>Specify the hostname of the client.</value>
  </data>
  <data name="PlatformCommandLineClientPortOptionDescription" xml:space="preserve">
    <value>Specify the port of the client.</value>
  </data>
  <data name="PlatformCommandLineDiagnosticFileLoggerSynchronousWriteOptionDescription" xml:space="preserve">
    <value>Force the built-in file logger to write the log synchronously. Useful for scenario where you don't want to lose any log (i.e. in case of crash). Note that this is slowing down the test execution.</value>
  </data>
  <data name="PlatformCommandLineDiagnosticOptionDescription" xml:space="preserve">
    <value>Enable the diagnostic logging. The default log level is 'Trace'. The file will be written in the output directory with the name log_[MMddHHssfff].diag</value>
  </data>
  <data name="PlatformCommandLineDiagnosticOptionExpectsSingleArgumentErrorMessage" xml:space="preserve">
    <value>'--diagnostic-verbosity' expects a single level argument ('Trace', 'Debug', 'Information', 'Warning', 'Error', or 'Critical')</value>
  </data>
  <data name="PlatformCommandLineDiagnosticOptionIsMissing" xml:space="preserve">
    <value>'--{0}' requires '--diagnostic' to be provided</value>
  </data>
  <data name="PlatformCommandLineDiagnosticOutputDirectoryOptionDescription" xml:space="preserve">
    <value>Output directory of the diagnostic logging, if not specified the file will be generated inside the default 'TestResults' directory.</value>
  </data>
  <data name="PlatformCommandLineDiagnosticOutputFilePrefixOptionDescription" xml:space="preserve">
    <value>Prefix for the log file name that will replace '[log]_.'</value>
  </data>
  <data name="PlatformCommandLineDiagnosticVerbosityOptionDescription" xml:space="preserve">
    <value>Define the level of the verbosity for the --diagnostic. The available values are 'Trace', 'Debug', 'Information', 'Warning', 'Error', and 'Critical'</value>
  </data>
  <data name="PlatformCommandLineDiscoverTestsOptionDescription" xml:space="preserve">
    <value>List available tests.</value>
  </data>
  <data name="PlatformCommandLineHelpOptionDescription" xml:space="preserve">
    <value>Show the command line help.</value>
  </data>
  <data name="PlatformCommandLineInfoOptionDescription" xml:space="preserve">
    <value>Display .NET test application information.</value>
  </data>
  <data name="PlatformCommandLineMinimumExpectedTestsIncompatibleDiscoverTests" xml:space="preserve">
    <value>'--list-tests' and '--minimum-expected-tests' are incompatible options</value>
  </data>
  <data name="PlatformCommandLineMinimumExpectedTestsOptionSingleArgument" xml:space="preserve">
    <value>'--minimum-expected-tests' expects a single non-zero positive integer value (e.g. '--minimum-expected-tests 10')</value>
  </data>
  <data name="PlatformCommandLineNoBannerOptionDescription" xml:space="preserve">
    <value>Do not display the startup banner, the copyright message or the telemetry banner.</value>
  </data>
  <data name="PlatformCommandLinePortOptionDescription" xml:space="preserve">
    <value>Specify the port of the server.</value>
  </data>
  <data name="PlatformCommandLinePortOptionSingleArgument" xml:space="preserve">
    <value>'--{0}' expects a single valid port as argument</value>
  </data>
  <data name="PlatformCommandLineProviderDescription" xml:space="preserve">
    <value>Microsoft Testing Platform command line provider</value>
  </data>
  <data name="PlatformCommandLineProviderDisplayName" xml:space="preserve">
    <value>Platform command line provider</value>
  </data>
  <data name="PlatformCommandLineResultDirectoryOptionDescription" xml:space="preserve">
    <value>The directory where the test results are going to be placed. If the specified directory doesn't exist, it's created. The default is TestResults in the directory that contains the test application.</value>
  </data>
  <data name="PlatformCommandLineServerOptionDescription" xml:space="preserve">
    <value>Enable the server mode.</value>
  </data>
  <data name="PlatformCommandLineSkipBuildersNumberCheckOptionDescription" xml:space="preserve">
    <value>For testing purposes</value>
  </data>
  <data name="PlatformCommandLineTestHostControllerPIDOptionDescription" xml:space="preserve">
    <value>Eventual parent test host controller PID.</value>
  </data>
  <data name="PlatformCommandLineDotnetTestPipe" xml:space="preserve">
    <value>dotnet test pipe.</value>
  </data>
  <data name="PlatformCommandLineVSTestAdapterModeOptionDescription" xml:space="preserve">
    <value>Bridge to VSTest APIs</value>
  </data>
  <data name="TreeNodeFilterDescription" xml:space="preserve">
    <value>Use a tree filter to filter down the tests to execute</value>
  </data>
  <data name="ConnectingToClientHost" xml:space="preserve">
    <value>Connecting to client host '{0}' port '{1}'</value>
  </data>
  <data name="JsonRpcTcpServerDescription" xml:space="preserve">
    <value>JsonRpc server implementation based on the test platform protocol specification.</value>
  </data>
  <data name="JsonRpcTcpServerToSingleClientDescription" xml:space="preserve">
    <value>JsonRpc server to client handshake, implementation based on the test platform protocol specification.</value>
  </data>
  <data name="StartingServer" xml:space="preserve">
    <value>Starting server. Listening on port '{0}'</value>
  </data>
  <data name="UnknownCommunicationProtocolErrorMessage" xml:space="preserve">
    <value>The communication protocol '{0}' is not supported</value>
  </data>
  <data name="TelemetryNotice" xml:space="preserve">
    <value>Telemetry
---------
Microsoft Testing Platform collects usage data in order to help us improve your experience. The data is collected by Microsoft and are not shared with anyone.
You can opt-out of telemetry by setting the TESTINGPLATFORM_TELEMETRY_OPTOUT or DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.

Read more about Microsoft Testing Platform telemetry: https://aka.ms/testingplatform/telemetry</value>
  </data>
  <data name="TelemetryProviderAlreadySetErrorMessage" xml:space="preserve">
    <value>Telemetry provider is already set</value>
  </data>
  <data name="UnexpectedCallTelemetryIsDisabledErrorMessage" xml:space="preserve">
    <value>Unexpected telemetry call, the telemetry is disabled.</value>
  </data>
  <data name="CouldNotFindDirectoryErrorMessage" xml:space="preserve">
    <value>Could not find directory '{0}'</value>
  </data>
  <data name="InternalLoopAsyncDidNotExitSuccessfullyErrorMessage" xml:space="preserve">
    <value>Method '{0}' did not exit successfully</value>
  </data>
  <data name="NoSerializerRegisteredWithIdErrorMessage" xml:space="preserve">
    <value>No serializer registered with ID '{0}'</value>
  </data>
  <data name="NoSerializerRegisteredWithTypeErrorMessage" xml:space="preserve">
    <value>No serializer registered with type '{0}'</value>
  </data>
  <data name="UnexpectedExceptionDuringByteConversionErrorMessage" xml:space="preserve">
    <value>An unexpected exception occured during byte conversion</value>
  </data>
  <data name="PlatformCommandLineIgnoreExitCodeOptionDescription" xml:space="preserve">
    <value>Do not report non successful exit value for specific exit codes (e.g. '--ignore-exit-code 8;9' ignore exit code 8 and 9 and will return 0 in these case)</value>
  </data>
  <data name="PlatformCommandLineExitOnProcessExitOptionDescription" xml:space="preserve">
    <value>Exit the test process if dependent process exits. PID must be provided.</value>
  </data>
  <data name="PlatformCommandLineExitOnProcessExitSingleArgument" xml:space="preserve">
    <value>'--{0}' expects a single int PID argument</value>
  </data>
  <data name="PlatformCommandLineExitOnProcessExitInvalidDependentProcess" xml:space="preserve">
    <value>Invalid PID '{0}'
{1}</value>
  </data>
  <data name="Aborted" xml:space="preserve">
    <value>Aborted</value>
  </data>
  <data name="Actual" xml:space="preserve">
    <value>Actual</value>
  </data>
  <data name="CancelledLowercase" xml:space="preserve">
    <value>cancelled</value>
  </data>
  <data name="CancellingTestSession" xml:space="preserve">
    <value>Cancelling the test session...</value>
  </data>
  <data name="DiagnosticFileLevelWithAsyncFlush" xml:space="preserve">
    <value>Diagnostic file (level '{0}' with async flush): {1}"</value>
    <comment>0 level such as verbose, 
1 path to file</comment>
  </data>
  <data name="DiagnosticFileLevelWithFlush" xml:space="preserve">
    <value>Diagnostic file (level '{0}' with sync flush): {1}"</value>
    <comment>0 level such as verbose, 
1 path to file</comment>
  </data>
  <data name="Expected" xml:space="preserve">
    <value>Expected</value>
  </data>
  <data name="Failed" xml:space="preserve">
    <value>Failed</value>
  </data>
  <data name="FailedLowercase" xml:space="preserve">
    <value>failed</value>
  </data>
  <data name="ForTest" xml:space="preserve">
    <value>For test</value>
    <comment>is followed by test name</comment>
  </data>
  <data name="InProcessArtifactsProduced" xml:space="preserve">
    <value>In process file artifacts produced:</value>
  </data>
  <data name="MinimumExpectedTestsPolicyViolation" xml:space="preserve">
    <value>Minimum expected tests policy violation, tests ran {0}, minimum expected {1}</value>
    <comment>{0}, {1} number of tests</comment>
  </data>
  <data name="OutOfProcessArtifactsProduced" xml:space="preserve">
    <value>Out of process file artifacts produced:</value>
  </data>
  <data name="Passed" xml:space="preserve">
    <value>Passed</value>
  </data>
  <data name="PassedLowercase" xml:space="preserve">
    <value>passed</value>
  </data>
  <data name="Skipped" xml:space="preserve">
    <value>Skipped</value>
  </data>
  <data name="SkippedLowercase" xml:space="preserve">
    <value>skipped</value>
  </data>
  <data name="StackTrace" xml:space="preserve">
    <value>Stack Trace</value>
  </data>
  <data name="Total" xml:space="preserve">
    <value>Total</value>
  </data>
  <data name="ZeroTestsRan" xml:space="preserve">
    <value>Zero tests ran</value>
  </data>
</root>
