<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotCreateTestExecutionFilterErrorMessage" xml:space="preserve">
    <value>Failed to create a test execution filter</value>
  </data>
  <data name="CompositeServiceFactoryInstanceAlreadyRegistered" xml:space="preserve">
    <value>The same instance of 'CompositeExtensonFactory' is already registered</value>
  </data>
  <data name="ConfigurationManagerCannotFindDefaultJsonConfigurationErrorMessage" xml:space="preserve">
    <value>Could not find the default json configuration</value>
  </data>
  <data name="ConsoleTestExecutionFilterFactoryDescription" xml:space="preserve">
    <value>Creates the right test execution filter for console mode</value>
  </data>
  <data name="ConsoleTestExecutionFilterFactoryDisplayName" xml:space="preserve">
    <value>Console test execution filter factory</value>
  </data>
  <data name="ExtensionDoesNotImplementGivenInterfaceErrorMessage" xml:space="preserve">
    <value>Extension of type '{0}' is not implementing the required '{1}' interface</value>
  </data>
  <data name="ExtensionWithSameUidAlreadyRegisteredErrorMessage" xml:space="preserve">
    <value>Another extension with same the same UID '{0}' has already been registered. Registered extension is of type '{1}'</value>
  </data>
  <data name="JsonConfigurationFileParserDuplicateKeyErrorMessage" xml:space="preserve">
    <value>A duplicate key '{0}' was found</value>
  </data>
  <data name="JsonConfigurationFileParserTopLevelElementIsNotAnObjectErrorMessage" xml:space="preserve">
    <value>Top-level JSON element must be an object. Instead, '{0}' was found</value>
  </data>
  <data name="JsonConfigurationFileParserUnsupportedTokenErrorMessage" xml:space="preserve">
    <value>Unsupported JSON token '{0}' was found</value>
  </data>
  <data name="ServerTestExecutionFilterFactoryDescription" xml:space="preserve">
    <value>Creates the right test execution filter for server mode</value>
  </data>
  <data name="ServerTestExecutionFilterFactoryDisplayName" xml:space="preserve">
    <value>Server test execution filter factory</value>
  </data>
  <data name="ServiceProviderCannotFindServiceErrorMessage" xml:space="preserve">
    <value>Cannot find service of type '{0}'</value>
  </data>
  <data name="ServiceProviderServiceAlreadyRegistered" xml:space="preserve">
    <value>Instance of type '{0}' is already registered</value>
  </data>
  <data name="ServiceProviderShouldNotRegisterTestFramework" xml:space="preserve">
    <value>Instances of type 'ITestFramework' should not be registered through the service provider but through 'ITestApplicationBuilder.RegisterTestFramework'</value>
  </data>
  <data name="TestAdapterInvokerFactoryAlreadySetErrorMessage" xml:space="preserve">
    <value>An 'ITestFrameworkInvoker' factory is already set</value>
  </data>
  <data name="TestApplicationBuilderApplicationAlreadyRegistered" xml:space="preserve">
    <value>The application has already been built</value>
  </data>
  <data name="TestApplicationBuilderFrameworkAdapterFactoryAlreadyRegisteredErrorMessage" xml:space="preserve">
    <value>The test framework adapter factory has already been registered</value>
  </data>
  <data name="TestApplicationBuilderTestFrameworkCapabilitiesAlreadyRegistered" xml:space="preserve">
    <value>The test framework capabilities factory has already been registered</value>
  </data>
  <data name="TestApplicationBuilderTestFrameworkNotRegistered" xml:space="preserve">
    <value>The test framework adapter has not been registered. Use 'RegisterTestFrameworkAdapter' to register it</value>
  </data>
  <data name="TestApplicationResultDescription" xml:space="preserve">
    <value>Determine the result of the test application execution</value>
  </data>
  <data name="TestApplicationResultDisplayName" xml:space="preserve">
    <value>Test application result</value>
  </data>
  <data name="TestApplicationVSTestModeTooManyBuilders" xml:space="preserve">
    <value>VSTest mode only supports a single TestApplicationBuilder per process</value>
  </data>
  <data name="TestHostAdapterInvokerFailedTestSessionErrorMessage" xml:space="preserve">
    <value>Test adapter test session failure</value>
  </data>
  <data name="TreeNodeFilterCannotContainSlashCharacterErrorMessage" xml:space="preserve">
    <value>A filter '{0}' should not contain a '/' character</value>
  </data>
  <data name="TreeNodeFilterEscapeCharacterShouldNotBeLastErrorMessage" xml:space="preserve">
    <value>An escape character should not terminate the filter string '{0}'</value>
  </data>
  <data name="TreeNodeFilterOnlyLastLevelCanContainMutiLevelWildcardErrorMessage" xml:space="preserve">
    <value>Only the final filter path can contain '**' wildcard</value>
  </data>
  <data name="TreeNodeFilterOperatorNotAllowedErrorMessage" xml:space="preserve">
    <value>Unexpected operator '&amp;' or '|' within filter expression '{0}'</value>
  </data>
  <data name="TreeNodeFilterPathShouldStartWithSlashErrorMessage" xml:space="preserve">
    <value>Invalid node path, expected root as first character '{0}'</value>
  </data>
  <data name="TreeNodeFilterUnbalancedFilterErrorMessage" xml:space="preserve">
    <value>Filter expression '{0}' contains an unbalanced number of '{1}' '{2}' operators</value>
    <comment>{1} and {2} are () or []</comment>
  </data>
  <data name="TreeNodeFilterUnexpectedSlashOperatorErrorMessage" xml:space="preserve">
    <value>Filter contains an unexpected '/' operator inside a parenthesized expression</value>
  </data>
  <data name="TEstExecutionFilterFactoryFactoryAlreadySetErrorMessage" xml:space="preserve">
    <value>An 'ITestExecutionFilterFactory' factory is already set</value>
  </data>
  <data name="CannotRemoveEnvironmentVariableAtThisStageErrorMessage" xml:space="preserve">
    <value>Cannot remove environment variables at this stage</value>
  </data>
  <data name="CannotRemoveEnvironmentVariableItIsLockedErrorMessage" xml:space="preserve">
    <value>Extension '{0}' tried to remove environment variable '{1}' but it was locked by extension '{2}'</value>
  </data>
  <data name="CannotSetEnvironmentVariableAtThisStageErrorMessage" xml:space="preserve">
    <value>Cannot set environment variables at this stage</value>
  </data>
  <data name="CannotSetEnvironmentVariableItIsLockedErrorMessage" xml:space="preserve">
    <value>Extension '{0}' tried to set environment variable '{1}' but it was locked by extension '{2}'</value>
  </data>
  <data name="ProcessHasNotYetExitedErrorMessage" xml:space="preserve">
    <value>Process should have exited before we can determine this value</value>
  </data>
  <data name="CannotStartProcessErrorMessage" xml:space="preserve">
    <value>Cannot start process '{0}'</value>
  </data>
  <data name="EnvironmentVariableProviderFailedWithError" xml:space="preserve">
    <value>Provider '{0}' (UID: {1}) failed with error: {2}</value>
  </data>
  <data name="GlobalValidationOfTestHostEnvironmentVariablesFailedErrorMessage" xml:space="preserve">
    <value>The following 'ITestHostEnvironmentVariableProvider' providers rejected the final environment variables setup:</value>
  </data>
  <data name="TestFrameworkProxyApiShouldNotBeCalled" xml:space="preserve">
    <value>Method '{0}' should not have been called on this proxy object</value>
  </data>
  <data name="TestProcessDidNotExitGracefullyErrorMessage" xml:space="preserve">
    <value>Test application process didn't exit gracefully, exit code is '{0}'</value>
  </data>
</root>
