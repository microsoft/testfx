#nullable enable
Microsoft.Testing.Platform.Builder.ITestApplicationBuilder.Configuration.get -> Microsoft.Testing.Platform.Configurations.IConfigurationManager!
Microsoft.Testing.Platform.Builder.ITestApplicationBuilder.Logging.get -> Microsoft.Testing.Platform.Logging.ILoggingManager!
[TPEXP]const Microsoft.Testing.Platform.CommandLine.CommandLineParseResult.OptionPrefix = '-' -> char
[TPEXP]Microsoft.Testing.Platform.CommandLine.CommandLineParseOption
[TPEXP]Microsoft.Testing.Platform.CommandLine.CommandLineParseOption.Arguments.get -> string![]!
[TPEXP]Microsoft.Testing.Platform.CommandLine.CommandLineParseOption.CommandLineParseOption(string! name, string![]! arguments) -> void
[TPEXP]Microsoft.Testing.Platform.CommandLine.CommandLineParseOption.Name.get -> string!
[TPEXP]Microsoft.Testing.Platform.CommandLine.CommandLineParseResult
[TPEXP]Microsoft.Testing.Platform.CommandLine.CommandLineParseResult.CommandLineParseResult(string? toolName, System.Collections.Generic.IReadOnlyList<Microsoft.Testing.Platform.CommandLine.CommandLineParseOption!>! options, System.Collections.Generic.IReadOnlyList<string!>! errors) -> void
[TPEXP]Microsoft.Testing.Platform.CommandLine.CommandLineParseResult.Equals(Microsoft.Testing.Platform.CommandLine.CommandLineParseResult? other) -> bool
[TPEXP]Microsoft.Testing.Platform.CommandLine.CommandLineParseResult.Errors.get -> System.Collections.Generic.IReadOnlyList<string!>!
[TPEXP]Microsoft.Testing.Platform.CommandLine.CommandLineParseResult.HasError.get -> bool
[TPEXP]Microsoft.Testing.Platform.CommandLine.CommandLineParseResult.HasTool.get -> bool
[TPEXP]Microsoft.Testing.Platform.CommandLine.CommandLineParseResult.IsOptionSet(string! optionName) -> bool
[TPEXP]Microsoft.Testing.Platform.CommandLine.CommandLineParseResult.Options.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Testing.Platform.CommandLine.CommandLineParseOption!>!
[TPEXP]Microsoft.Testing.Platform.CommandLine.CommandLineParseResult.ToolName.get -> string?
[TPEXP]Microsoft.Testing.Platform.CommandLine.CommandLineParseResult.TryGetOptionArgumentList(string! optionName, out string![]? arguments) -> bool
[TPEXP]Microsoft.Testing.Platform.Configurations.IConfigurationManager
[TPEXP]Microsoft.Testing.Platform.Configurations.IConfigurationManager.AddConfigurationSource(System.Func<Microsoft.Testing.Platform.Configurations.IConfigurationSource!>! source) -> void
[TPEXP]Microsoft.Testing.Platform.Configurations.IConfigurationProvider
[TPEXP]Microsoft.Testing.Platform.Configurations.IConfigurationProvider.LoadAsync() -> System.Threading.Tasks.Task!
[TPEXP]Microsoft.Testing.Platform.Configurations.IConfigurationProvider.TryGet(string! key, out string? value) -> bool
[TPEXP]Microsoft.Testing.Platform.Configurations.IConfigurationSource
[TPEXP]Microsoft.Testing.Platform.Configurations.IConfigurationSource.BuildAsync(Microsoft.Testing.Platform.CommandLine.CommandLineParseResult! commandLineParseResult) -> System.Threading.Tasks.Task<Microsoft.Testing.Platform.Configurations.IConfigurationProvider!>!
[TPEXP]Microsoft.Testing.Platform.Configurations.IConfigurationSource.Order.get -> int
[TPEXP]Microsoft.Testing.Platform.Logging.ILoggerProvider
[TPEXP]Microsoft.Testing.Platform.Logging.ILoggerProvider.CreateLogger(string! categoryName) -> Microsoft.Testing.Platform.Logging.ILogger!
[TPEXP]Microsoft.Testing.Platform.Logging.ILoggingManager
[TPEXP]Microsoft.Testing.Platform.Logging.ILoggingManager.AddProvider(System.Func<Microsoft.Testing.Platform.Logging.LogLevel, System.IServiceProvider!, Microsoft.Testing.Platform.Logging.ILoggerProvider!>! loggerProviderFactory) -> void
[TPEXP]override Microsoft.Testing.Platform.CommandLine.CommandLineParseResult.Equals(object? obj) -> bool
[TPEXP]override Microsoft.Testing.Platform.CommandLine.CommandLineParseResult.GetHashCode() -> int
[TPEXP]override Microsoft.Testing.Platform.CommandLine.CommandLineParseResult.ToString() -> string!
[TPEXP]static Microsoft.Testing.Platform.CommandLine.CommandLineParseResult.Empty.get -> Microsoft.Testing.Platform.CommandLine.CommandLineParseResult!
