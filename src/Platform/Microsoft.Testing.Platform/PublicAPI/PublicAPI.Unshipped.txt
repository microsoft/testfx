#nullable enable
Microsoft.Testing.Platform.Builder.ConfigurationOptions
Microsoft.Testing.Platform.Builder.ConfigurationOptions.ConfigurationOptions() -> void
Microsoft.Testing.Platform.Builder.ConfigurationOptions.ConfigurationSources.get -> Microsoft.Testing.Platform.Builder.ConfigurationSourcesOptions!
Microsoft.Testing.Platform.Builder.ConfigurationSourcesOptions
Microsoft.Testing.Platform.Builder.ConfigurationSourcesOptions.ConfigurationSourcesOptions() -> void
Microsoft.Testing.Platform.Builder.ConfigurationSourcesOptions.RegisterEnvironmentVariablesConfigurationSource.get -> bool
Microsoft.Testing.Platform.Builder.ConfigurationSourcesOptions.RegisterEnvironmentVariablesConfigurationSource.set -> void
Microsoft.Testing.Platform.Builder.ITestApplication
Microsoft.Testing.Platform.Builder.ITestApplication.RunAsync() -> System.Threading.Tasks.Task<int>!
Microsoft.Testing.Platform.Builder.ITestApplicationBuilder
Microsoft.Testing.Platform.Builder.ITestApplicationBuilder.BuildAsync() -> System.Threading.Tasks.Task<Microsoft.Testing.Platform.Builder.ITestApplication!>!
Microsoft.Testing.Platform.Builder.ITestApplicationBuilder.CommandLine.get -> Microsoft.Testing.Platform.CommandLine.ICommandLineManager!
Microsoft.Testing.Platform.Builder.ITestApplicationBuilder.RegisterTestFramework(System.Func<System.IServiceProvider!, Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapabilities!>! capabilitiesFactory, System.Func<Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapabilities!, System.IServiceProvider!, Microsoft.Testing.Extensions.TestFramework.ITestFramework!>! adapterFactory) -> Microsoft.Testing.Platform.Builder.ITestApplicationBuilder!
Microsoft.Testing.Platform.Builder.ITestApplicationBuilder.TestHost.get -> Microsoft.Testing.Platform.TestHost.ITestHostManager!
Microsoft.Testing.Platform.Builder.ITestApplicationBuilder.TestHostControllers.get -> Microsoft.Testing.Platform.TestHostControllers.ITestHostControllersManager!
Microsoft.Testing.Platform.Builder.TestApplication
Microsoft.Testing.Platform.Builder.TestApplication.Dispose() -> void
Microsoft.Testing.Platform.Builder.TestApplication.RunAsync() -> System.Threading.Tasks.Task<int>!
Microsoft.Testing.Platform.Builder.TestApplicationOptions
Microsoft.Testing.Platform.Builder.TestApplicationOptions.Configuration.get -> Microsoft.Testing.Platform.Builder.ConfigurationOptions!
Microsoft.Testing.Platform.Builder.TestApplicationOptions.EnableTelemetry.get -> bool
Microsoft.Testing.Platform.Builder.TestApplicationOptions.EnableTelemetry.set -> void
Microsoft.Testing.Platform.Builder.TestApplicationOptions.TestApplicationOptions() -> void
Microsoft.Testing.Platform.Capabilities.ICapabilities<TCapability>
Microsoft.Testing.Platform.Capabilities.ICapabilities<TCapability>.Capabilities.get -> TCapability[]!
Microsoft.Testing.Platform.Capabilities.ICapability
Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapabilities
Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapability
Microsoft.Testing.Platform.Capabilities.TestFramework.TestFrameworkCapabilities
Microsoft.Testing.Platform.Capabilities.TestFramework.TestFrameworkCapabilities.Capabilities.get -> Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapability![]!
Microsoft.Testing.Platform.Capabilities.TestFramework.TestFrameworkCapabilities.TestFrameworkCapabilities(params Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapability![]! capabilities) -> void
Microsoft.Testing.Platform.CommandLine.ICommandLineManager
Microsoft.Testing.Platform.CommandLine.ICommandLineManager.AddProvider(System.Func<Microsoft.Testing.Extensions.CommandLine.ICommandLineOptionsProvider!>! commandLineProviderFactory) -> void
Microsoft.Testing.Platform.CommandLine.ICommandLineOptions
Microsoft.Testing.Platform.CommandLine.ICommandLineOptions.IsOptionSet(string! optionName) -> bool
Microsoft.Testing.Platform.CommandLine.ICommandLineOptions.TryGetOptionArgumentList(string! optionName, out string![]? arguments) -> bool
Microsoft.Testing.Platform.Configurations.ConfigurationExtensions
Microsoft.Testing.Platform.Configurations.IConfiguration
Microsoft.Testing.Platform.Configurations.IConfiguration.this[string! key].get -> string?
Microsoft.Testing.Extensions.CommandLine.ArgumentArity
Microsoft.Testing.Extensions.CommandLine.ArgumentArity.ArgumentArity() -> void
Microsoft.Testing.Extensions.CommandLine.ArgumentArity.ArgumentArity(int min, int max) -> void
Microsoft.Testing.Extensions.CommandLine.ArgumentArity.Equals(Microsoft.Testing.Extensions.CommandLine.ArgumentArity other) -> bool
Microsoft.Testing.Extensions.CommandLine.ArgumentArity.Max.get -> int
Microsoft.Testing.Extensions.CommandLine.ArgumentArity.Min.get -> int
Microsoft.Testing.Extensions.CommandLine.CommandLineOption
Microsoft.Testing.Extensions.CommandLine.CommandLineOption.Arity.get -> Microsoft.Testing.Extensions.CommandLine.ArgumentArity
Microsoft.Testing.Extensions.CommandLine.CommandLineOption.CommandLineOption(string! name, string! description, Microsoft.Testing.Extensions.CommandLine.ArgumentArity arity, bool isHidden) -> void
Microsoft.Testing.Extensions.CommandLine.CommandLineOption.Description.get -> string!
Microsoft.Testing.Extensions.CommandLine.CommandLineOption.Equals(Microsoft.Testing.Extensions.CommandLine.CommandLineOption? other) -> bool
Microsoft.Testing.Extensions.CommandLine.CommandLineOption.IsHidden.get -> bool
Microsoft.Testing.Extensions.CommandLine.CommandLineOption.Name.get -> string!
Microsoft.Testing.Extensions.CommandLine.ICommandLineOptionsProvider
Microsoft.Testing.Extensions.CommandLine.ICommandLineOptionsProvider.GetCommandLineOptions() -> Microsoft.Testing.Extensions.CommandLine.CommandLineOption![]!
Microsoft.Testing.Extensions.CommandLine.ICommandLineOptionsProvider.IsValidConfiguration(Microsoft.Testing.Platform.CommandLine.ICommandLineOptions! commandLineOptions, out string? errorMessage) -> bool
Microsoft.Testing.Extensions.CommandLine.ICommandLineOptionsProvider.OptionArgumentsAreValid(Microsoft.Testing.Extensions.CommandLine.CommandLineOption! commandOption, string![]! arguments, out string? errorMessage) -> bool
Microsoft.Testing.Extensions.CompositeExtensionFactory<TExtension>
Microsoft.Testing.Extensions.CompositeExtensionFactory<TExtension>.CompositeExtensionFactory(System.Func<System.IServiceProvider!, TExtension!>! factory) -> void
Microsoft.Testing.Extensions.CompositeExtensionFactory<TExtension>.CompositeExtensionFactory(System.Func<TExtension!>! factory) -> void
Microsoft.Testing.Extensions.IAsyncCleanableExtension
Microsoft.Testing.Extensions.IAsyncCleanableExtension.CleanupAsync() -> System.Threading.Tasks.Task!
Microsoft.Testing.Extensions.IAsyncInitializableExtension
Microsoft.Testing.Extensions.IAsyncInitializableExtension.InitializeAsync() -> System.Threading.Tasks.Task!
Microsoft.Testing.Extensions.IExtension
Microsoft.Testing.Extensions.IExtension.Description.get -> string!
Microsoft.Testing.Extensions.IExtension.DisplayName.get -> string!
Microsoft.Testing.Extensions.IExtension.IsEnabledAsync() -> System.Threading.Tasks.Task<bool>!
Microsoft.Testing.Extensions.IExtension.Uid.get -> string!
Microsoft.Testing.Extensions.IExtension.Version.get -> string!
Microsoft.Testing.Extensions.Messages.CancelledTestNodeStateProperty
Microsoft.Testing.Extensions.Messages.CancelledTestNodeStateProperty.CancelledTestNodeStateProperty() -> void
Microsoft.Testing.Extensions.Messages.CancelledTestNodeStateProperty.CancelledTestNodeStateProperty(string! explanation) -> void
Microsoft.Testing.Extensions.Messages.CancelledTestNodeStateProperty.CancelledTestNodeStateProperty(System.Exception! exception, string? explanation = null) -> void
Microsoft.Testing.Extensions.Messages.CancelledTestNodeStateProperty.Exception.get -> System.Exception?
Microsoft.Testing.Extensions.Messages.DataWithSessionUid
Microsoft.Testing.Extensions.Messages.DataWithSessionUid.DataWithSessionUid(string! displayName, string? description, Microsoft.Testing.Platform.TestHost.SessionUid sessionUid) -> void
Microsoft.Testing.Extensions.Messages.DataWithSessionUid.SessionUid.get -> Microsoft.Testing.Platform.TestHost.SessionUid
Microsoft.Testing.Extensions.Messages.DiscoveredTestNodeStateProperty
Microsoft.Testing.Extensions.Messages.DiscoveredTestNodeStateProperty.DiscoveredTestNodeStateProperty(string? Explanation = null) -> void
Microsoft.Testing.Extensions.Messages.ErrorTestNodeStateProperty
Microsoft.Testing.Extensions.Messages.ErrorTestNodeStateProperty.ErrorTestNodeStateProperty() -> void
Microsoft.Testing.Extensions.Messages.ErrorTestNodeStateProperty.ErrorTestNodeStateProperty(string! explanation) -> void
Microsoft.Testing.Extensions.Messages.ErrorTestNodeStateProperty.ErrorTestNodeStateProperty(System.Exception! exception, string? explanation = null) -> void
Microsoft.Testing.Extensions.Messages.ErrorTestNodeStateProperty.Exception.get -> System.Exception?
Microsoft.Testing.Extensions.Messages.FailedTestNodeStateProperty
Microsoft.Testing.Extensions.Messages.FailedTestNodeStateProperty.Exception.get -> System.Exception?
Microsoft.Testing.Extensions.Messages.FailedTestNodeStateProperty.FailedTestNodeStateProperty() -> void
Microsoft.Testing.Extensions.Messages.FailedTestNodeStateProperty.FailedTestNodeStateProperty(string! explanation) -> void
Microsoft.Testing.Extensions.Messages.FailedTestNodeStateProperty.FailedTestNodeStateProperty(System.Exception! exception, string? explanation = null) -> void
Microsoft.Testing.Extensions.Messages.FileArtifact
Microsoft.Testing.Extensions.Messages.FileArtifact.FileArtifact(System.IO.FileInfo! fileInfo, string! displayName, string? description = null) -> void
Microsoft.Testing.Extensions.Messages.FileArtifact.FileInfo.get -> System.IO.FileInfo!
Microsoft.Testing.Extensions.Messages.FileLocationProperty
Microsoft.Testing.Extensions.Messages.FileLocationProperty.FileLocationProperty(string! FilePath, Microsoft.Testing.Extensions.Messages.LinePositionSpan LineSpan) -> void
Microsoft.Testing.Extensions.Messages.FileLocationProperty.FilePath.get -> string!
Microsoft.Testing.Extensions.Messages.FileLocationProperty.FilePath.init -> void
Microsoft.Testing.Extensions.Messages.FileLocationProperty.LineSpan.get -> Microsoft.Testing.Extensions.Messages.LinePositionSpan
Microsoft.Testing.Extensions.Messages.FileLocationProperty.LineSpan.init -> void
Microsoft.Testing.Extensions.Messages.IData
Microsoft.Testing.Extensions.Messages.IData.Description.get -> string?
Microsoft.Testing.Extensions.Messages.IData.DisplayName.get -> string!
Microsoft.Testing.Extensions.Messages.IDataProducer
Microsoft.Testing.Extensions.Messages.IDataProducer.DataTypesProduced.get -> System.Type![]!
Microsoft.Testing.Extensions.Messages.InProgressTestNodeStateProperty
Microsoft.Testing.Extensions.Messages.InProgressTestNodeStateProperty.InProgressTestNodeStateProperty(string? Explanation = null) -> void
Microsoft.Testing.Extensions.Messages.IProperty
Microsoft.Testing.Extensions.Messages.KeyValuePairStringProperty
Microsoft.Testing.Extensions.Messages.KeyValuePairStringProperty.Key.get -> string!
Microsoft.Testing.Extensions.Messages.KeyValuePairStringProperty.Key.init -> void
Microsoft.Testing.Extensions.Messages.KeyValuePairStringProperty.KeyValuePairStringProperty(string! Key, string! Value) -> void
Microsoft.Testing.Extensions.Messages.KeyValuePairStringProperty.Value.get -> string!
Microsoft.Testing.Extensions.Messages.KeyValuePairStringProperty.Value.init -> void
Microsoft.Testing.Extensions.Messages.LinePosition
Microsoft.Testing.Extensions.Messages.LinePosition.Column.get -> int
Microsoft.Testing.Extensions.Messages.LinePosition.Column.set -> void
Microsoft.Testing.Extensions.Messages.LinePosition.Line.get -> int
Microsoft.Testing.Extensions.Messages.LinePosition.Line.set -> void
Microsoft.Testing.Extensions.Messages.LinePosition.LinePosition() -> void
Microsoft.Testing.Extensions.Messages.LinePosition.LinePosition(int Line, int Column) -> void
Microsoft.Testing.Extensions.Messages.LinePositionSpan
Microsoft.Testing.Extensions.Messages.LinePositionSpan.End.get -> Microsoft.Testing.Extensions.Messages.LinePosition
Microsoft.Testing.Extensions.Messages.LinePositionSpan.End.set -> void
Microsoft.Testing.Extensions.Messages.LinePositionSpan.LinePositionSpan() -> void
Microsoft.Testing.Extensions.Messages.LinePositionSpan.LinePositionSpan(Microsoft.Testing.Extensions.Messages.LinePosition Start, Microsoft.Testing.Extensions.Messages.LinePosition End) -> void
Microsoft.Testing.Extensions.Messages.LinePositionSpan.Start.get -> Microsoft.Testing.Extensions.Messages.LinePosition
Microsoft.Testing.Extensions.Messages.LinePositionSpan.Start.set -> void
Microsoft.Testing.Extensions.Messages.PassedTestNodeStateProperty
Microsoft.Testing.Extensions.Messages.PassedTestNodeStateProperty.PassedTestNodeStateProperty(string? Explanation = null) -> void
Microsoft.Testing.Extensions.Messages.PropertyBag
Microsoft.Testing.Extensions.Messages.PropertyBag.Add(Microsoft.Testing.Extensions.Messages.IProperty! property) -> void
Microsoft.Testing.Extensions.Messages.PropertyBag.Any<TProperty>() -> bool
Microsoft.Testing.Extensions.Messages.PropertyBag.AsEnumerable() -> System.Collections.Generic.IEnumerable<Microsoft.Testing.Extensions.Messages.IProperty!>!
Microsoft.Testing.Extensions.Messages.PropertyBag.Count.get -> int
Microsoft.Testing.Extensions.Messages.PropertyBag.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.Testing.Extensions.Messages.IProperty!>!
Microsoft.Testing.Extensions.Messages.PropertyBag.OfType<TProperty>() -> TProperty[]!
Microsoft.Testing.Extensions.Messages.PropertyBag.PropertyBag() -> void
Microsoft.Testing.Extensions.Messages.PropertyBag.PropertyBag(params Microsoft.Testing.Extensions.Messages.IProperty![]! properties) -> void
Microsoft.Testing.Extensions.Messages.PropertyBag.PropertyBag(System.Collections.Generic.IEnumerable<Microsoft.Testing.Extensions.Messages.IProperty!>! properties) -> void
Microsoft.Testing.Extensions.Messages.PropertyBag.Single<TProperty>() -> TProperty
Microsoft.Testing.Extensions.Messages.PropertyBag.SingleOrDefault<TProperty>() -> TProperty?
Microsoft.Testing.Extensions.Messages.PropertyBagData
Microsoft.Testing.Extensions.Messages.PropertyBagData.Description.get -> string?
Microsoft.Testing.Extensions.Messages.PropertyBagData.DisplayName.get -> string!
Microsoft.Testing.Extensions.Messages.PropertyBagData.Properties.get -> Microsoft.Testing.Extensions.Messages.PropertyBag!
Microsoft.Testing.Extensions.Messages.PropertyBagData.PropertyBagData(string! displayName, string? description) -> void
Microsoft.Testing.Extensions.Messages.SessionFileArtifact
Microsoft.Testing.Extensions.Messages.SessionFileArtifact.FileInfo.get -> System.IO.FileInfo!
Microsoft.Testing.Extensions.Messages.SessionFileArtifact.SessionFileArtifact(Microsoft.Testing.Platform.TestHost.SessionUid sessionUid, System.IO.FileInfo! fileInfo, string! displayName, string? description = null) -> void
Microsoft.Testing.Extensions.Messages.SkippedTestNodeStateProperty
Microsoft.Testing.Extensions.Messages.SkippedTestNodeStateProperty.SkippedTestNodeStateProperty(string? Explanation = null) -> void
Microsoft.Testing.Extensions.Messages.StepTimingInfo
Microsoft.Testing.Extensions.Messages.StepTimingInfo.Description.get -> string!
Microsoft.Testing.Extensions.Messages.StepTimingInfo.Description.init -> void
Microsoft.Testing.Extensions.Messages.StepTimingInfo.Id.get -> string!
Microsoft.Testing.Extensions.Messages.StepTimingInfo.Id.init -> void
Microsoft.Testing.Extensions.Messages.StepTimingInfo.StepTimingInfo(string! Id, string! Description, Microsoft.Testing.Extensions.Messages.TimingInfo Timing) -> void
Microsoft.Testing.Extensions.Messages.StepTimingInfo.Timing.get -> Microsoft.Testing.Extensions.Messages.TimingInfo
Microsoft.Testing.Extensions.Messages.StepTimingInfo.Timing.init -> void
Microsoft.Testing.Extensions.Messages.TestFileLocationProperty
Microsoft.Testing.Extensions.Messages.TestFileLocationProperty.TestFileLocationProperty(string! FilePath, Microsoft.Testing.Extensions.Messages.LinePositionSpan LineSpan) -> void
Microsoft.Testing.Extensions.Messages.TestMetadataProperty
Microsoft.Testing.Extensions.Messages.TestMetadataProperty.Key.get -> string!
Microsoft.Testing.Extensions.Messages.TestMetadataProperty.Key.init -> void
Microsoft.Testing.Extensions.Messages.TestMetadataProperty.TestMetadataProperty(string! Key, string! Value) -> void
Microsoft.Testing.Extensions.Messages.TestMetadataProperty.Value.get -> string!
Microsoft.Testing.Extensions.Messages.TestMetadataProperty.Value.init -> void
Microsoft.Testing.Extensions.Messages.TestMethodIdentifierProperty
Microsoft.Testing.Extensions.Messages.TestMethodIdentifierProperty.AssemblyFullName.get -> string!
Microsoft.Testing.Extensions.Messages.TestMethodIdentifierProperty.AssemblyFullName.init -> void
Microsoft.Testing.Extensions.Messages.TestMethodIdentifierProperty.MethodName.get -> string!
Microsoft.Testing.Extensions.Messages.TestMethodIdentifierProperty.MethodName.init -> void
Microsoft.Testing.Extensions.Messages.TestMethodIdentifierProperty.Namespace.get -> string!
Microsoft.Testing.Extensions.Messages.TestMethodIdentifierProperty.Namespace.init -> void
Microsoft.Testing.Extensions.Messages.TestMethodIdentifierProperty.ParameterTypeFullNames.get -> string![]!
Microsoft.Testing.Extensions.Messages.TestMethodIdentifierProperty.ParameterTypeFullNames.init -> void
Microsoft.Testing.Extensions.Messages.TestMethodIdentifierProperty.ReturnTypeFullName.get -> string!
Microsoft.Testing.Extensions.Messages.TestMethodIdentifierProperty.ReturnTypeFullName.init -> void
Microsoft.Testing.Extensions.Messages.TestMethodIdentifierProperty.TestMethodIdentifierProperty(string! AssemblyFullName, string! Namespace, string! TypeName, string! MethodName, string![]! ParameterTypeFullNames, string! ReturnTypeFullName) -> void
Microsoft.Testing.Extensions.Messages.TestMethodIdentifierProperty.TypeName.get -> string!
Microsoft.Testing.Extensions.Messages.TestMethodIdentifierProperty.TypeName.init -> void
Microsoft.Testing.Extensions.Messages.TestNode
Microsoft.Testing.Extensions.Messages.TestNode.DisplayName.get -> string!
Microsoft.Testing.Extensions.Messages.TestNode.DisplayName.init -> void
Microsoft.Testing.Extensions.Messages.TestNode.Properties.get -> Microsoft.Testing.Extensions.Messages.PropertyBag!
Microsoft.Testing.Extensions.Messages.TestNode.Properties.init -> void
Microsoft.Testing.Extensions.Messages.TestNode.TestNode() -> void
Microsoft.Testing.Extensions.Messages.TestNode.Uid.get -> Microsoft.Testing.Extensions.Messages.TestNodeUid!
Microsoft.Testing.Extensions.Messages.TestNode.Uid.init -> void
Microsoft.Testing.Extensions.Messages.TestNodeFileArtifact
Microsoft.Testing.Extensions.Messages.TestNodeFileArtifact.Node.get -> Microsoft.Testing.Extensions.Messages.TestNode!
Microsoft.Testing.Extensions.Messages.TestNodeFileArtifact.TestNodeFileArtifact(Microsoft.Testing.Platform.TestHost.SessionUid sessionUid, Microsoft.Testing.Extensions.Messages.TestNode! node, System.IO.FileInfo! fileInfo, string! displayName, string? description = null) -> void
Microsoft.Testing.Extensions.Messages.TestNodeStateProperty
Microsoft.Testing.Extensions.Messages.TestNodeStateProperty.Explanation.get -> string?
Microsoft.Testing.Extensions.Messages.TestNodeStateProperty.Explanation.init -> void
Microsoft.Testing.Extensions.Messages.TestNodeStateProperty.TestNodeStateProperty(string? Explanation) -> void
Microsoft.Testing.Extensions.Messages.TestNodeUid
Microsoft.Testing.Extensions.Messages.TestNodeUid.Equals(Microsoft.Testing.Extensions.Messages.TestNodeUid? other) -> bool
Microsoft.Testing.Extensions.Messages.TestNodeUid.TestNodeUid(string! value) -> void
Microsoft.Testing.Extensions.Messages.TestNodeUid.Value.get -> string!
Microsoft.Testing.Extensions.Messages.TestNodeUid.Value.init -> void
Microsoft.Testing.Extensions.Messages.TestNodeUpdateMessage
Microsoft.Testing.Extensions.Messages.TestNodeUpdateMessage.ParentTestNodeUid.get -> Microsoft.Testing.Extensions.Messages.TestNodeUid?
Microsoft.Testing.Extensions.Messages.TestNodeUpdateMessage.TestNode.get -> Microsoft.Testing.Extensions.Messages.TestNode!
Microsoft.Testing.Extensions.Messages.TestNodeUpdateMessage.TestNodeUpdateMessage(Microsoft.Testing.Platform.TestHost.SessionUid sessionUid, Microsoft.Testing.Extensions.Messages.TestNode! testNode, Microsoft.Testing.Extensions.Messages.TestNodeUid? parentTestNodeUid = null) -> void
Microsoft.Testing.Extensions.Messages.TimeoutTestNodeStateProperty
Microsoft.Testing.Extensions.Messages.TimeoutTestNodeStateProperty.Exception.get -> System.Exception?
Microsoft.Testing.Extensions.Messages.TimeoutTestNodeStateProperty.Timeout.get -> System.TimeSpan?
Microsoft.Testing.Extensions.Messages.TimeoutTestNodeStateProperty.Timeout.init -> void
Microsoft.Testing.Extensions.Messages.TimeoutTestNodeStateProperty.TimeoutTestNodeStateProperty() -> void
Microsoft.Testing.Extensions.Messages.TimeoutTestNodeStateProperty.TimeoutTestNodeStateProperty(string! explanation) -> void
Microsoft.Testing.Extensions.Messages.TimeoutTestNodeStateProperty.TimeoutTestNodeStateProperty(System.Exception! exception, string? explanation = null) -> void
Microsoft.Testing.Extensions.Messages.TimingInfo
Microsoft.Testing.Extensions.Messages.TimingInfo.Duration.get -> System.TimeSpan
Microsoft.Testing.Extensions.Messages.TimingInfo.Duration.init -> void
Microsoft.Testing.Extensions.Messages.TimingInfo.EndTime.get -> System.DateTimeOffset
Microsoft.Testing.Extensions.Messages.TimingInfo.EndTime.init -> void
Microsoft.Testing.Extensions.Messages.TimingInfo.StartTime.get -> System.DateTimeOffset
Microsoft.Testing.Extensions.Messages.TimingInfo.StartTime.init -> void
Microsoft.Testing.Extensions.Messages.TimingInfo.TimingInfo() -> void
Microsoft.Testing.Extensions.Messages.TimingInfo.TimingInfo(System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, System.TimeSpan Duration) -> void
Microsoft.Testing.Extensions.Messages.TimingProperty
Microsoft.Testing.Extensions.Messages.TimingProperty.GlobalTiming.get -> Microsoft.Testing.Extensions.Messages.TimingInfo
Microsoft.Testing.Extensions.Messages.TimingProperty.StepTimings.get -> Microsoft.Testing.Extensions.Messages.StepTimingInfo![]!
Microsoft.Testing.Extensions.Messages.TimingProperty.TimingProperty(Microsoft.Testing.Extensions.Messages.TimingInfo globalTiming) -> void
Microsoft.Testing.Extensions.Messages.TimingProperty.TimingProperty(Microsoft.Testing.Extensions.Messages.TimingInfo globalTiming, Microsoft.Testing.Extensions.Messages.StepTimingInfo![]! stepTimings) -> void
Microsoft.Testing.Extensions.OutputDevice.IOutputDeviceDataProducer
Microsoft.Testing.Extensions.TestFramework.CloseTestSessionContext
Microsoft.Testing.Extensions.TestFramework.CloseTestSessionContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.Testing.Extensions.TestFramework.CloseTestSessionResult
Microsoft.Testing.Extensions.TestFramework.CloseTestSessionResult.CloseTestSessionResult() -> void
Microsoft.Testing.Extensions.TestFramework.CloseTestSessionResult.ErrorMessage.get -> string?
Microsoft.Testing.Extensions.TestFramework.CloseTestSessionResult.ErrorMessage.set -> void
Microsoft.Testing.Extensions.TestFramework.CloseTestSessionResult.IsSuccess.get -> bool
Microsoft.Testing.Extensions.TestFramework.CloseTestSessionResult.IsSuccess.set -> void
Microsoft.Testing.Extensions.TestFramework.CloseTestSessionResult.WarningMessage.get -> string?
Microsoft.Testing.Extensions.TestFramework.CloseTestSessionResult.WarningMessage.set -> void
Microsoft.Testing.Extensions.TestFramework.CreateTestSessionContext
Microsoft.Testing.Extensions.TestFramework.CreateTestSessionContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.Testing.Extensions.TestFramework.CreateTestSessionResult
Microsoft.Testing.Extensions.TestFramework.CreateTestSessionResult.CreateTestSessionResult() -> void
Microsoft.Testing.Extensions.TestFramework.CreateTestSessionResult.ErrorMessage.get -> string?
Microsoft.Testing.Extensions.TestFramework.CreateTestSessionResult.ErrorMessage.set -> void
Microsoft.Testing.Extensions.TestFramework.CreateTestSessionResult.IsSuccess.get -> bool
Microsoft.Testing.Extensions.TestFramework.CreateTestSessionResult.IsSuccess.set -> void
Microsoft.Testing.Extensions.TestFramework.CreateTestSessionResult.WarningMessage.get -> string?
Microsoft.Testing.Extensions.TestFramework.CreateTestSessionResult.WarningMessage.set -> void
Microsoft.Testing.Extensions.TestFramework.ExecuteRequestContext
Microsoft.Testing.Extensions.TestFramework.ExecuteRequestContext.CancellationToken.get -> System.Threading.CancellationToken
Microsoft.Testing.Extensions.TestFramework.ExecuteRequestContext.Complete() -> void
Microsoft.Testing.Extensions.TestFramework.ExecuteRequestContext.MessageBus.get -> Microsoft.Testing.Platform.Messages.IMessageBus!
Microsoft.Testing.Extensions.TestFramework.ExecuteRequestContext.Request.get -> Microsoft.Testing.Platform.Requests.IRequest!
Microsoft.Testing.Extensions.TestFramework.ITestFramework
Microsoft.Testing.Extensions.TestFramework.ITestFramework.CloseTestSessionAsync(Microsoft.Testing.Extensions.TestFramework.CloseTestSessionContext! context) -> System.Threading.Tasks.Task<Microsoft.Testing.Extensions.TestFramework.CloseTestSessionResult!>!
Microsoft.Testing.Extensions.TestFramework.ITestFramework.CreateTestSessionAsync(Microsoft.Testing.Extensions.TestFramework.CreateTestSessionContext! context) -> System.Threading.Tasks.Task<Microsoft.Testing.Extensions.TestFramework.CreateTestSessionResult!>!
Microsoft.Testing.Extensions.TestFramework.ITestFramework.ExecuteRequestAsync(Microsoft.Testing.Extensions.TestFramework.ExecuteRequestContext! context) -> System.Threading.Tasks.Task!
Microsoft.Testing.Extensions.TestHost.IDataConsumer
Microsoft.Testing.Extensions.TestHost.IDataConsumer.ConsumeAsync(Microsoft.Testing.Extensions.Messages.IDataProducer! dataProducer, Microsoft.Testing.Extensions.Messages.IData! value, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.Testing.Extensions.TestHost.IDataConsumer.DataTypesConsumed.get -> System.Type![]!
Microsoft.Testing.Extensions.TestHost.ITestApplicationLifecycleCallbacks
Microsoft.Testing.Extensions.TestHost.ITestApplicationLifecycleCallbacks.AfterRunAsync(int exitCode, System.Threading.CancellationToken cancellation) -> System.Threading.Tasks.Task!
Microsoft.Testing.Extensions.TestHost.ITestApplicationLifecycleCallbacks.BeforeRunAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.Testing.Extensions.TestHost.ITestHostExtension
Microsoft.Testing.Extensions.TestHost.ITestSessionLifetimeHandler
Microsoft.Testing.Extensions.TestHost.ITestSessionLifetimeHandler.OnTestSessionFinishingAsync(Microsoft.Testing.Platform.TestHost.SessionUid sessionUid, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.Testing.Extensions.TestHost.ITestSessionLifetimeHandler.OnTestSessionStartingAsync(Microsoft.Testing.Platform.TestHost.SessionUid sessionUid, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.Testing.Extensions.TestHostControllers.EnvironmentVariable
Microsoft.Testing.Extensions.TestHostControllers.EnvironmentVariable.EnvironmentVariable(string! variable, string? value, bool isSecret, bool isLocked) -> void
Microsoft.Testing.Extensions.TestHostControllers.EnvironmentVariable.IsLocked.get -> bool
Microsoft.Testing.Extensions.TestHostControllers.EnvironmentVariable.IsSecret.get -> bool
Microsoft.Testing.Extensions.TestHostControllers.EnvironmentVariable.Value.get -> string?
Microsoft.Testing.Extensions.TestHostControllers.EnvironmentVariable.Variable.get -> string!
Microsoft.Testing.Extensions.TestHostControllers.IEnvironmentVariables
Microsoft.Testing.Extensions.TestHostControllers.IEnvironmentVariables.RemoveVariable(string! variable) -> void
Microsoft.Testing.Extensions.TestHostControllers.IEnvironmentVariables.SetVariable(Microsoft.Testing.Extensions.TestHostControllers.EnvironmentVariable! environmentVariable) -> void
Microsoft.Testing.Extensions.TestHostControllers.IReadOnlyEnvironmentVariables
Microsoft.Testing.Extensions.TestHostControllers.IReadOnlyEnvironmentVariables.TryGetVariable(string! variable, out Microsoft.Testing.Extensions.TestHostControllers.OwnedEnvironmentVariable? environmentVariable) -> bool
Microsoft.Testing.Extensions.TestHostControllers.ITestHostControllersExtension
Microsoft.Testing.Extensions.TestHostControllers.ITestHostEnvironmentVariableProvider
Microsoft.Testing.Extensions.TestHostControllers.ITestHostEnvironmentVariableProvider.AreValid(Microsoft.Testing.Extensions.TestHostControllers.IReadOnlyEnvironmentVariables! environmentVariables, out string? errorMessage) -> bool
Microsoft.Testing.Extensions.TestHostControllers.ITestHostEnvironmentVariableProvider.Update(Microsoft.Testing.Extensions.TestHostControllers.IEnvironmentVariables! environmentVariables) -> void
Microsoft.Testing.Extensions.TestHostControllers.ITestHostProcessInformation
Microsoft.Testing.Extensions.TestHostControllers.ITestHostProcessInformation.ExitCode.get -> int
Microsoft.Testing.Extensions.TestHostControllers.ITestHostProcessInformation.HasExitedGracefully.get -> bool
Microsoft.Testing.Extensions.TestHostControllers.ITestHostProcessInformation.PID.get -> int
Microsoft.Testing.Extensions.TestHostControllers.ITestHostProcessLifetimeHandler
Microsoft.Testing.Extensions.TestHostControllers.ITestHostProcessLifetimeHandler.BeforeTestHostProcessStartAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.Testing.Extensions.TestHostControllers.ITestHostProcessLifetimeHandler.OnTestHostProcessExitedAsync(Microsoft.Testing.Extensions.TestHostControllers.ITestHostProcessInformation! testHostProcessInformation, System.Threading.CancellationToken cancellation) -> System.Threading.Tasks.Task!
Microsoft.Testing.Extensions.TestHostControllers.ITestHostProcessLifetimeHandler.OnTestHostProcessStartedAsync(Microsoft.Testing.Extensions.TestHostControllers.ITestHostProcessInformation! testHostProcessInformation, System.Threading.CancellationToken cancellation) -> System.Threading.Tasks.Task!
Microsoft.Testing.Extensions.TestHostControllers.OwnedEnvironmentVariable
Microsoft.Testing.Extensions.TestHostControllers.OwnedEnvironmentVariable.OwnedEnvironmentVariable(Microsoft.Testing.Extensions.IExtension! owner, string! variable, string? value, bool isSecret, bool isLocked) -> void
Microsoft.Testing.Extensions.TestHostControllers.OwnedEnvironmentVariable.Owner.get -> Microsoft.Testing.Extensions.IExtension!
Microsoft.Testing.Platform.Logging.ILogger
Microsoft.Testing.Platform.Logging.ILogger.IsEnabled(Microsoft.Testing.Platform.Logging.LogLevel logLevel) -> bool
Microsoft.Testing.Platform.Logging.ILogger.Log<TState>(Microsoft.Testing.Platform.Logging.LogLevel logLevel, TState state, System.Exception? exception, System.Func<TState, System.Exception?, string!>! formatter) -> void
Microsoft.Testing.Platform.Logging.ILogger.LogAsync<TState>(Microsoft.Testing.Platform.Logging.LogLevel logLevel, TState state, System.Exception? exception, System.Func<TState, System.Exception?, string!>! formatter) -> System.Threading.Tasks.Task!
Microsoft.Testing.Platform.Logging.ILogger<TCategoryName>
Microsoft.Testing.Platform.Logging.ILoggerFactory
Microsoft.Testing.Platform.Logging.ILoggerFactory.CreateLogger(string! categoryName) -> Microsoft.Testing.Platform.Logging.ILogger!
Microsoft.Testing.Platform.Logging.LoggerFactoryExtensions
Microsoft.Testing.Platform.Logging.LoggingExtensions
Microsoft.Testing.Platform.Logging.LogLevel
Microsoft.Testing.Platform.Logging.LogLevel.Critical = 5 -> Microsoft.Testing.Platform.Logging.LogLevel
Microsoft.Testing.Platform.Logging.LogLevel.Debug = 1 -> Microsoft.Testing.Platform.Logging.LogLevel
Microsoft.Testing.Platform.Logging.LogLevel.Error = 4 -> Microsoft.Testing.Platform.Logging.LogLevel
Microsoft.Testing.Platform.Logging.LogLevel.Information = 2 -> Microsoft.Testing.Platform.Logging.LogLevel
Microsoft.Testing.Platform.Logging.LogLevel.None = 6 -> Microsoft.Testing.Platform.Logging.LogLevel
Microsoft.Testing.Platform.Logging.LogLevel.Trace = 0 -> Microsoft.Testing.Platform.Logging.LogLevel
Microsoft.Testing.Platform.Logging.LogLevel.Warning = 3 -> Microsoft.Testing.Platform.Logging.LogLevel
Microsoft.Testing.Platform.Messages.IMessageBus
Microsoft.Testing.Platform.Messages.IMessageBus.PublishAsync(Microsoft.Testing.Extensions.Messages.IDataProducer! dataProducer, Microsoft.Testing.Extensions.Messages.IData! data) -> System.Threading.Tasks.Task!
Microsoft.Testing.Platform.OutputDevice.ExceptionOutputDeviceData
Microsoft.Testing.Platform.OutputDevice.ExceptionOutputDeviceData.Exception.get -> System.Exception!
Microsoft.Testing.Platform.OutputDevice.ExceptionOutputDeviceData.ExceptionOutputDeviceData(System.Exception! exception) -> void
Microsoft.Testing.Platform.OutputDevice.FormattedTextOutputDeviceData
Microsoft.Testing.Platform.OutputDevice.FormattedTextOutputDeviceData.BackgroundColor.get -> Microsoft.Testing.Platform.OutputDevice.IColor?
Microsoft.Testing.Platform.OutputDevice.FormattedTextOutputDeviceData.BackgroundColor.init -> void
Microsoft.Testing.Platform.OutputDevice.FormattedTextOutputDeviceData.ForegroundColor.get -> Microsoft.Testing.Platform.OutputDevice.IColor?
Microsoft.Testing.Platform.OutputDevice.FormattedTextOutputDeviceData.ForegroundColor.init -> void
Microsoft.Testing.Platform.OutputDevice.FormattedTextOutputDeviceData.FormattedTextOutputDeviceData(string! text) -> void
Microsoft.Testing.Platform.OutputDevice.IColor
Microsoft.Testing.Platform.OutputDevice.IOutputDevice
Microsoft.Testing.Platform.OutputDevice.IOutputDevice.DisplayAsync(Microsoft.Testing.Extensions.OutputDevice.IOutputDeviceDataProducer! producer, Microsoft.Testing.Platform.OutputDevice.IOutputDeviceData! data) -> System.Threading.Tasks.Task!
Microsoft.Testing.Platform.OutputDevice.IOutputDeviceData
Microsoft.Testing.Platform.OutputDevice.SystemConsoleColor
Microsoft.Testing.Platform.OutputDevice.SystemConsoleColor.ConsoleColor.get -> System.ConsoleColor
Microsoft.Testing.Platform.OutputDevice.SystemConsoleColor.ConsoleColor.init -> void
Microsoft.Testing.Platform.OutputDevice.SystemConsoleColor.SystemConsoleColor() -> void
Microsoft.Testing.Platform.OutputDevice.TextOutputDeviceData
Microsoft.Testing.Platform.OutputDevice.TextOutputDeviceData.Text.get -> string!
Microsoft.Testing.Platform.OutputDevice.TextOutputDeviceData.TextOutputDeviceData(string! text) -> void
Microsoft.Testing.Platform.Requests.DiscoverTestExecutionRequest
Microsoft.Testing.Platform.Requests.DiscoverTestExecutionRequest.DiscoverTestExecutionRequest(Microsoft.Testing.Platform.TestHost.TestSessionContext! session) -> void
Microsoft.Testing.Platform.Requests.DiscoverTestExecutionRequest.DiscoverTestExecutionRequest(Microsoft.Testing.Platform.TestHost.TestSessionContext! session, Microsoft.Testing.Platform.Requests.ITestExecutionFilter! executionFilter) -> void
Microsoft.Testing.Platform.Requests.IRequest
Microsoft.Testing.Platform.Requests.IRequest.Session.get -> Microsoft.Testing.Platform.TestHost.TestSessionContext!
Microsoft.Testing.Platform.Requests.ITestExecutionFilter
Microsoft.Testing.Platform.Requests.RunTestExecutionRequest
Microsoft.Testing.Platform.Requests.RunTestExecutionRequest.RunTestExecutionRequest(Microsoft.Testing.Platform.TestHost.TestSessionContext! session) -> void
Microsoft.Testing.Platform.Requests.RunTestExecutionRequest.RunTestExecutionRequest(Microsoft.Testing.Platform.TestHost.TestSessionContext! session, Microsoft.Testing.Platform.Requests.ITestExecutionFilter! executionFilter) -> void
Microsoft.Testing.Platform.Requests.TestExecutionRequest
Microsoft.Testing.Platform.Requests.TestExecutionRequest.Filter.get -> Microsoft.Testing.Platform.Requests.ITestExecutionFilter!
Microsoft.Testing.Platform.Requests.TestExecutionRequest.Session.get -> Microsoft.Testing.Platform.TestHost.TestSessionContext!
Microsoft.Testing.Platform.Requests.TestExecutionRequest.TestExecutionRequest(Microsoft.Testing.Platform.TestHost.TestSessionContext! session, Microsoft.Testing.Platform.Requests.ITestExecutionFilter! filter) -> void
Microsoft.Testing.Platform.Requests.TestNodeUidListFilter
Microsoft.Testing.Platform.Requests.TestNodeUidListFilter.TestNodeUidListFilter(Microsoft.Testing.Extensions.Messages.TestNodeUid![]! testNodeUids) -> void
Microsoft.Testing.Platform.Requests.TestNodeUidListFilter.TestNodeUids.get -> Microsoft.Testing.Extensions.Messages.TestNodeUid![]!
Microsoft.Testing.Platform.ServerMode.IServerModeManager
Microsoft.Testing.Platform.Services.ServiceProviderExtensions
Microsoft.Testing.Platform.TestHost.ClientInfo
Microsoft.Testing.Platform.TestHost.ClientInfo.Id.get -> string!
Microsoft.Testing.Platform.TestHost.ClientInfo.Version.get -> string!
Microsoft.Testing.Platform.TestHost.ITestHostManager
Microsoft.Testing.Platform.TestHost.ITestHostManager.AddDataConsumer(System.Func<System.IServiceProvider!, Microsoft.Testing.Extensions.TestHost.IDataConsumer!>! dataConsumerFactory) -> void
Microsoft.Testing.Platform.TestHost.ITestHostManager.AddDataConsumer<T>(Microsoft.Testing.Extensions.CompositeExtensionFactory<T!>! compositeServiceFactory) -> void
Microsoft.Testing.Platform.TestHost.ITestHostManager.AddTestApplicationLifecycleCallbacks(System.Func<System.IServiceProvider!, Microsoft.Testing.Extensions.TestHost.ITestApplicationLifecycleCallbacks!>! testApplicationLifecycleCallbacks) -> void
Microsoft.Testing.Platform.TestHost.ITestHostManager.AddTestSessionLifetimeHandle(System.Func<System.IServiceProvider!, Microsoft.Testing.Extensions.TestHost.ITestSessionLifetimeHandler!>! testSessionLifetimeHandleFactory) -> void
Microsoft.Testing.Platform.TestHost.ITestHostManager.AddTestSessionLifetimeHandle<T>(Microsoft.Testing.Extensions.CompositeExtensionFactory<T!>! compositeServiceFactory) -> void
Microsoft.Testing.Platform.TestHost.SessionUid
Microsoft.Testing.Platform.TestHost.SessionUid.SessionUid() -> void
Microsoft.Testing.Platform.TestHost.SessionUid.SessionUid(string! uid) -> void
Microsoft.Testing.Platform.TestHost.SessionUid.Uid.get -> string!
Microsoft.Testing.Platform.TestHost.TestSessionContext
Microsoft.Testing.Platform.TestHost.TestSessionContext.Client.get -> Microsoft.Testing.Platform.TestHost.ClientInfo!
Microsoft.Testing.Platform.TestHost.TestSessionContext.SessionUid.get -> Microsoft.Testing.Platform.TestHost.SessionUid
Microsoft.Testing.Platform.TestHost.WellKnownClients
Microsoft.Testing.Platform.TestHostControllers.ITestHostControllersManager
Microsoft.Testing.Platform.TestHostControllers.ITestHostControllersManager.AddEnvironmentVariableProvider(System.Func<System.IServiceProvider!, Microsoft.Testing.Extensions.TestHostControllers.ITestHostEnvironmentVariableProvider!>! environmentVariableProviderFactory) -> void
Microsoft.Testing.Platform.TestHostControllers.ITestHostControllersManager.AddEnvironmentVariableProvider<T>(Microsoft.Testing.Extensions.CompositeExtensionFactory<T!>! compositeServiceFactory) -> void
Microsoft.Testing.Platform.TestHostControllers.ITestHostControllersManager.AddProcessLifetimeHandler(System.Func<System.IServiceProvider!, Microsoft.Testing.Extensions.TestHostControllers.ITestHostProcessLifetimeHandler!>! lifetimeHandler) -> void
Microsoft.Testing.Platform.TestHostControllers.ITestHostControllersManager.AddProcessLifetimeHandler<T>(Microsoft.Testing.Extensions.CompositeExtensionFactory<T!>! compositeServiceFactory) -> void
override Microsoft.Testing.Extensions.CommandLine.ArgumentArity.Equals(object? obj) -> bool
override Microsoft.Testing.Extensions.CommandLine.ArgumentArity.GetHashCode() -> int
override Microsoft.Testing.Extensions.CommandLine.CommandLineOption.Equals(object? obj) -> bool
override Microsoft.Testing.Extensions.CommandLine.CommandLineOption.GetHashCode() -> int
override Microsoft.Testing.Extensions.Messages.TestNode.ToString() -> string!
override Microsoft.Testing.Extensions.Messages.TestNodeUid.Equals(object? obj) -> bool
override Microsoft.Testing.Extensions.Messages.TestNodeUid.GetHashCode() -> int
static Microsoft.Testing.Platform.Builder.TestApplication.CreateBuilderAsync(string![]! args, Microsoft.Testing.Platform.Builder.TestApplicationOptions? testApplicationOptions = null) -> System.Threading.Tasks.Task<Microsoft.Testing.Platform.Builder.ITestApplicationBuilder!>!
static Microsoft.Testing.Platform.Builder.TestApplication.CreateServerModeBuilderAsync(string![]! args, Microsoft.Testing.Platform.Builder.TestApplicationOptions? testApplicationOptions = null) -> System.Threading.Tasks.Task<Microsoft.Testing.Platform.Builder.ITestApplicationBuilder!>!
static Microsoft.Testing.Platform.Configurations.ConfigurationExtensions.GetCurrentWorkingDirectory(this Microsoft.Testing.Platform.Configurations.IConfiguration! configuration) -> string!
static Microsoft.Testing.Platform.Configurations.ConfigurationExtensions.GetTestHostWorkingDirectory(this Microsoft.Testing.Platform.Configurations.IConfiguration! configuration) -> string!
static Microsoft.Testing.Platform.Configurations.ConfigurationExtensions.GetTestResultDirectory(this Microsoft.Testing.Platform.Configurations.IConfiguration! configuration) -> string!
static Microsoft.Testing.Extensions.CommandLine.ArgumentArity.operator !=(Microsoft.Testing.Extensions.CommandLine.ArgumentArity left, Microsoft.Testing.Extensions.CommandLine.ArgumentArity right) -> bool
static Microsoft.Testing.Extensions.CommandLine.ArgumentArity.operator ==(Microsoft.Testing.Extensions.CommandLine.ArgumentArity left, Microsoft.Testing.Extensions.CommandLine.ArgumentArity right) -> bool
static Microsoft.Testing.Extensions.Messages.DiscoveredTestNodeStateProperty.CachedInstance.get -> Microsoft.Testing.Extensions.Messages.DiscoveredTestNodeStateProperty!
static Microsoft.Testing.Extensions.Messages.InProgressTestNodeStateProperty.CachedInstance.get -> Microsoft.Testing.Extensions.Messages.InProgressTestNodeStateProperty!
static Microsoft.Testing.Extensions.Messages.PassedTestNodeStateProperty.CachedInstance.get -> Microsoft.Testing.Extensions.Messages.PassedTestNodeStateProperty!
static Microsoft.Testing.Extensions.Messages.SkippedTestNodeStateProperty.CachedInstance.get -> Microsoft.Testing.Extensions.Messages.SkippedTestNodeStateProperty!
static Microsoft.Testing.Extensions.Messages.TestNodeUid.implicit operator Microsoft.Testing.Extensions.Messages.TestNodeUid!(string! value) -> Microsoft.Testing.Extensions.Messages.TestNodeUid!
static Microsoft.Testing.Extensions.Messages.TestNodeUid.implicit operator string!(Microsoft.Testing.Extensions.Messages.TestNodeUid! testNode) -> string!
static Microsoft.Testing.Extensions.Messages.TestNodeUid.operator !=(Microsoft.Testing.Extensions.Messages.TestNodeUid! left, Microsoft.Testing.Extensions.Messages.TestNodeUid! right) -> bool
static Microsoft.Testing.Extensions.Messages.TestNodeUid.operator ==(Microsoft.Testing.Extensions.Messages.TestNodeUid! left, Microsoft.Testing.Extensions.Messages.TestNodeUid! right) -> bool
static Microsoft.Testing.Platform.Logging.LoggerFactoryExtensions.CreateLogger<TCategoryName>(this Microsoft.Testing.Platform.Logging.ILoggerFactory! factory) -> Microsoft.Testing.Platform.Logging.ILogger<TCategoryName>!
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogCritical(this Microsoft.Testing.Platform.Logging.ILogger! logger, string! message) -> void
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogCriticalAsync(this Microsoft.Testing.Platform.Logging.ILogger! logger, string! message) -> System.Threading.Tasks.Task!
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogDebug(this Microsoft.Testing.Platform.Logging.ILogger! logger, string! message) -> void
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogDebugAsync(this Microsoft.Testing.Platform.Logging.ILogger! logger, string! message) -> System.Threading.Tasks.Task!
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogError(this Microsoft.Testing.Platform.Logging.ILogger! logger, string! message) -> void
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogError(this Microsoft.Testing.Platform.Logging.ILogger! logger, string! message, System.Exception! ex) -> void
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogError(this Microsoft.Testing.Platform.Logging.ILogger! logger, System.Exception! ex) -> void
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogErrorAsync(this Microsoft.Testing.Platform.Logging.ILogger! logger, string! message) -> System.Threading.Tasks.Task!
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogErrorAsync(this Microsoft.Testing.Platform.Logging.ILogger! logger, string! message, System.Exception! ex) -> System.Threading.Tasks.Task!
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogErrorAsync(this Microsoft.Testing.Platform.Logging.ILogger! logger, System.Exception! ex) -> System.Threading.Tasks.Task!
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogInformation(this Microsoft.Testing.Platform.Logging.ILogger! logger, string! message) -> void
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogInformationAsync(this Microsoft.Testing.Platform.Logging.ILogger! logger, string! message) -> System.Threading.Tasks.Task!
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogTrace(this Microsoft.Testing.Platform.Logging.ILogger! logger, string! message) -> void
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogTraceAsync(this Microsoft.Testing.Platform.Logging.ILogger! logger, string! message) -> System.Threading.Tasks.Task!
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogWarning(this Microsoft.Testing.Platform.Logging.ILogger! logger, string! message) -> void
static Microsoft.Testing.Platform.Logging.LoggingExtensions.LogWarningAsync(this Microsoft.Testing.Platform.Logging.ILogger! logger, string! message) -> System.Threading.Tasks.Task!
static Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetCommandLineOptions(this System.IServiceProvider! serviceProvider) -> Microsoft.Testing.Platform.CommandLine.ICommandLineOptions!
static Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetConfiguration(this System.IServiceProvider! serviceProvider) -> Microsoft.Testing.Platform.Configurations.IConfiguration!
static Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetLoggerFactory(this System.IServiceProvider! serviceProvider) -> Microsoft.Testing.Platform.Logging.ILoggerFactory!
static Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetMessageBus(this System.IServiceProvider! serviceProvider) -> Microsoft.Testing.Platform.Messages.IMessageBus!
static Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetOutputDevice(this System.IServiceProvider! serviceProvider) -> Microsoft.Testing.Platform.OutputDevice.IOutputDevice!
static Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetRequiredService<TService>(this System.IServiceProvider! provider) -> TService
static Microsoft.Testing.Platform.Services.ServiceProviderExtensions.GetService<TService>(this System.IServiceProvider! provider) -> TService?
static readonly Microsoft.Testing.Extensions.CommandLine.ArgumentArity.ExactlyOne -> Microsoft.Testing.Extensions.CommandLine.ArgumentArity
static readonly Microsoft.Testing.Extensions.CommandLine.ArgumentArity.OneOrMore -> Microsoft.Testing.Extensions.CommandLine.ArgumentArity
static readonly Microsoft.Testing.Extensions.CommandLine.ArgumentArity.Zero -> Microsoft.Testing.Extensions.CommandLine.ArgumentArity
static readonly Microsoft.Testing.Extensions.CommandLine.ArgumentArity.ZeroOrMore -> Microsoft.Testing.Extensions.CommandLine.ArgumentArity
static readonly Microsoft.Testing.Extensions.CommandLine.ArgumentArity.ZeroOrOne -> Microsoft.Testing.Extensions.CommandLine.ArgumentArity
static readonly Microsoft.Testing.Platform.TestHost.WellKnownClients.TestingPlatformConsole -> string!
static readonly Microsoft.Testing.Platform.TestHost.WellKnownClients.VisualStudio -> string!