// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.Diagnostics;
using System.Globalization;

using Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Helpers;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using TestResult = Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult;

namespace Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.ObjectModel;

[Serializable]
[DebuggerDisplay("{DisplayName} ({Outcome})")]
public class UnitTestResult
{
    /// <summary>
    /// Initializes a new instance of the <see cref="UnitTestResult"/> class.
    /// </summary>
    internal UnitTestResult()
    {
        DatarowIndex = -1;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="UnitTestResult"/> class.
    /// </summary>
    /// <param name="testFailedException"> The test failed exception. </param>
    internal UnitTestResult(TestFailedException testFailedException)
        : this()
    {
        Outcome = testFailedException.Outcome;
        ErrorMessage = testFailedException.Message;

        if (testFailedException.StackTraceInformation != null)
        {
            ErrorStackTrace = testFailedException.StackTraceInformation.ErrorStackTrace;
            ErrorLineNumber = testFailedException.StackTraceInformation.ErrorLineNumber;
            ErrorFilePath = testFailedException.StackTraceInformation.ErrorFilePath;
            ErrorColumnNumber = testFailedException.StackTraceInformation.ErrorColumnNumber;
        }
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="UnitTestResult"/> class.
    /// </summary>
    /// <param name="outcome"> The outcome. </param>
    /// <param name="errorMessage"> The error message. </param>
    internal UnitTestResult(UnitTestOutcome outcome, string? errorMessage)
        : this()
    {
        Outcome = outcome;
        ErrorMessage = errorMessage;
    }

    /// <summary>
    /// Gets the display name for the result.
    /// </summary>
    public string? DisplayName { get; internal set; }

    /// <summary>
    /// Gets the outcome of the result.
    /// </summary>
    public UnitTestOutcome Outcome { get; internal set; }

    /// <summary>
    /// Gets the errorMessage of the result.
    /// </summary>
    public string? ErrorMessage { get; internal set; }

    /// <summary>
    /// Gets the stackTrace of the result.
    /// </summary>
    public string? ErrorStackTrace { get; internal set; }

    /// <summary>
    /// Gets the execution id of the result.
    /// </summary>
    public Guid ExecutionId { get; internal set; }

    /// <summary>
    /// Gets the parent execution id of the result.
    /// </summary>
    public Guid ParentExecId { get; internal set; }

    /// <summary>
    /// Gets the inner results count of the result.
    /// </summary>
    public int InnerResultsCount { get; internal set; }

    /// <summary>
    /// Gets the duration of the result.
    /// </summary>
    public TimeSpan Duration { get; internal set; }

    /// <summary>
    /// Gets the standard output of the result.
    /// </summary>
    public string? StandardOut { get; internal set; }

    /// <summary>
    /// Gets the Standard Error of the result.
    /// </summary>
    public string? StandardError { get; internal set; }

    /// <summary>
    /// Gets the debug trace of the result.
    /// </summary>
    public string? DebugTrace { get; internal set; }

    /// <summary>
    /// Gets additional information messages generated by TestContext.WriteLine.
    /// </summary>
    public string? TestContextMessages { get; internal set; }

    /// <summary>
    /// Gets the source code FilePath where the error was thrown.
    /// </summary>
    public string? ErrorFilePath { get; internal set; }

    /// <summary>
    /// Gets the line number in the source code file where the error was thrown.
    /// </summary>
    public int ErrorLineNumber { get; private set; }

    /// <summary>
    /// Gets the column number in the source code file where the error was thrown.
    /// </summary>
    public int ErrorColumnNumber { get; private set; }

    /// <summary>
    /// Gets data row index in data source. Set only for results of individual
    /// run of data row of a data driven test.
    /// </summary>
    public int DatarowIndex { get; internal set; }

    /// <summary>
    /// Gets the result files attached by the test.
    /// </summary>
    public IList<string>? ResultFiles { get; internal set; }

    /// <summary>
    /// Convert parameter unitTestResult to testResult.
    /// </summary>
    /// <param name="testCase"> The test Case. </param>
    /// <param name="startTime"> The start Time. </param>
    /// <param name="endTime"> The end Time. </param>
    /// <param name="computerName">The computer name.</param>
    /// <param name="currentSettings">Current MSTest settings.</param>
    /// <returns> The <see cref="TestResult"/>. </returns>
    internal TestResult ToTestResult(TestCase testCase, DateTimeOffset startTime, DateTimeOffset endTime, string computerName, MSTestSettings currentSettings)
    {
        DebugEx.Assert(testCase != null, "testCase");

        var testResult = new TestResult(testCase)
        {
            DisplayName = DisplayName,
            Duration = Duration,
            ErrorMessage = ErrorMessage,
            ErrorStackTrace = ErrorStackTrace,
            Outcome = UnitTestOutcomeHelper.ToTestOutcome(Outcome, currentSettings),
            StartTime = startTime,
            EndTime = endTime,
            ComputerName = computerName,
        };

        testResult.SetPropertyValue(Constants.ExecutionIdProperty, ExecutionId);
        testResult.SetPropertyValue(Constants.ParentExecIdProperty, ParentExecId);
        testResult.SetPropertyValue(Constants.InnerResultsCountProperty, InnerResultsCount);

        if (!StringEx.IsNullOrEmpty(StandardOut))
        {
            TestResultMessage message = new(TestResultMessage.StandardOutCategory, StandardOut);
            testResult.Messages.Add(message);
        }

        if (!StringEx.IsNullOrEmpty(StandardError))
        {
            TestResultMessage message = new(TestResultMessage.StandardErrorCategory, StandardError);
            testResult.Messages.Add(message);
        }

        if (!StringEx.IsNullOrEmpty(DebugTrace))
        {
            string debugTraceMessagesInStdOut = string.Format(CultureInfo.CurrentCulture, "{2}{2}{0}{2}{1}", Resource.DebugTraceBanner, DebugTrace, Environment.NewLine);
            TestResultMessage debugTraceMessage = new(TestResultMessage.StandardOutCategory, debugTraceMessagesInStdOut);
            testResult.Messages.Add(debugTraceMessage);
        }

        if (!StringEx.IsNullOrEmpty(TestContextMessages))
        {
            string testContextMessagesInStdOut = string.Format(CultureInfo.InvariantCulture, "{2}{2}{0}{2}{1}", Resource.TestContextMessageBanner, TestContextMessages, Environment.NewLine);
            TestResultMessage testContextMessage = new(TestResultMessage.StandardOutCategory, testContextMessagesInStdOut);
            testResult.Messages.Add(testContextMessage);
        }

        if (ResultFiles != null && ResultFiles.Count > 0)
        {
            AttachmentSet attachmentSet = new(Constants.ExecutorUri, Resource.AttachmentSetDisplayName);
            foreach (string resultFile in ResultFiles)
            {
                string pathToResultFile = PlatformServiceProvider.Instance.FileOperations.GetFullFilePath(resultFile);
                UriDataAttachment attachment = new(new Uri(pathToResultFile), resultFile);
                attachmentSet.Attachments.Add(attachment);
            }

            testResult.Attachments.Add(attachmentSet);
        }

        return testResult;
    }
}
