<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" original="../Resource.resx" target-language="zh-Hant">
    <body>
      <trans-unit id="AssemblyCleanupTimedOut">
        <source>Assembly cleanup method '{0}.{1}' timed out</source>
        <target state="translated">組件清理方法 '{0}.{1}' 已逾時</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyCleanupWasCancelled">
        <source>Assembly cleanup method '{0}.{1}' was cancelled</source>
        <target state="translated">組件清理方法 '{0}.{1}' 已取消</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeTimedOut">
        <source>Assembly initialize method '{0}.{1}' timed out</source>
        <target state="translated">組件初始化方法 '{0}.{1}' 已逾時</target>
        <note />
      </trans-unit>
      <trans-unit id="AssemblyInitializeWasCancelled">
        <source>Assembly initialize method '{0}.{1}' was cancelled</source>
        <target state="translated">組件初始化方法 '{0}.{1}' 已取消</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupTimedOut">
        <source>Class cleanup method '{0}.{1}' timed out</source>
        <target state="translated">類別清理方法 '{0}.{1}' 已逾時</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassCleanupWasCancelled">
        <source>Class cleanup method '{0}.{1}' was cancelled</source>
        <target state="translated">類別清理方法 '{0}.{1}' 已取消</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeTimedOut">
        <source>Class initialize method '{0}.{1}' timed out</source>
        <target state="translated">類別初始化方法 '{0}.{1}' 已逾時</target>
        <note />
      </trans-unit>
      <trans-unit id="ClassInitializeWasCancelled">
        <source>Class initialize method '{0}.{1}' was cancelled</source>
        <target state="translated">類別初始化方法 '{0}.{1}' 已取消</target>
        <note />
      </trans-unit>
      <trans-unit id="Execution_Test_Timeout">
        <source>Test '{0}' exceeded execution timeout period.</source>
        <target state="translated">測試 '{0}' 超過執行逾時期限。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="STAIsOnlySupportedOnWindowsWarning">
        <source>Runsettings entry '&lt;ExecutionApartmentState&gt;STA&lt;/ExecutionApartmentState&gt;' is not supported on non-Windows OSes.</source>
        <target state="translated">非 Windows OS 不支援 Runsettings 項目 '&lt;ExecutionApartmentState&gt;STA&lt;/ExecutionApartmentState&gt;'。</target>
        <note />
      </trans-unit>
      <trans-unit id="SourcesNotSupported">
        <source>Running tests in any of the provided sources is not supported for the selected platform</source>
        <target state="translated">所選取的平台不支援在任何提供的來源中執行測試</target>
        <note></note>
      </trans-unit>
      <trans-unit id="TestCleanupTimedOut">
        <source>Test cleanup method '{0}.{1}' timed out</source>
        <target state="translated">測試清理方法 '{0}.{1}' 已逾時</target>
        <note />
      </trans-unit>
      <trans-unit id="TestCleanupWasCancelled">
        <source>Test cleanup method '{0}.{1}' was cancelled</source>
        <target state="translated">測試清理方法 '{0}.{1}' 已取消</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeTimedOut">
        <source>Test initialize method '{0}.{1}' timed out</source>
        <target state="translated">測試初始化方法 '{0}.{1}' 已逾時</target>
        <note />
      </trans-unit>
      <trans-unit id="TestInitializeWasCancelled">
        <source>Test initialize method '{0}.{1}' was cancelled</source>
        <target state="translated">測試初始化方法 '{0}.{1}' 已取消</target>
        <note />
      </trans-unit>
      <trans-unit id="UTA_CleanupMethodThrows">
        <source>TestCleanup method {0}.{1} threw exception. {2}.</source>
        <target state="translated">TestCleanup 方法 {0}.{1} 擲回例外狀況。{2}。</target>
        <note />
      </trans-unit>
      <trans-unit id="UTA_EndOfInnerExceptionTrace">
        <source>--- End of inner exception stack trace ---</source>
        <target state="translated">--- 已到達內部例外狀況堆疊追蹤的結尾 ---</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ErrorMultiAssemblyClean">
        <source>UTA014: {0}: Cannot define more than one method with the AssemblyCleanup attribute inside an assembly.</source>
        <target state="translated">UTA014: {0}: 組件內不可定義一個以上具有 AssemblyCleanup 屬性的方法。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ErrorMultiAssemblyInit">
        <source>UTA013: {0}: Cannot define more than one method with the AssemblyInitialize attribute inside an assembly.</source>
        <target state="translated">UTA013: {0}: 組件內不可定義一個以上具有 AssemblyInitialize 屬性的方法。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ErrorMultiClassClean">
        <source>UTA026: {0}: Cannot define more than one method with the ClassCleanup attribute inside a class.</source>
        <target state="translated">UTA026: {0}: 類別內不可定義一個以上具有 ClassCleanup 屬性的方法。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ErrorMultiClassInit">
        <source>UTA025: {0}: Cannot define more than one method with the ClassInitialize attribute inside a class.</source>
        <target state="translated">UTA025: {0}: 類別內不可定義一個以上具有 ClassInitialize 屬性的方法。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ErrorMultiClean">
        <source>UTA024: {0}: Cannot define more than one method with the TestCleanup attribute.</source>
        <target state="translated">UTA024: {0}: 不可定義一個以上具有 TestCleanup 屬性的方法。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ErrorMultiInit">
        <source>UTA018: {0}: Cannot define more than one method with the TestInitialize attribute.</source>
        <target state="translated">UTA018: {0}: 不可定義一個以上具有 TestInitialize 屬性的方法。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ErrorTestClassIsGenericNonAbstract">
        <source>TestClass attribute defined on generic non-abstract class {0}</source>
        <target state="translated">在一般非抽象類別上定義的 TestClass 屬性 {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="UTA_InitMethodThrows">
        <source>Initialization method {0}.{1} threw exception. {2}.</source>
        <target state="translated">初始設定方法 {0}.{1} 擲回例外狀況。{2}。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_InstanceCreationError">
        <source>Unable to create instance of class {0}. Error: {1}.</source>
        <target state="translated">無法建立類別 {0} 的執行個體。錯誤: {1}。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_TestContextSetError">
        <source>Unable to set TestContext property for the class {0}. Error: {1}.</source>
        <target state="translated">無法設定類別 {0} 的 TestContext 屬性。錯誤: {1}。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTF_FailedToGetExceptionMessage">
        <source>(Failed to get the message for an exception of type {0} due to an exception.)</source>
        <target state="translated">(因為發生例外狀況，所以無法取得類型 {0} 之例外狀況的訊息。)</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ErrorInValidTestContextSignature">
        <source>UTA031: class {0} does not have valid TestContext property. TestContext must be of type TestContext, must be non-static, public and must not be read-only. For example: public TestContext TestContext.</source>
        <target state="translated">UTA031: 類別 {0} 不具備有效的 TestContext 屬性。TestContext 必須屬於 TestContext 類型，同時必須為非靜態、公用，且不可為唯讀。例如: public TestContext TestContext。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ErrorNonPublicTestClass">
        <source>UTA001: TestClass attribute defined on non-public class {0}</source>
        <target state="translated">UTA001: 在非公用類別 {0} 上定義了 TestClass 屬性</target>
        <note></note>
      </trans-unit>
      <trans-unit id="CouldNotInspectTypeDuringDiscovery">
        <source>MSTestAdapter failed to discover tests in class '{0}' of assembly '{1}' because {2}.</source>
        <target state="translated">MSTestAdapter 無法在組件 '{1}' 的類別 '{0}' 中探索測試，因為 {2}。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="EnumeratorLoadTypeErrorFormat">
        <source>{0}: {1}</source>
        <target state="translated">{0}: {1}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="TypeLoadFailed">
        <source>Unable to load types from the test source '{0}'. Some or all of the tests in this source may not be discovered.
Error: {1}</source>
        <target state="translated">無法從測試來源 '{0}' 載入類型。有可能無法探索此來源中的部分或所有測試。
錯誤: {1}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ErrorGenericTestMethod">
        <source>UTA015: A generic method cannot be a test method. {0}.{1} has invalid signature</source>
        <target state="translated">UTA015: 泛型方法不可為測試方法。{0}.{1} 具有無效的簽章</target>
        <note></note>
      </trans-unit>
      <trans-unit id="TestAssembly_FileDoesNotExist">
        <source>File does not exist: {0}</source>
        <target state="translated">檔案不存在: {0}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ErrorIncorrectTestMethodSignature">
        <source>UTA007: Method {1} defined in class {0} does not have correct signature. Test method marked with the [TestMethod] attribute must be non-static, public, return-type as void  and should not take any parameter. Example: public void Test.Class1.Test(). Additionally, if you are using async-await in test method then return-type must be 'Task' or 'ValueTask'. Example: public async Task Test.Class1.Test2()</source>
        <target state="translated">UTA007: 類別 {0} 中定義的方法 {1} 沒有正確的簽章。標記 [TestMethod] 屬性的測試方法必須為非靜態、公用、傳回類型為 void，而且不應該接受任何參數。範例: public void Test.Class1.Test()。此外，如果您在測試方法中使用 async-await，則傳回類型必須是 'Task' 或 'ValueTask'。範例: public async Task Test.Class1.Test2()</target>
        <note />
      </trans-unit>
      <trans-unit id="TestContextIsNull">
        <source>TestContext cannot be Null.</source>
        <target state="translated">TestContext 不可為 Null。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_AssemblyCleanupMethodWasUnsuccesful">
        <source>Assembly Cleanup method {0}.{1} failed. Error Message: {2}. StackTrace: {3}</source>
        <target state="translated">組件清除方法 {0}.{1} 失敗。錯誤訊息: {2}。堆疊追蹤: {3}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_AssemblyInitMethodThrows">
        <source>Assembly Initialization method {0}.{1} threw exception. {2}: {3}. Aborting test execution.</source>
        <target state="translated">組件初始設定方法 {0}.{1} 擲回例外狀況。{2}: {3}。正在中止測試執行。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ClassCleanupMethodWasUnsuccesful">
        <source>Class Cleanup method {0}.{1} failed. Error Message: {2}. Stack Trace: {3}</source>
        <target state="translated">類別清除方法 {0}.{1} 失敗。錯誤訊息: {2}。堆疊追蹤: {3}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ClassInitMethodThrows">
        <source>Class Initialization method {0}.{1} threw exception. {2}: {3}.</source>
        <target state="translated">類別初始設定方法 {0}.{1} 擲回例外狀況。{2}: {3}。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ExecuteThrewException">
        <source>Exception thrown while executing test. If using extension of TestMethodAttribute then please contact vendor. Error message: {0}, Stack trace: {1}</source>
        <target state="translated">執行測試時擲回例外狀況。如果您使用 TestMethodAttribute 的擴充功能，請連絡廠商。錯誤訊息: {0}，堆疊追蹤: {1}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_NoTestResult">
        <source>Error in executing test. No result returned by extension. If using extension of TestMethodAttribute then please contact vendor.</source>
        <target state="translated">執行測試時發生錯誤。擴充功能未傳回任何結果。如果您使用 TestMethodAttribute 的擴充功能，請連絡廠商。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ClassOrAssemblyCleanupMethodHasWrongSignature">
        <source>Method {0}.{1} has wrong signature. The method must be static, public, does not return a value and should not take any parameter. Additionally, if you are using async-await in method then return-type must be 'Task' or 'ValueTask'.</source>
        <target state="translated">方法 {0}.{1} 有錯誤的簽章。方法必須為靜態、公用、不傳回值，並且不應該接受任何參數。此外，如果您在方法中使用 async-await，則傳回類型必須是 'Task' 或 'ValueTask'。</target>
        <note />
      </trans-unit>
      <trans-unit id="UTA_ClassOrAssemblyInitializeMethodHasWrongSignature">
        <source>Method {0}.{1} has wrong signature. The method must be static, public, does not return a value and should take a single parameter of type TestContext. Additionally, if you are using async-await in method then return-type must be 'Task' or 'ValueTask'.</source>
        <target state="translated">方法 {0}.{1} 有錯誤的簽章。方法必須為靜態、公用、不傳回值，並且應接受類型為 TestContext 的單一參數。此外，如果您在方法中使用 async-await，則傳回類型必須是 'Task' 或 'ValueTask'。</target>
        <note />
      </trans-unit>
      <trans-unit id="UTA_ErrorInvalidTimeout">
        <source>UTA054: {0}.{1} has invalid Timeout attribute. The timeout must be a valid integer value and cannot be less than 0.</source>
        <target state="translated">UTA054: {0}.{1} 中具有無效的 Timeout 屬性。逾時值必須是有效的整數值，而且不可小於 0。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ErrorPredefinedTestProperty">
        <source>UTA023: {0}: Cannot define predefined property {2} on method {1}.</source>
        <target state="translated">UTA023: {0}: 不可在方法 {1} 上定義預先定義的屬性 {2}。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ErrorTestPropertyNullOrEmpty">
        <source>UTA021: {0}: Null or empty custom property defined on method {1}. The custom property must have a valid name.</source>
        <target state="translated">UTA021: {0}: 在方法 {1} 上定義了 Null 或空白的自訂屬性。自訂屬性的名稱必須有效。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_MethodDoesNotExists">
        <source>Method {0}.{1} does not exist.</source>
        <target state="translated">方法 {0}.{1} 不存在。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_NoDefaultConstructor">
        <source>Unable to get default constructor for class {0}.</source>
        <target state="translated">無法取得類別 {0} 的預設建構函式。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_TestContextLoadError">
        <source>Unable to find property {0}.TestContext. Error:{1}.</source>
        <target state="translated">找不到屬性 {0}.TestContext。錯誤: {1}。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_TestContextTypeMismatchLoadError">
        <source>The {0}.TestContext has incorrect type.</source>
        <target state="translated">{0}.TestContext 有不正確的類型。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_TestInitializeAndCleanupMethodHasWrongSignature">
        <source>Method {0}.{1} has wrong signature. The method must be non-static, public, does not return a value and should not take any parameter. Additionally, if you are using async-await in method then return-type must be 'Task' or 'ValueTask'.</source>
        <target state="translated">方法 {0}.{1} 有錯誤的簽章。方法必須為非靜態、公用、不傳回值，並且不應該接受任何參數。此外，如果您在方法中使用 async-await，則傳回類型必須是 'Task' 或 'ValueTask'。</target>
        <note />
      </trans-unit>
      <trans-unit id="UTA_TypeLoadError">
        <source>Unable to get type {0}. Error: {1}.</source>
        <target state="translated">無法取得類型 {0}。錯誤: {1}。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="TestNotFound">
        <source>Test method {0} was not found.</source>
        <target state="translated">找不到測試方法 {0}。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="DebugTraceBanner">
        <source>Debug Trace:</source>
        <target state="translated">偵錯追蹤:</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_FailedToGetTestMethodException">
        <source>Failed to obtain the exception thrown by test method {0}.{1}.</source>
        <target state="translated">無法取得測試方法 {0}.{1} 所擲回的例外狀況。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_TestMethodThrows">
        <source>Test method {0}.{1} threw exception: 
{2}</source>
        <target state="translated">測試方法 {0}.{1} 擲回例外狀況: 
{2}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_WrongThread">
        <source>{0} For UWP projects, if you are using UI objects in test consider using [UITestMethod] attribute instead of [TestMethod] to execute test in UI thread.</source>
        <target state="translated">{0} 針對 UWP 專案，如果您在測試中使用 UI 物件，請考慮使用 [UITestMethod] 屬性取代 [TestMethod] 在 UI 執行緒中執行測試。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="AttachmentSetDisplayName">
        <source>MSTestAdapterV2</source>
        <target state="translated">MSTestAdapterV2</target>
        <note></note>
      </trans-unit>
      <trans-unit id="InvalidSettingsXmlAttribute">
        <source>Invalid settings '{0}'. Unexpected XmlAttribute: '{1}'.</source>
        <target state="translated">設定 '{0}' 無效。未預期的 XmlAttribute: '{1}'。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="InvalidSettingsXmlElement">
        <source>Invalid settings '{0}'. Unexpected XmlElement: '{1}'.</source>
        <target state="translated">設定 '{0}' 無效。未預期的 XmlElement: '{1}'。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="DataDrivenResultDisplayName">
        <source>{0} (Data Row {1})</source>
        <target state="translated">{0} (資料列 {1})</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_ExpectedExceptionAttributeConstructionException">
        <source>The ExpectedException attribute defined on test method {0}.{1} threw an exception during construction.
{2}</source>
        <target state="translated">測試方法 {0} 上定義的 ExpectedException 屬性。{1} 在建構期間擲回例外狀況。
{2}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_MultipleExpectedExceptionsOnTestMethod">
        <source>The test method {0}.{1} has multiple attributes derived from ExpectedExceptionBaseAttribute defined on it. Only one such attribute is allowed.</source>
        <target state="translated">測試方法 {0}。{1} 上定義了多個衍生自 ExpectedExceptionBaseAttribute 的屬性。只允許一個此類屬性。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="LegacyScenariosNotSupportedWarning">
        <source>Warning : A testsettings file or a vsmdi file is not supported with the MSTest V2 Adapter.</source>
        <target state="translated">警告: MSTest V2 配接器不支援 testsettings 檔案 vsmdi 檔案。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="TestContextMessageBanner">
        <source>TestContext Messages:</source>
        <target state="translated">TestContext 訊息:</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_CleanupMethodThrowsGeneralError">
        <source>Error calling Test Cleanup method for test class {0}: {1}</source>
        <target state="translated">呼叫測試類別 {0} 的測試清除方法時發生錯誤: {1}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_CleanupStackTrace">
        <source>TestCleanup Stack Trace</source>
        <target state="translated">TestCleanup 堆疊追蹤</target>
        <note></note>
      </trans-unit>
      <trans-unit id="DiscoveryWarning">
        <source>[MSTest][Discovery][{0}] {1}</source>
        <target state="translated">[MSTest][Discovery][{0}] {1}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="TestParallelizationBanner">
        <source>MSTest Executor: Test Parallelization enabled for {0} (Workers: {1}, Scope: {2}).</source>
        <target state="translated">MSTest 執行程式: 已為 {0} 啟用平行測試。(Workers: {1}，Scope: {2})。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="InvalidParallelScopeValue">
        <source>Invalid value '{0}' specified for 'Scope'. Supported scopes are {1}.</source>
        <target state="translated">為 'Scope' 指定的值 '{0}' 無效。支援的範圍為 {1}。</target>
        <note>'Scope' is a setting name that shouldn't be localized.</note>
      </trans-unit>
      <trans-unit id="InvalidParallelWorkersValue">
        <source>Invalid value '{0}' specified for 'Workers'. The value should be a non-negative integer.</source>
        <target state="translated">為 'Workers' 的值 '{0}' 無效。值應為非負整數。</target>
        <note>`Workers` is a setting name that shouldn't be localized.</note>
      </trans-unit>
      <trans-unit id="TestAssembly_AssemblyDiscoveryFailure">
        <source>Failed to discover tests from assembly {0}. Reason:{1}</source>
        <target state="translated">無法從組件 {0} 中探索測試。原因:{1}</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_TestMethodExpectedParameters">
        <source>Only data driven test methods can have parameters. Did you intend to use [DataRow] or [DynamicData]?</source>
        <target state="translated">只有資料驅動的測試方法可以有參數。您想要使用的是否為 [DataRow] 或 [DynamicData]?</target>
        <note></note>
      </trans-unit>
      <trans-unit id="Execution_Test_Cancelled">
        <source>Test '{0}' execution has been aborted.</source>
        <target state="translated">測試 '{0}' 執行已中止。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="InvalidClassCleanupLifecycleValue">
        <source>Invalid value '{0}' specified for 'ClassCleanupLifecycle'. Supported scopes are {1}.</source>
        <target state="translated">為 'ClassCleanupLifecycle' 指定的值 '{0}' 無效。支援的範圍為 {1}。</target>
        <note>'ClassCleanupLifecycle' is a setting name that shouldn't be localized.</note>
      </trans-unit>
      <trans-unit id="CannotEnumerateIDataSourceAttribute">
        <source>Exception occurred while enumerating IDataSource attribute on "{0}.{1}": {2}</source>
        <target state="translated">列舉「{0}.{1}」上的 IDataSource 屬性時發生例外狀況: {2}</target>
        <note>{0}: TypeName with namespace,
{1}: Method name,
{2}: Exception details</note>
      </trans-unit>
      <trans-unit id="ExceptionOccuredWhileGettingTheExceptionDescription">
        <source>"{0}": (Failed to get exception description due to an exception of type "{1}".</source>
        <target state="translated">「{0}」: (因為類型「{1}」的例外狀況而無法取得例外狀況描述。</target>
        <note>{0}: Type of the original exception that we're trying to get the description of.
{1}: Thrown exception</note>
      </trans-unit>
      <trans-unit id="ExceptionsThrown">
        <source>Exceptions thrown:</source>
        <target state="translated">擲回的例外狀況數:</target>
        <note>This is usually precedes by TestAssembly_AssemblyDiscoveryFailure message, and preceded by list of exceptions thrown in a test discovery session.</note>
      </trans-unit>
      <trans-unit id="FailedFetchAttributeCache">
        <source>Failed to get attribute cache. Ignoring attribute inheritance and falling into 'type defines Attribute model', so that we have some data.</source>
        <target state="translated">無法取得屬性快取。略過屬性繼承並落在 'type defines Attribute model' 中，因此我們有一些資料。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="FailedToGetCustomAttribute">
        <source>Getting custom attributes for type {0} threw exception (will ignore and use the reflection way): {1}</source>
        <target state="translated">取得類型 {0} 擲回例外狀況的自訂屬性 (將會略過並使用反映方式): {1}</target>
        <note>{0}: Attribute full type name.
{1}: Exception description</note>
      </trans-unit>
      <trans-unit id="OlderTFMVersionFound">
        <source>An older version of MSTestV2 package is loaded in assembly, test discovery might fail to discover all data tests if they depend on `.runsettings` file.</source>
        <target state="translated">元件中已載入舊版的 MSTestV2 套件，如果測試探索相依於 '.runsettings' 檔案，則測試探索可能無法探索所有資料測試。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="UTA_UserCodeThrewNullValueException">
        <source>The called code threw an exception that was caught, but the exception value was null</source>
        <target state="translated">被呼叫的程式碼擲回攔截到的例外狀況，但例外狀況值為 Null</target>
        <note></note>
      </trans-unit>
      <trans-unit id="OlderTFMVersionFoundClassCleanup">
        <source>An older version of MSTestV2 package is loaded in assembly, test cleanup methods might not run as expected. Please make sure all your test projects references MSTest packages newer then version 2.2.8.</source>
        <target state="translated">元件中已載入舊版的 MSTestV2 套件，測試清理方法可能無法如預期方式執行。請確定您的所有測試專案都參考了新版的 MSTest 套件 2.2.8 版。</target>
        <note></note>
      </trans-unit>
      <trans-unit id="CannotExpandIDataSourceAttribute">
        <source>Exception occurred while expanding IDataSource rows from attribute on "{0}.{1}": {2}</source>
        <target state="translated">從「{0}.{1}」上的屬性展開 IDataSource 資料列時發生例外狀況: {2}</target>
        <note>{0}: TypeName with namespace, 
{1}: Method name,
{2}: CannotExpandIDataSourceAttribute_DuplicateDisplayName or CannotExpandIDataSourceAttribute_CannotSerialize</note>
      </trans-unit>
      <trans-unit id="CannotExpandIDataSourceAttribute_DuplicateDisplayName">
        <source>Display name "{2}" on indexes {0} and {1} are duplicate. Display names should be unique.</source>
        <target state="translated">索引 {0} 和 {1} 上的顯示名稱「{2}」重複。顯示名稱必須是唯一的。</target>
        <note>{0}, {1}: Zero based index if an element inside of an array
{2}: Test display name.</note>
      </trans-unit>
      <trans-unit id="CannotExpandIDataSourceAttribute_CannotSerialize">
        <source>Data on index {0} for "{1}" cannot be serialized. All data provided through "IDataSource" should be serializable. If you need to test non-serializable data sources, please make sure you add "TestDataSourceDiscovery" attribute on your test assembly and set the discovery option to "DuringExecution".</source>
        <target state="translated">無法序列化「{1}"」索引 {0} 上的資料。透過「IDataSource」提供的所有資料應可序列化。如果您需要測試不可序列化的資料來源，請務必在測試元件上新增「TestDataSourceDiscovery」屬性，並將探索選項設定為「DuringExecution」。</target>
        <note>{0}: Zero based index if an element inside of an array,
{1}: Test name</note>
      </trans-unit>
    </body>
  </file>
</xliff>