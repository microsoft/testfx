<?xml version="1.0" encoding="utf-8"?>
<LCX SchemaVersion="6.0" Name="D:\a\_work\1\s\src\TestFramework\TestFramework\Resources\xlf\FrameworkMessages.xlf" PsrId="308" SrcCul="en-US" xmlns="http://schemas.microsoft.com/locstudio/2006/6/lcx" TgtCul="ja-JP">
  <OwnedComments>
    <Cmt Name="Dev" />
    <Cmt Name="LcxAdmin" />
    <Cmt Name="Rccx" />
  </OwnedComments>
  <Item ItemId=";Xliff file" ItemType="0" PsrId="308" Leaf="false">
    <Disp Icon="Expand" Expand="true" Disp="true" LocTbl="false" />
    <Item ItemId=";Xliff Resources" ItemType="0" PsrId="308" Leaf="false">
      <Disp Icon="Str" Disp="true" LocTbl="false" />
      <Item ItemId=";AccessStringInvalidSyntax" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Access string has invalid syntax.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";ActualHasMismatchedElements" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[The expected collection contains {1} occurrence(s) of <{2}>. The actual collection contains {3} occurrence(s). {0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";AllItemsAreUniqueFailMsg" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Duplicate item found:<{1}>. {0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";AreEqualCaseFailMsg" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Expected:<{1}>. Case is different for actual value:<{2}>. {0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";AreEqualDeltaFailMsg" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Expected a difference no greater than <{3}> between expected value <{1}> and actual value <{2}>. {0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";AreEqualDifferentTypesFailMsg" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Expected:<{1} ({2})>. Actual:<{3} ({4})>. {0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";AreEqualFailMsg" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Expected:<{1}>. Actual:<{2}>. {0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";AreNotEqualDeltaFailMsg" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Expected a difference greater than <{3}> between expected value <{1}> and actual value <{2}>. {0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";AreNotEqualFailMsg" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Expected any value except:<{1}>. Actual:<{2}>. {0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";AreSameGivenValues" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Do not pass value types to AreSame(). Values converted to Object will never be the same. Consider using AreEqual(). {0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";ArgumentXMustDeriveFromClassY" ItemType="0" PsrId="308" InstFlg="true" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Type '{0}' is not assignable to '{1}'.]]></Val>
        </Str>
        <Disp Icon="Str" />
        <Cmts>
          <Cmt Name="Dev"><![CDATA[- {0} argument name like "applicationType"]D;]A;      - {1} fully qualified class name like "Microsoft.UI.Xaml.Application";]]></Cmt>
        </Cmts>
      </Item>
      <Item ItemId=";AssertionFailed" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[{0} failed. {1}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";AsyncUITestMethodNotSupported" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[async TestMethod with UITestMethodAttribute are not supported. Either remove async or use TestMethodAttribute.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";AsyncUITestMethodWithNoDispatcherQueue" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[UITestMethodAttribute.DispatcherQueue should not be null. To use UITestMethodAttribute within a WinUI Desktop App, remember to set the static UITestMethodAttribute.DispatcherQueue during the test initialization.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";BothCollectionsEmpty" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Both collections are empty. {0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";BothCollectionsSameElements" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Both collection contain same elements.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";BothCollectionsSameReference" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Both collection references point to the same collection object. {0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";BothSameElements" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Both collections contain the same elements. {0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";CollectionEqualReason" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[{0}({1})]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";Common_NullInMessages" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[(null)]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";Common_ObjectString" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[(object)]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";ContainsFail" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[String '{0}' does not contain string '{1}'. {2}.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";DataDrivenResultDisplayName" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[{0} ({1})]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";DoNotUseAssertEquals" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Assert.Equals should not be used for Assertions. Please use Assert.AreEqual & overloads instead.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";DynamicDataDisplayName" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Method {0} must match the expected signature: public static {1} {0}({2}).]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";DynamicDataIEnumerableEmpty" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Property or method {0} on {1} returns empty IEnumerable<object[]5D;>.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";DynamicDataIEnumerableNull" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Property or method {0} on {1} does not return IEnumerable<object[]5D;>.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";DynamicDataValueNull" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Value returned by property or method {0} shouldn't be null.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";ElementNumbersDontMatch" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[The number of elements in the collections do not match. Expected:<{1}>. Actual:<{2}>.{0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";ElementTypesAtIndexDontMatch" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Element at index {1} is not of expected type. Expected type:<{2}>. Actual type:<{3}>.{0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";ElementTypesAtIndexDontMatch2" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Element at index {1} is (null). Expected type:<{2}>.{0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";ElementsAtIndexDontMatch" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Element at index {0} do not match.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";EndsWithFail" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[String '{0}' does not end with string '{1}'. {2}.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";EqualsTesterInvalidArgs" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Invalid argument- EqualsTester can't use nulls.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";ErrorInvalidCast" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Cannot convert object of type {0} to {1}.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";InternalObjectNotValid" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[The internal object referenced is no longer valid.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";InvalidParameterToAssert" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[The parameter '{0}' is invalid. {1}.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";InvalidPropertyType" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[The property {0} has type {1}; expected type {2}.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";IsInstanceOfFailMsg" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[{0} Expected type:<{1}>. Actual type:<{2}>.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";IsMatchFail" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[String '{0}' does not match pattern '{1}'. {2}.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";IsNotInstanceOfFailMsg" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Wrong Type:<{1}>. Actual type:<{2}>. {0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";IsNotMatchFail" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[String '{0}' matches pattern '{1}'. {2}.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";NoDataRow" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[No test data source specified. Atleast one TestDataSource is required with DataTestMethodAttribute.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";NoExceptionThrown" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[No exception thrown. {1} exception was expected. {0}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";NullParameterToAssert" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[The parameter '{0}' is invalid. The value cannot be null. {1}.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";NumberOfElementsDiff" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Different number of elements.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";PrivateAccessorConstructorNotFound" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[]D;]A;      The constructor with the specified signature could not be found. You might need to regenerate your private accessor,]D;]A;      or the member may be private and defined on a base class. If the latter is true, you need to pass the type]D;]A;      that defines the member into PrivateObject's constructor.]D;]A;    ]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";PrivateAccessorMemberNotFound" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[]D;]A;      The member specified ({0}) could not be found. You might need to regenerate your private accessor,]D;]A;      or the member may be private and defined on a base class. If the latter is true, you need to pass the type]D;]A;      that defines the member into PrivateObject's constructor.]D;]A;    ]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";StartsWithFail" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[String '{0}' does not start with string '{1}'. {2}.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";UTF_ExpectedExceptionTypeMustDeriveFromException" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[The expected exception type must be System.Exception or a type derived from System.Exception.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";UTF_FailedToGetExceptionMessage" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[(Failed to get the message for an exception of type {0} due to an exception.)]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";UTF_TestMethodNoException" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Test method did not throw expected exception {0}. {1}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";UTF_TestMethodNoExceptionDefault" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Test method did not throw an exception. An exception was expected by attribute {0} defined on the test method.]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";UTF_TestMethodWrongException" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Test method threw exception {0}, but exception {1} was expected. Exception message: {2}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";UTF_TestMethodWrongExceptionDerivedAllowed" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Test method threw exception {0}, but exception {1} or a type derived from it was expected. Exception message: {2}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
      <Item ItemId=";WrongExceptionThrown" ItemType="0" PsrId="308" Leaf="true">
        <Str Cat="Text">
          <Val><![CDATA[Threw exception {2}, but exception {1} was expected. {0}]D;]A;Exception Message: {3}]D;]A;Stack Trace: {4}]]></Val>
        </Str>
        <Disp Icon="Str" />
      </Item>
    </Item>
  </Item>
<Settings Name="@vsLocTools@\default.lss" Type="Lss" /></LCX>