# Template for integration test stages that use official packages
parameters:
- name: stageName
  type: string
- name: displayName
  type: string
- name: dependsOn
  type: string
  default: BuildAndPack
- name: os
  type: string
  values:
  - Windows
  - Linux
  - macOS
- name: skipTests
  type: boolean
  default: false
- name: pool
  type: object
- name: solutionFile
  type: string
  default: ''
- name: productFilter
  type: string
  values:
  - mstest-integration-tests
  - testing-platform-integration-tests
  default: mstest-integration-tests

stages:
- stage: ${{ parameters.stageName }}
  displayName: ${{ parameters.displayName }}
  dependsOn: ${{ parameters.dependsOn }}
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      testResultsFormat: 'vstest'
      enablePublishBuildAssets: false
      enablePublishUsingPipelines: false
      enableTelemetry: true
      jobs:
      - job: ${{ parameters.os }}_IntegrationTests
        displayName: ${{ parameters.os }} Integration Tests
        timeoutInMinutes: 90
        condition: ne('${{ parameters.skipTests }}', 'True')
        pool: ${{ parameters.pool }}
        strategy:
          matrix:
            Debug:
              _BuildConfig: Debug
            Release:
              _BuildConfig: Release
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download NuGet packages'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'NuGetPackages'
            downloadPath: '$(System.DefaultWorkingDirectory)'

        - task: CopyFiles@2
          displayName: 'Copy packages to expected location'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/NuGetPackages'
            Contents: '**'
            TargetFolder: '$(Build.SourcesDirectory)/artifacts/packages/Release'

        # Platform-specific setup steps
        - ${{ if eq(parameters.os, 'Windows') }}:
          - template: /eng/windows-setup-steps.yml

        # Build integration test projects only
        - ${{ if eq(parameters.os, 'Windows') }}:
          - script: eng\common\CIBuild.cmd
              -configuration $(_BuildConfig)
              -prepareMachine
              /p:Publish=false
              /p:ProductsToBuild=${{ parameters.productFilter }}
              /p:Test=false
              /p:FastAcceptanceTest=true
            name: Build
            displayName: Build Integration Test Projects
        - ${{ else }}:
          - script: eng/common/cibuild.sh
              -configuration $(_BuildConfig)
              -prepareMachine
              /p:ProductsToBuild=${{ parameters.productFilter }}
              /p:Test=false
              /p:Publish=false
              /p:NonWindowsBuild=true
              /p:FastAcceptanceTest=true
            displayName: Build Integration Test Projects

        # Run integration tests
        - ${{ if eq(parameters.os, 'Windows') }}:
          - script: dotnet test -c $(_BuildConfig) --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\$(_BuildConfig)\TestStep.binlog --no-progress
            name: Test
            displayName: Test
            env:
              DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
              NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
              DOTNET_CLI_CONTEXT_VERBOSE: 1
        - ${{ else }}:
          - script: dotnet test --solution ${{ parameters.solutionFile }} -c $(_BuildConfig) --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\$(_BuildConfig)\TestStep.binlog --no-progress
            name: Test
            displayName: Test
            env:
              DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
              NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
              DOTNET_CLI_CONTEXT_VERBOSE: 1

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Test Results folders'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
            ArtifactName: IntegrationTestResults_${{ parameters.os }}_$(_BuildConfig)_Attempt$(System.JobAttempt)
          condition: always()

        - task: CopyFiles@2
          displayName: 'Copy binlogs'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/artifacts/tmp/$(_BuildConfig)/testsuite'
            Contents: |
              **/*.binlog
            TargetFolder: '$(Build.ArtifactStagingDirectory)/binlogs'
          condition: always()

        - task: PublishBuildArtifacts@1
          displayName: 'Publish integration tests binlogs'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/binlogs'
            ArtifactName: Integration_Tests_${{ parameters.os }}_$(_BuildConfig)_Binlogs
          condition: always()

        # Windows-specific additional steps
        - ${{ if eq(parameters.os, 'Windows') }}:
          - script: dotnet msbuild -restore
              eng/CodeCoverage.proj
              /p:Configuration=$(_BuildConfig)
              /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\CodeCoverage.binlog
            displayName: Upload coverage to codecov.io
            condition: and(succeeded(), eq(variables._BuildConfig, 'Debug'))

          - task: PublishBuildArtifacts@1
            displayName: 'Publish local dumps'
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/artifacts/CrashDumps'
              ArtifactName: IntegrationTestResults_${{ parameters.os }}_$(_BuildConfig)
            condition: failed()