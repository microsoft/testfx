# Template for test jobs that can be parameterized by OS, configuration, and specific steps
parameters:
- name: os
  type: string
  values:
  - Windows
  - Linux
  - macOS
- name: configuration
  type: string
  values:
  - Debug
  - Release
- name: pool
  type: object
- name: skipTests
  type: boolean
  default: false
- name: solutionFile
  type: string
  default: ''
- name: platformSpecificSteps
  type: stepList
  default: []

jobs:
- job: ${{ parameters.os }}_${{ parameters.configuration }}
  displayName: ${{ parameters.os }} ${{ parameters.configuration }} Tests
  timeoutInMinutes: 90
  condition: ne('${{ parameters.skipTests }}', 'True')
  pool: ${{ parameters.pool }}
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download NuGet packages'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'NuGetPackages'
      downloadPath: '$(System.DefaultWorkingDirectory)'

  - task: CopyFiles@2
    displayName: 'Copy packages to expected location'
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)/NuGetPackages'
      Contents: '**'
      TargetFolder: '$(Build.SourcesDirectory)/artifacts/packages/Release'

  # Platform-specific setup steps
  - ${{ each step in parameters.platformSpecificSteps }}:
    - ${{ step }}

  # Build test projects only
  - ${{ if eq(parameters.os, 'Windows') }}:
    - script: eng\common\CIBuild.cmd
        -configuration ${{ parameters.configuration }}
        -prepareMachine
        /p:Publish=false
        /p:ProductsToBuild=tests
        /p:Test=false
        /p:FastAcceptanceTest=true
      name: Build
      displayName: Build Test Projects
  - ${{ else }}:
    - script: eng/common/cibuild.sh
        -configuration ${{ parameters.configuration }}
        -prepareMachine
        /p:ProductsToBuild=tests
        /p:Test=false
        /p:Publish=false
        /p:NonWindowsBuild=true
        /p:FastAcceptanceTest=true
      displayName: Build Test Projects

  # Run tests
  - ${{ if eq(parameters.os, 'Windows') }}:
    - script: dotnet test -c ${{ parameters.configuration }} --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\${{ parameters.configuration }}\TestStep.binlog --no-progress
      name: Test
      displayName: Test
      env:
        DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
        NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
        DOTNET_CLI_CONTEXT_VERBOSE: 1
  - ${{ else }}:
    - script: dotnet test --solution ${{ parameters.solutionFile }} -c ${{ parameters.configuration }} --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\${{ parameters.configuration }}\TestStep.binlog --no-progress
      name: Test
      displayName: Test
      env:
        DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
        NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
        DOTNET_CLI_CONTEXT_VERBOSE: 1

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Test Results folders'
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/${{ parameters.configuration }}'
      ArtifactName: TestResults_${{ parameters.os }}_${{ parameters.configuration }}_Attempt$(System.JobAttempt)
    condition: always()

  - task: CopyFiles@2
    displayName: 'Copy binlogs'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/artifacts/tmp/${{ parameters.configuration }}/testsuite'
      Contents: |
        **/*.binlog
      TargetFolder: '$(Build.ArtifactStagingDirectory)/binlogs'
    condition: always()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish integration tests binlogs'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/binlogs'
      ArtifactName: Integration_Tests_${{ parameters.os }}_${{ parameters.configuration }}_Binlogs
    condition: always()

  # Windows-specific additional steps
  - ${{ if eq(parameters.os, 'Windows') }}:
    - ${{ if eq(parameters.configuration, 'Debug') }}:
      # Upload code coverage to codecov.io
      - script: dotnet msbuild -restore
          eng/CodeCoverage.proj
          /p:Configuration=Debug
          /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\Debug\CodeCoverage.binlog
        displayName: Upload coverage to codecov.io
        condition: succeeded()

    - task: PublishBuildArtifacts@1
      displayName: 'Publish local dumps'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/CrashDumps'
        ArtifactName: TestResults_${{ parameters.os }}_${{ parameters.configuration }}
      condition: failed()