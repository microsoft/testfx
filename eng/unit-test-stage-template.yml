# Template for unit test stages that run independently per platform
parameters:
- name: stageName
  type: string
- name: displayName
  type: string
- name: os
  type: string
  values:
  - Windows
  - Linux
  - macOS
- name: skipTests
  type: boolean
  default: false
- name: pool
  type: object
- name: solutionFile
  type: string
  default: ''
- name: productFilter
  type: string
  values:
  - mstest-unit-tests
  - testing-platform-unit-tests
  default: mstest-unit-tests

stages:
- stage: ${{ parameters.stageName }}
  displayName: ${{ parameters.displayName }}
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      testResultsFormat: 'vstest'
      enablePublishBuildAssets: false
      enablePublishUsingPipelines: false
      enableTelemetry: true
      jobs:
      - job: ${{ parameters.os }}_UnitTests
        displayName: ${{ parameters.os }} Unit Tests
        timeoutInMinutes: 90
        condition: ne('${{ parameters.skipTests }}', 'True')
        pool: ${{ parameters.pool }}
        strategy:
          matrix:
            Debug:
              _BuildConfig: Debug
            Release:
              _BuildConfig: Release
        steps:
        # Platform-specific setup steps
        - ${{ if eq(parameters.os, 'Windows') }}:
          - template: /eng/windows-setup-steps.yml

        # Build and run unit tests (no dependency on packages)
        - ${{ if eq(parameters.os, 'Windows') }}:
          - script: eng\common\CIBuild.cmd
              -configuration $(_BuildConfig)
              -prepareMachine
              /p:Publish=false
              /p:ProductsToBuild=${{ parameters.productFilter }}
              /p:Test=true
              /p:FastAcceptanceTest=true
            name: BuildAndTest
            displayName: Build and Test Unit Tests
        - ${{ else }}:
          - script: eng/common/cibuild.sh
              -configuration $(_BuildConfig)
              -prepareMachine
              /p:ProductsToBuild=${{ parameters.productFilter }}
              /p:Test=true
              /p:Publish=false
              /p:NonWindowsBuild=true
              /p:FastAcceptanceTest=true
            displayName: Build and Test Unit Tests

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Test Results folders'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
            ArtifactName: UnitTestResults_${{ parameters.os }}_$(_BuildConfig)_Attempt$(System.JobAttempt)
          condition: always()