<Project Sdk="Microsoft.NET.Sdk" DefaultTargets="Codecov">

  <PropertyGroup>
    <!-- We need to specify a framework in order for the Restore target to work -->
    <TargetFramework>$(NetCurrent)</TargetFramework>
    <ArtifactsCoverageDir>$(ArtifactsDir)coverage\</ArtifactsCoverageDir>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Codecov" Version="$(CodecovVersion)" GeneratePathProperty="true" />
  </ItemGroup>

  <Target Name="GatherCoverageInputs">
    <PropertyGroup>
      <_CodecovPath>$(PkgCodecov)\tools\Codecov.exe</_CodecovPath>
      <_LocalDotNetPath>$(DotNetRoot)\dotnet.exe</_LocalDotNetPath>
      <MergedFullCoverageDirectory>$(ArtifactsCoverageDir)full\</MergedFullCoverageDirectory>
      <MergedUnitCoverageDirectory>$(ArtifactsCoverageDir)unit\</MergedUnitCoverageDirectory>
      <MergedIntegrationCoverageDirectory>$(ArtifactsCoverageDir)integration\</MergedIntegrationCoverageDirectory>
      <CoberturaFileName>Cobertura.xml</CoberturaFileName>
    </PropertyGroup>

    <ItemGroup>
      <_CoverageReports Include="$(ArtifactsTestResultsDir)\*.coverage" />
      <_CoverageReports Include="@(_CoverageReports->'&quot;%(Identity)&quot;', ' ')" />
      <_UnitCoverageReports Include="@(_CoverageReports)" Condition="$([System.String]::Copy('%(Identity)').Contains('.UnitTests_'))" />
      <_UnitCoverageReports Include="@(_UnitCoverageReports->'&quot;%(Identity)&quot;', ' ')" />
      <_IntegrationCoverageReports Include="@(_CoverageReports)" Condition="$([System.String]::Copy('%(Identity)').Contains('.IntegrationTests_'))" />
      <_IntegrationCoverageReports Include="@(_IntegrationCoverageReports->'&quot;%(Identity)&quot;', ' ')" />
    </ItemGroup>
  </Target>

  <Target Name="MergeCoverage" DependsOnTargets="GatherCoverageInputs">
    <!-- Merge multiple coverlet reports into a single Cobertura report before uploading to codecov.io, in order to
      reduce upload size and load on the codecov.io processing servers. -->
    <Message Importance="high" Text="&quot;$(_LocalDotNetPath)&quot; coverage merge @(_CoverageReports) --output &quot;$(MergedFullCoverageDirectory)$(CoberturaFileName)&quot; --output-format Cobertura" />
    <Exec Condition="'@(_CoverageReports)' != ''" Command="&quot;$(_LocalDotNetPath)&quot; coverage merge @(_CoverageReports) --output &quot;$(MergedFullCoverageDirectory)$(CoberturaFileName)&quot; --output-format Cobertura" ConsoleToMsBuild="true" />

    <!-- Merge multiple coverlet reports into a single Cobertura report before uploading to codecov.io, in order to
      reduce upload size and load on the codecov.io processing servers. -->
    <Message Importance="high" Text="&quot;$(_LocalDotNetPath)&quot; coverage merge @(_UnitCoverageReports) --output &quot;$(MergedUnitCoverageDirectory)$(CoberturaFileName)&quot; --output-format Cobertura" />
    <Exec Condition="'@(_UnitCoverageReports)' != ''" Command="&quot;$(_LocalDotNetPath)&quot; coverage merge @(_UnitCoverageReports) --output &quot;$(MergedUnitCoverageDirectory)$(CoberturaFileName)&quot; --output-format Cobertura" ConsoleToMsBuild="true" />

    <!-- Merge multiple coverlet reports into a single Cobertura report before uploading to codecov.io, in order to
      reduce upload size and load on the codecov.io processing servers. -->
    <Message Importance="high" Text="&quot;$(_LocalDotNetPath)&quot; coverage merge @(_IntegrationCoverageReports) --output &quot;$(MergedIntegrationCoverageDirectory)$(CoberturaFileName)&quot; --output-format Cobertura" />
    <Exec Condition="'@(_IntegrationCoverageReports)' != ''" Command="&quot;$(_LocalDotNetPath)&quot; coverage merge @(_IntegrationCoverageReports) --output &quot;$(MergedIntegrationCoverageDirectory)$(CoberturaFileName)&quot; --output-format Cobertura" ConsoleToMsBuild="true" />
  </Target>

  <Target Name="Codecov" DependsOnTargets="MergeCoverage">

    <ItemGroup>
      <_CodecovFullArgs Include="-f;$(MergedFullCoverageDirectory)$(CoberturaFileName)" />
      <_CodecovUnitArgs Include="-f;$(MergedUnitCoverageDirectory)$(CoberturaFileName)" />
      <_CodecovIntegrationArgs Include="-f;$(MergedIntegrationCoverageDirectory)$(CoberturaFileName)" />

      <!-- Report an error if the upload fails -->
      <_CodecovArgs Include="--required" />

      <_CodecovFlags Include="$(Configuration)" Condition="'$(Configuration)' != ''" />
      <_CodecovProductionFlags Include="@(_CodecovFlags)" />
      <_CodecovProductionFlags Include="production" />
      <_CodecovTestFlags Include="@(_CodecovFlags)" />
      <_CodecovTestFlags Include="test" />

      <_CodecovProductionUnitFlags Include="@(_CodecovProductionFlags)" />
      <_CodecovProductionUnitFlags Include="unit" />
      <_CodecovTestUnitFlags Include="@(_CodecovTestFlags)" />
      <_CodecovTestUnitFlags Include="unit" />

      <_CodecovProductionIntegrationFlags Include="@(_CodecovProductionFlags)" />
      <_CodecovProductionIntegrationFlags Include="integration" />
      <_CodecovTestIntegrationFlags Include="@(_CodecovTestFlags)" />
      <_CodecovTestIntegrationFlags Include="integration" />
    </ItemGroup>

    <!-- Upload the unit test coverage file with a 'production' flag, which will be filtered by codecov.io to production code -->
    <Message Importance="high" Text="&quot;$(_CodecovPath)&quot; @(_CodecovUnitArgs, ' ') @(_CodecovArgs, ' ') --flag @(_CodecovProductionUnitFlags, ',')" />
    <Exec Condition="'@(_UnitCoverageReports)' != ''" Command="&quot;$(_CodecovPath)&quot; @(_CodecovUnitArgs, ' ') @(_CodecovArgs, ' ') --flag @(_CodecovProductionUnitFlags, ',')" />

    <!-- Upload the integration test coverage file with a 'production' flag, which will be filtered by codecov.io to production code -->
    <Message Importance="high" Text="&quot;$(_CodecovPath)&quot; @(_CodecovIntegrationArgs, ' ') @(_CodecovArgs, ' ') --flag @(_CodecovProductionIntegrationFlags, ',')" />
    <Exec Condition="'@(_IntegrationCoverageReports)' != ''" Command="&quot;$(_CodecovPath)&quot; @(_CodecovIntegrationArgs, ' ') @(_CodecovArgs, ' ') --flag @(_CodecovProductionIntegrationFlags, ',')" />

    <!-- Upload the full test coverage file with a 'test' flag, which will be filtered by codecov.io to test code. We
    don't further separate this by integration vs. unit tests because the answer is clear from the file path. -->
    <Message Importance="high" Text="&quot;$(_CodecovPath)&quot; @(_CodecovFullArgs, ' ') @(_CodecovArgs, ' ') --flag @(_CodecovTestFlags, ',')" />
    <Exec Condition="'@(_CoverageReports)' != ''" Command="&quot;$(_CodecovPath)&quot; @(_CodecovFullArgs, ' ') @(_CodecovArgs, ' ') --flag @(_CodecovTestFlags, ',')" />
  </Target>

</Project>
