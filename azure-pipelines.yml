trigger:
  branches:
    include:
    - main
    - rel/*

# Branch(es) that trigger(s) build(s) on PR
pr:
  branches:
    include:
    - main
    - rel/*
    - dev/v4
  paths:
    exclude:
      - .github/*
      - .devcontainer/*
      - docs/*
      - .markdownlint.json
      - .markdownlintignore
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - README.md
      - SECURITY.md
      - src/**/*.xlf

parameters:
# This option should be used with caution. This is useful for unblocking circular deps issue with testanywhere
- name: SkipTests
  displayName: "Skip tests"
  type: boolean
  default: False

variables:
  # Cannot use key:value syntax in root defined variables
  - name: _TeamName
    value: MSTest
  - name: _RunAsInternal
    value: False
  - name: _RunAsPublic
    value: True

stages:

- stage: BuildAndPack
  displayName: Build and Pack
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishTestResults: false
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: true
      enableTelemetry: true
      jobs:
      - job: Windows_BuildAndPack
        displayName: Windows Build and Pack
        timeoutInMinutes: 90
        pool:
          name: NetCore-Public
          demands: ImageOverride -equals windows.vs2022preview.amd64.open
        steps:
        - task: PowerShell@2
          displayName: 'Install Windows SDK'
          inputs:
            targetType: filePath
            filePath: './eng/install-windows-sdk.ps1'
            failOnStderr: true
            showWarnings: true

        - task: PowerShell@2
          displayName: 'Install procdump'
          inputs:
            targetType: filePath
            filePath: ./eng/install-procdump.ps1
            failOnStderr: true
            showWarnings: true

        - task: PowerShell@2
          displayName: 'Install Access Database Engine'
          inputs:
            targetType: filePath
            filePath: ./eng/install-access-database-engine.ps1
            failOnStderr: true
            showWarnings: true

        # Build only production projects, no tests
        - script: eng\common\CIBuild.cmd
            -configuration Release
            -prepareMachine
            /p:Publish=false
            /p:Test=false
          name: BuildAndPack
          displayName: Build and Pack

        - task: PublishBuildArtifacts@1
          displayName: 'Publish NuGet packages for testing'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/packages/Release'
            ArtifactName: 'NuGetPackages'
          condition: always()

- stage: TestWindows
  displayName: Test Windows
  dependsOn: BuildAndPack
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      testResultsFormat: 'vstest'
      enablePublishBuildAssets: false
      enablePublishUsingPipelines: false
      enableTelemetry: true
      jobs:
      - job: Windows_Debug
        displayName: Windows Debug Tests
        timeoutInMinutes: 90
        condition: ne('${{ parameters.SkipTests }}', 'True')
        pool:
          name: NetCore-Public
          demands: ImageOverride -equals windows.vs2022preview.amd64.open
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download NuGet packages'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'NuGetPackages'
            downloadPath: '$(System.DefaultWorkingDirectory)'

        - task: CopyFiles@2
          displayName: 'Copy packages to expected location'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/NuGetPackages'
            Contents: '**'
            TargetFolder: '$(Build.SourcesDirectory)/artifacts/packages/Release'

        - task: PowerShell@2
          displayName: 'Install Windows SDK'
          inputs:
            targetType: filePath
            filePath: './eng/install-windows-sdk.ps1'
            failOnStderr: true
            showWarnings: true

        - task: PowerShell@2
          displayName: 'Install procdump'
          inputs:
            targetType: filePath
            filePath: ./eng/install-procdump.ps1
            failOnStderr: true
            showWarnings: true

        - task: PowerShell@2
          displayName: 'Enable local dumps'
          inputs:
            targetType: 'inline'
            script: |
              New-Item -Path $(Build.SourcesDirectory)\artifacts\CrashDumps -ItemType Directory -Force
              Get-ChildItem "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps"
              New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -Name "DumpFolder" -Value "$(Build.SourcesDirectory)\artifacts\CrashDumps" -PropertyType ExpandString -Force
              New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -Name "DumpCount" -Value 10 -PropertyType DWord -Force

        - task: PowerShell@2
          displayName: 'Install Access Database Engine'
          inputs:
            targetType: filePath
            filePath: ./eng/install-access-database-engine.ps1
            failOnStderr: true
            showWarnings: true

        # Build test projects only
        - script: eng\common\CIBuild.cmd
            -configuration Debug
            -prepareMachine
            /p:Publish=false
            /p:Test=false
            /p:FastAcceptanceTest=true
          name: Build
          displayName: Build Test Projects

        - script: dotnet test -c Debug --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\Debug\TestStep.binlog --no-progress
          name: Test
          displayName: Test
          env:
            DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
            NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            DOTNET_CLI_CONTEXT_VERBOSE: 1

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Test Results folders'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/Debug'
            ArtifactName: TestResults_Windows_Debug_Attempt$(System.JobAttempt)
          condition: always()

        - task: CopyFiles@2
          displayName: 'Copy binlogs'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/artifacts/tmp/Debug/testsuite'
            Contents: |
              **/*.binlog
            TargetFolder: '$(Build.ArtifactStagingDirectory)/binlogs'
          condition: always()

        - task: PublishBuildArtifacts@1
          displayName: 'Publish integration tests binlogs'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/binlogs'
            ArtifactName: Integration_Tests_Windows_Debug_Binlogs
          condition: always()

        # Upload code coverage to codecov.io
        - script: dotnet msbuild -restore
            eng/CodeCoverage.proj
            /p:Configuration=Debug
            /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\Debug\CodeCoverage.binlog
          displayName: Upload coverage to codecov.io
          condition: succeeded()

        - task: PublishBuildArtifacts@1
          displayName: 'Publish local dumps'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/CrashDumps'
            ArtifactName: TestResults_Windows_Debug
          condition: failed()

      - job: Windows_Release
        displayName: Windows Release Tests
        timeoutInMinutes: 90
        condition: ne('${{ parameters.SkipTests }}', 'True')
        pool:
          name: NetCore-Public
          demands: ImageOverride -equals windows.vs2022preview.amd64.open
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download NuGet packages'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'NuGetPackages'
            downloadPath: '$(System.DefaultWorkingDirectory)'

        - task: CopyFiles@2
          displayName: 'Copy packages to expected location'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/NuGetPackages'
            Contents: '**'
            TargetFolder: '$(Build.SourcesDirectory)/artifacts/packages/Release'

        - task: PowerShell@2
          displayName: 'Install Windows SDK'
          inputs:
            targetType: filePath
            filePath: './eng/install-windows-sdk.ps1'
            failOnStderr: true
            showWarnings: true

        - task: PowerShell@2
          displayName: 'Install procdump'
          inputs:
            targetType: filePath
            filePath: ./eng/install-procdump.ps1
            failOnStderr: true
            showWarnings: true

        - task: PowerShell@2
          displayName: 'Enable local dumps'
          inputs:
            targetType: 'inline'
            script: |
              New-Item -Path $(Build.SourcesDirectory)\artifacts\CrashDumps -ItemType Directory -Force
              Get-ChildItem "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps"
              New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -Name "DumpFolder" -Value "$(Build.SourcesDirectory)\artifacts\CrashDumps" -PropertyType ExpandString -Force
              New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -Name "DumpCount" -Value 10 -PropertyType DWord -Force

        - task: PowerShell@2
          displayName: 'Install Access Database Engine'
          inputs:
            targetType: filePath
            filePath: ./eng/install-access-database-engine.ps1
            failOnStderr: true
            showWarnings: true

        # Build test projects only
        - script: eng\common\CIBuild.cmd
            -configuration Release
            -prepareMachine
            /p:Publish=false
            /p:Test=false
            /p:FastAcceptanceTest=true
          name: Build
          displayName: Build Test Projects

        - script: dotnet test -c Release --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\Release\TestStep.binlog --no-progress
          name: Test
          displayName: Test
          env:
            DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
            NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            DOTNET_CLI_CONTEXT_VERBOSE: 1

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Test Results folders'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/Release'
            ArtifactName: TestResults_Windows_Release_Attempt$(System.JobAttempt)
          condition: always()

        - task: CopyFiles@2
          displayName: 'Copy binlogs'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/artifacts/tmp/Release/testsuite'
            Contents: |
              **/*.binlog
            TargetFolder: '$(Build.ArtifactStagingDirectory)/binlogs'
          condition: always()

        - task: PublishBuildArtifacts@1
          displayName: 'Publish integration tests binlogs'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/binlogs'
            ArtifactName: Integration_Tests_Windows_Release_Binlogs
          condition: always()

        - task: PublishBuildArtifacts@1
          displayName: 'Publish local dumps'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/CrashDumps'
            ArtifactName: TestResults_Windows_Release
          condition: failed()

- stage: TestLinux
  displayName: Test Linux
  dependsOn: BuildAndPack
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      testResultsFormat: 'vstest'
      enablePublishBuildAssets: false
      enablePublishUsingPipelines: false
      enableTelemetry: true
      jobs:
      - job: Linux_Debug
        displayName: Linux Debug Tests
        timeoutInMinutes: 90
        condition: ne('${{ parameters.SkipTests }}', 'True')
        pool:
          name: NetCore-Public
          demands: ImageOverride -equals build.ubuntu.2004.amd64.open
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download NuGet packages'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'NuGetPackages'
            downloadPath: '$(System.DefaultWorkingDirectory)'

        - task: CopyFiles@2
          displayName: 'Copy packages to expected location'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/NuGetPackages'
            Contents: '**'
            TargetFolder: '$(Build.SourcesDirectory)/artifacts/packages/Release'

        # Build test projects only
        - script: eng/common/cibuild.sh
            -configuration Debug
            -prepareMachine
            /p:Test=false
            /p:Publish=false
            /p:NonWindowsBuild=true
            /p:FastAcceptanceTest=true
          displayName: Build Test Projects

        - script: dotnet test --solution NonWindowsTests.slnf -c Debug --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\Debug\TestStep.binlog --no-progress
          name: Test
          displayName: Test
          env:
            DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
            NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            DOTNET_CLI_CONTEXT_VERBOSE: 1

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Test Results folders'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/Debug'
            ArtifactName: TestResults_Linux_Debug_Attempt$(System.JobAttempt)
          condition: always()

        - task: CopyFiles@2
          displayName: 'Copy binlogs'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/artifacts/tmp/Debug/testsuite'
            Contents: |
              **/*.binlog
            TargetFolder: '$(Build.ArtifactStagingDirectory)/binlogs'
          condition: always()

        - task: PublishBuildArtifacts@1
          displayName: 'Publish integration tests binlogs'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/binlogs'
            ArtifactName: Integration_Tests_Linux_Debug_Binlogs
          condition: always()

      - job: Linux_Release
        displayName: Linux Release Tests
        timeoutInMinutes: 90
        condition: ne('${{ parameters.SkipTests }}', 'True')
        pool:
          name: NetCore-Public
          demands: ImageOverride -equals build.ubuntu.2004.amd64.open
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download NuGet packages'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'NuGetPackages'
            downloadPath: '$(System.DefaultWorkingDirectory)'

        - task: CopyFiles@2
          displayName: 'Copy packages to expected location'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/NuGetPackages'
            Contents: '**'
            TargetFolder: '$(Build.SourcesDirectory)/artifacts/packages/Release'

        # Build test projects only
        - script: eng/common/cibuild.sh
            -configuration Release
            -prepareMachine
            /p:Test=false
            /p:Publish=false
            /p:NonWindowsBuild=true
            /p:FastAcceptanceTest=true
          displayName: Build Test Projects

        - script: dotnet test --solution NonWindowsTests.slnf -c Release --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\Release\TestStep.binlog --no-progress
          name: Test
          displayName: Test
          env:
            DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
            NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            DOTNET_CLI_CONTEXT_VERBOSE: 1

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Test Results folders'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/Release'
            ArtifactName: TestResults_Linux_Release_Attempt$(System.JobAttempt)
          condition: always()

        - task: CopyFiles@2
          displayName: 'Copy binlogs'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/artifacts/tmp/Release/testsuite'
            Contents: |
              **/*.binlog
            TargetFolder: '$(Build.ArtifactStagingDirectory)/binlogs'
          condition: always()

        - task: PublishBuildArtifacts@1
          displayName: 'Publish integration tests binlogs'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/binlogs'
            ArtifactName: Integration_Tests_Linux_Release_Binlogs
          condition: always()

- stage: TestMacOS
  displayName: Test macOS
  dependsOn: BuildAndPack
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      testResultsFormat: 'vstest'
      enablePublishBuildAssets: false
      enablePublishUsingPipelines: false
      enableTelemetry: true
      jobs:
      - job: MacOS_Debug
        displayName: macOS Debug Tests
        timeoutInMinutes: 90
        condition: ne('${{ parameters.SkipTests }}', 'True')
        pool:
          name: Azure Pipelines
          vmImage: macos-latest
          os: macOS
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download NuGet packages'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'NuGetPackages'
            downloadPath: '$(System.DefaultWorkingDirectory)'

        - task: CopyFiles@2
          displayName: 'Copy packages to expected location'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/NuGetPackages'
            Contents: '**'
            TargetFolder: '$(Build.SourcesDirectory)/artifacts/packages/Release'

        # Build test projects only
        - script: eng/common/cibuild.sh
            -configuration Debug
            -prepareMachine
            /p:Test=false
            /p:Publish=false
            /p:NonWindowsBuild=true
            /p:FastAcceptanceTest=true
          displayName: Build Test Projects

        - script: dotnet test --solution NonWindowsTests.slnf -c Debug --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\Debug\TestStep.binlog --no-progress
          name: Test
          displayName: Test
          env:
            DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
            NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            DOTNET_CLI_CONTEXT_VERBOSE: 1

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Test Results folders'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/Debug'
            ArtifactName: TestResults_MacOS_Debug_Attempt$(System.JobAttempt)
          condition: always()

        - task: CopyFiles@2
          displayName: 'Copy binlogs'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/artifacts/tmp/Debug/testsuite'
            Contents: |
              **/*.binlog
            TargetFolder: '$(Build.ArtifactStagingDirectory)/binlogs'
          condition: always()

        - task: PublishBuildArtifacts@1
          displayName: 'Publish integration tests binlogs'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/binlogs'
            ArtifactName: Integration_Tests_MacOS_Debug_Binlogs
          condition: always()

      - job: MacOS_Release
        displayName: macOS Release Tests
        timeoutInMinutes: 90
        condition: ne('${{ parameters.SkipTests }}', 'True')
        pool:
          name: Azure Pipelines
          vmImage: macos-latest
          os: macOS
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download NuGet packages'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'NuGetPackages'
            downloadPath: '$(System.DefaultWorkingDirectory)'

        - task: CopyFiles@2
          displayName: 'Copy packages to expected location'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/NuGetPackages'
            Contents: '**'
            TargetFolder: '$(Build.SourcesDirectory)/artifacts/packages/Release'

        # Build test projects only
        - script: eng/common/cibuild.sh
            -configuration Release
            -prepareMachine
            /p:Test=false
            /p:Publish=false
            /p:NonWindowsBuild=true
            /p:FastAcceptanceTest=true
          displayName: Build Test Projects

        - script: dotnet test --solution NonWindowsTests.slnf -c Release --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\Release\TestStep.binlog --no-progress
          name: Test
          displayName: Test
          env:
            DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
            NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            DOTNET_CLI_CONTEXT_VERBOSE: 1

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Test Results folders'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/Release'
            ArtifactName: TestResults_MacOS_Release_Attempt$(System.JobAttempt)
          condition: always()

        - task: CopyFiles@2
          displayName: 'Copy binlogs'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/artifacts/tmp/Release/testsuite'
            Contents: |
              **/*.binlog
            TargetFolder: '$(Build.ArtifactStagingDirectory)/binlogs'
          condition: always()

        - task: PublishBuildArtifacts@1
          displayName: 'Publish integration tests binlogs'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/binlogs'
            ArtifactName: Integration_Tests_MacOS_Release_Binlogs
          condition: always()
