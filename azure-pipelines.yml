trigger:
  branches:
    include:
    - main
    - rel/*

# Branch(es) that trigger(s) build(s) on PR
pr:
  branches:
    include:
    - main
    - rel/*
    - dev/v4
  paths:
    exclude:
      - .github/*
      - .devcontainer/*
      - docs/*
      - .markdownlint.json
      - .markdownlintignore
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - README.md
      - SECURITY.md
      - src/**/*.xlf

parameters:
# This option should be used with caution. This is useful for unblocking circular deps issue with testanywhere
- name: SkipTests
  displayName: "Skip tests"
  type: boolean
  default: False

variables:
  # Cannot use key:value syntax in root defined variables
  - name: _TeamName
    value: MSTest
  - name: _RunAsInternal
    value: False
  - name: _RunAsPublic
    value: True

stages:

# Stage 1: Build and Unit Tests (3 parallel jobs)
- stage: BuildAndUnitTests
  displayName: Build and Unit Tests
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      testResultsFormat: 'vstest'
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: true
      enableTelemetry: true
      jobs:
      # Windows: Full build + unit tests + pack and stage artifacts
      - job: Windows_BuildPackAndUnitTests
        displayName: Windows Build, Pack, and Unit Tests
        timeoutInMinutes: 90
        condition: ne('${{ parameters.SkipTests }}', 'True')
        pool:
          name: NetCore-Public
          demands: ImageOverride -equals windows.vs2022preview.amd64.open
        strategy:
          matrix:
            Debug:
              _BuildConfig: Debug
            Release:
              _BuildConfig: Release
        steps:
        - template: /eng/windows-setup-steps.yml

        # Build all products and run unit tests
        - script: eng\common\CIBuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:Publish=false
            /p:ProductsToBuild=all
            /p:Test=false
            /p:FastAcceptanceTest=true
          name: BuildAll
          displayName: Build All Products

        # Run unit tests for both MSTest and Testing Platform
        - script: dotnet test test/UnitTests -c $(_BuildConfig) --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\$(_BuildConfig)\UnitTests.binlog --no-progress
          name: UnitTests
          displayName: Run Unit Tests
          env:
            DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
            NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            DOTNET_CLI_CONTEXT_VERBOSE: 1

        # Pack only in Release configuration
        - script: eng\common\CIBuild.cmd
            -configuration Release
            -prepareMachine
            /p:Publish=false
            /p:ProductsToBuild=all
            /p:Test=false
            /p:Pack=true
          name: Pack
          displayName: Pack NuGet Packages
          condition: eq(variables._BuildConfig, 'Release')

        - task: PublishBuildArtifacts@1
          displayName: 'Publish NuGet packages for integration testing'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/packages/Release'
            ArtifactName: 'NuGetPackages'
          condition: and(always(), eq(variables._BuildConfig, 'Release'))

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Unit Test Results'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
            ArtifactName: UnitTestResults_Windows_$(_BuildConfig)_Attempt$(System.JobAttempt)
          condition: always()

      # Linux: Unit tests only (parallel)
      - job: Linux_UnitTests
        displayName: Linux Unit Tests
        timeoutInMinutes: 90
        condition: ne('${{ parameters.SkipTests }}', 'True')
        pool:
          name: NetCore-Public
          demands: ImageOverride -equals build.ubuntu.2004.amd64.open
        strategy:
          matrix:
            Debug:
              _BuildConfig: Debug
            Release:
              _BuildConfig: Release
        steps:
        # Build and run MSTest unit tests
        - script: eng/common/cibuild.sh
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:ProductsToBuild=mstest-unit-tests
            /p:Test=true
            /p:Publish=false
            /p:NonWindowsBuild=true
            /p:FastAcceptanceTest=true
          displayName: Build and Test MSTest Unit Tests

        # Build and run Testing Platform unit tests
        - script: eng/common/cibuild.sh
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:ProductsToBuild=testing-platform-unit-tests
            /p:Test=true
            /p:Publish=false
            /p:NonWindowsBuild=true
            /p:FastAcceptanceTest=true
          displayName: Build and Test Testing Platform Unit Tests

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Unit Test Results'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
            ArtifactName: UnitTestResults_Linux_$(_BuildConfig)_Attempt$(System.JobAttempt)
          condition: always()

      # macOS: Unit tests only (parallel)
      - job: MacOS_UnitTests
        displayName: macOS Unit Tests
        timeoutInMinutes: 90
        condition: ne('${{ parameters.SkipTests }}', 'True')
        pool:
          name: Azure Pipelines
          vmImage: macos-latest
          os: macOS
        strategy:
          matrix:
            Debug:
              _BuildConfig: Debug
            Release:
              _BuildConfig: Release
        steps:
        # Build and run MSTest unit tests
        - script: eng/common/cibuild.sh
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:ProductsToBuild=mstest-unit-tests
            /p:Test=true
            /p:Publish=false
            /p:NonWindowsBuild=true
            /p:FastAcceptanceTest=true
          displayName: Build and Test MSTest Unit Tests

        # Build and run Testing Platform unit tests
        - script: eng/common/cibuild.sh
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:ProductsToBuild=testing-platform-unit-tests
            /p:Test=true
            /p:Publish=false
            /p:NonWindowsBuild=true
            /p:FastAcceptanceTest=true
          displayName: Build and Test Testing Platform Unit Tests

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Unit Test Results'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
            ArtifactName: UnitTestResults_macOS_$(_BuildConfig)_Attempt$(System.JobAttempt)
          condition: always()

# Stage 2: Integration Tests (depends on Stage 1 completion)
- stage: IntegrationTests
  displayName: Integration Tests
  dependsOn: BuildAndUnitTests
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      testResultsFormat: 'vstest'
      enablePublishBuildAssets: false
      enablePublishUsingPipelines: false
      enableTelemetry: true
      jobs:
      # Windows Integration Tests
      - job: Windows_IntegrationTests
        displayName: Windows Integration Tests
        timeoutInMinutes: 90
        condition: ne('${{ parameters.SkipTests }}', 'True')
        pool:
          name: NetCore-Public
          demands: ImageOverride -equals windows.vs2022preview.amd64.open
        strategy:
          matrix:
            Debug:
              _BuildConfig: Debug
            Release:
              _BuildConfig: Release
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download NuGet packages'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'NuGetPackages'
            downloadPath: '$(System.DefaultWorkingDirectory)'
        - task: CopyFiles@2
          displayName: 'Copy packages to expected location'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/NuGetPackages'
            Contents: '**'
            TargetFolder: '$(Build.SourcesDirectory)/artifacts/packages/Release'
        - template: /eng/windows-setup-steps.yml

        # Build and run MSTest integration tests
        - script: eng\common\CIBuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:Publish=false
            /p:ProductsToBuild=mstest-integration-tests
            /p:Test=false
            /p:FastAcceptanceTest=true
          displayName: Build MSTest Integration Tests
        - script: dotnet test test/IntegrationTests/MSTest.Acceptance.IntegrationTests test/IntegrationTests/MSTest.IntegrationTests test/IntegrationTests/PlatformServices.Desktop.IntegrationTests test/IntegrationTests/MSTest.VstestConsoleWrapper.IntegrationTests -c $(_BuildConfig) --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\$(_BuildConfig)\MSTestIntegrationTests.binlog --no-progress
          displayName: Run MSTest Integration Tests
          env:
            DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
            NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            DOTNET_CLI_CONTEXT_VERBOSE: 1

        # Build and run Testing Platform integration tests
        - script: eng\common\CIBuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:Publish=false
            /p:ProductsToBuild=testing-platform-integration-tests
            /p:Test=false
            /p:FastAcceptanceTest=true
          displayName: Build Testing Platform Integration Tests
        - script: dotnet test test/IntegrationTests/Microsoft.Testing.Platform.Acceptance.IntegrationTests -c $(_BuildConfig) --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\$(_BuildConfig)\MTPIntegrationTests.binlog --no-progress
          displayName: Run Testing Platform Integration Tests
          env:
            DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
            NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            DOTNET_CLI_CONTEXT_VERBOSE: 1

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Integration Test Results'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
            ArtifactName: IntegrationTestResults_Windows_$(_BuildConfig)_Attempt$(System.JobAttempt)
          condition: always()

      # Linux Integration Tests
      - job: Linux_IntegrationTests
        displayName: Linux Integration Tests
        timeoutInMinutes: 90
        condition: ne('${{ parameters.SkipTests }}', 'True')
        pool:
          name: NetCore-Public
          demands: ImageOverride -equals build.ubuntu.2004.amd64.open
        strategy:
          matrix:
            Debug:
              _BuildConfig: Debug
            Release:
              _BuildConfig: Release
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download NuGet packages'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'NuGetPackages'
            downloadPath: '$(System.DefaultWorkingDirectory)'
        - task: CopyFiles@2
          displayName: 'Copy packages to expected location'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/NuGetPackages'
            Contents: '**'
            TargetFolder: '$(Build.SourcesDirectory)/artifacts/packages/Release'

        # Build and run MSTest integration tests
        - script: eng/common/cibuild.sh
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:ProductsToBuild=mstest-integration-tests
            /p:Test=false
            /p:Publish=false
            /p:NonWindowsBuild=true
            /p:FastAcceptanceTest=true
          displayName: Build MSTest Integration Tests
        - script: dotnet test test/IntegrationTests/MSTest.Acceptance.IntegrationTests test/IntegrationTests/MSTest.IntegrationTests test/IntegrationTests/PlatformServices.Desktop.IntegrationTests test/IntegrationTests/MSTest.VstestConsoleWrapper.IntegrationTests -c $(_BuildConfig) --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\$(_BuildConfig)\MSTestIntegrationTests.binlog --no-progress
          displayName: Run MSTest Integration Tests
          env:
            DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
            NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            DOTNET_CLI_CONTEXT_VERBOSE: 1

        # Build and run Testing Platform integration tests
        - script: eng/common/cibuild.sh
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:ProductsToBuild=testing-platform-integration-tests
            /p:Test=false
            /p:Publish=false
            /p:NonWindowsBuild=true
            /p:FastAcceptanceTest=true
          displayName: Build Testing Platform Integration Tests
        - script: dotnet test test/IntegrationTests/Microsoft.Testing.Platform.Acceptance.IntegrationTests -c $(_BuildConfig) --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\$(_BuildConfig)\MTPIntegrationTests.binlog --no-progress
          displayName: Run Testing Platform Integration Tests
          env:
            DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
            NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            DOTNET_CLI_CONTEXT_VERBOSE: 1

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Integration Test Results'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
            ArtifactName: IntegrationTestResults_Linux_$(_BuildConfig)_Attempt$(System.JobAttempt)
          condition: always()

      # macOS Integration Tests
      - job: MacOS_IntegrationTests
        displayName: macOS Integration Tests
        timeoutInMinutes: 90
        condition: ne('${{ parameters.SkipTests }}', 'True')
        pool:
          name: Azure Pipelines
          vmImage: macos-latest
          os: macOS
        strategy:
          matrix:
            Debug:
              _BuildConfig: Debug
            Release:
              _BuildConfig: Release
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download NuGet packages'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'NuGetPackages'
            downloadPath: '$(System.DefaultWorkingDirectory)'
        - task: CopyFiles@2
          displayName: 'Copy packages to expected location'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/NuGetPackages'
            Contents: '**'
            TargetFolder: '$(Build.SourcesDirectory)/artifacts/packages/Release'

        # Build and run MSTest integration tests
        - script: eng/common/cibuild.sh
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:ProductsToBuild=mstest-integration-tests
            /p:Test=false
            /p:Publish=false
            /p:NonWindowsBuild=true
            /p:FastAcceptanceTest=true
          displayName: Build MSTest Integration Tests
        - script: dotnet test test/IntegrationTests/MSTest.Acceptance.IntegrationTests test/IntegrationTests/MSTest.IntegrationTests test/IntegrationTests/PlatformServices.Desktop.IntegrationTests test/IntegrationTests/MSTest.VstestConsoleWrapper.IntegrationTests -c $(_BuildConfig) --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\$(_BuildConfig)\MSTestIntegrationTests.binlog --no-progress
          displayName: Run MSTest Integration Tests
          env:
            DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
            NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            DOTNET_CLI_CONTEXT_VERBOSE: 1

        # Build and run Testing Platform integration tests
        - script: eng/common/cibuild.sh
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:ProductsToBuild=testing-platform-integration-tests
            /p:Test=false
            /p:Publish=false
            /p:NonWindowsBuild=true
            /p:FastAcceptanceTest=true
          displayName: Build Testing Platform Integration Tests
        - script: dotnet test test/IntegrationTests/Microsoft.Testing.Platform.Acceptance.IntegrationTests -c $(_BuildConfig) --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\TestResults\$(_BuildConfig)\MTPIntegrationTests.binlog --no-progress
          displayName: Run Testing Platform Integration Tests
          env:
            DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
            NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
            DOTNET_CLI_CONTEXT_VERBOSE: 1

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Integration Test Results'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
            ArtifactName: IntegrationTestResults_macOS_$(_BuildConfig)_Attempt$(System.JobAttempt)
          condition: always()
