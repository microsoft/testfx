# Branches that trigger a build on commit
trigger:
- main
- rel/*

# Branch(es) that trigger(s) build(s) on PR
pr:
  branches:
    include:
    - main
    - rel/*
  paths:
    exclude:
      - .github/*
      - .devcontainer/*
      - docs/*
      - .markdownlint.json
      - .markdownlintignore
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - README.md
      - SECURITY.md

parameters:
- name: isRTM
  displayName: "Release a RTM version?"
  type: boolean
  default: False

variables:
  # Cannot use key:value syntax in root defined variables
  - name: _TeamName
    value: MSTest
  - name: Codeql.Enabled
    value: true
  - name: _RunAsInternal
    value: ${{ and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}
  - name: _RunAsPublic
    value: ${{ eq(variables._RunAsInternal, False) }}
  # Set default value for variables of PR and Public builds
  - name: _SignType
    value: test
  - name: _SignArgs
    value: ''
  - name: _Sign
    value: False
  - name: _InternalBuildArgs
    value: ' '

  # Produce real signed binaries for Internal builds
  - ${{ if eq(variables._RunAsInternal, True) }}:
    - group: DotNet-Symbol-Server-Pats
    - name: _SignType
      value: real
    - name: _SignArgs
      value: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName) /p:Sign=$(_Sign)
    - name: _Sign
      value: True
    - name: _InternalBuildArgs
      value: /p:DotNetSignType=$(_SignType)
        /p:TeamName=$(_TeamName)
        /p:DotNetPublishUsingPipelines=true
        /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
        /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
        /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

stages:

- stage: build
  displayName: Build
  jobs:

  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      testResultsFormat: 'vstest'
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: true
      enableTelemetry: true
      jobs:
      - job: Windows
        timeoutInMinutes: 120
        pool:
          ${{ if eq(variables._RunAsPublic, True) }}:
            name: NetCore-Public
            demands: ImageOverride -equals windows.vs2022.amd64.open
          ${{ if eq(variables._RunAsInternal, True) }}:
            name: NetCore1ESPool-Internal
            demands: ImageOverride -equals 1es-windows-2022
        strategy:
          matrix:
            Release:
              _BuildConfig: Release
            ${{ if eq(variables._RunAsPublic, True) }}:
              Debug:
                _BuildConfig: Debug
        steps:
        - task: PowerShell@2
          displayName: 'Install Windows SDK'
          inputs:
            targetType: filePath
            filePath: './eng/Install-WindowsSDK.ps1'
            failOnStderr: true
            showWarnings: true

        # This steps help to understand versions of .NET runtime installed on the machine,
        # which is useful to diagnose some governance issues.
        - task: DotNetCoreCLI@2
          displayName: 'dotnet --info'
          inputs:
            command: custom
            custom: '--info'

        - script: eng\common\CIBuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            $(_InternalBuildArgs)
            /p:Test=false
          name: Build
          displayName: Build

        # -ci is allowing to import some environment variables and some required configurations
        - script: Test.cmd
            -configuration $(_BuildConfig)
            -ci
          name: Test
          displayName: Test

        # This step is only helpful for diagnosing some issues with vstest/test host that would not appear
        # through the console or trx
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Test Results folders'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
            ArtifactName: TestResults
          condition: failed()

        - ${{ if eq(variables._RunAsInternal, True) }}:
          - task: NuGetAuthenticate@0
            displayName: 'NuGet Authenticate to test-tools feed'

          - task: NuGetCommand@2
            displayName: 'Publish NuGet packages to test-tools feed'
            inputs:
              command: push
              packagesToPush: 'artifacts/packages/**/*.nupkg;'
              publishVstsFeed: 'public/test-tools'

  - ${{ if eq(variables._RunAsInternal, True) }}:
    - template: /eng/common/templates/job/onelocbuild.yml
      parameters:
        UseCheckedInLocProjectJson: true
        SkipLocProjectJsonGeneration: true
        GitHubOrg: microsoft
        MirrorRepo: testfx
        LclPackageId: LCL-JUNO-PROD-TESTFX

- ${{ if eq(variables._RunAsInternal, True) }}:
  - template: eng\common\templates\post-build\post-build.yml
    parameters:
      publishingInfraVersion: 3
