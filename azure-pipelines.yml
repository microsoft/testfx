# Branch(es) that trigger(s) build(s) on PR
pr:
  branches:
    include:
    - main
    - rel/*
  paths:
    exclude:
      - .github/*
      - .devcontainer/*
      - docs/*
      - .markdownlint.json
      - .markdownlintignore
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - README.md
      - SECURITY.md
      - src/**/*.xlf

parameters:
# This option should be used with caution. This is useful for unblocking circular deps issue with testanywhere
- name: SkipTests
  displayName: "Skip tests"
  type: boolean
  default: False

variables:
  # Cannot use key:value syntax in root defined variables
  - name: _TeamName
    value: MSTest
  - name: _RunAsInternal
    value: False
  - name: _RunAsPublic
    value: True

stages:

- stage: build
  displayName: Build
  jobs:

  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      testResultsFormat: 'vstest'
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: true
      enableTelemetry: true
      jobs:
      - job: Windows
        timeoutInMinutes: 90
        pool:
          name: NetCore-Public
          demands: ImageOverride -equals windows.vs2022preview.amd64.open
        strategy:
          matrix:
            Release:
              _BuildConfig: Release
            Debug:
              _BuildConfig: Debug
        steps:
        - task: PowerShell@2
          displayName: 'Install Windows SDK'
          inputs:
            targetType: filePath
            filePath: './eng/install-windows-sdk.ps1'
            failOnStderr: true
            showWarnings: true

        - task: PowerShell@2
          displayName: 'Install procdump'
          inputs:
            targetType: filePath
            filePath: ./eng/install-procdump.ps1
            failOnStderr: true
            showWarnings: true

        - task: PowerShell@2
          displayName: 'Install Access Database Engine'
          inputs:
            targetType: filePath
            filePath: ./eng/install-access-database-engine.ps1
            failOnStderr: true
            showWarnings: true

        - script: eng\common\CIBuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:Test=false
            /p:FastAcceptanceTest=true
          name: Build
          displayName: Build

        - ${{ if eq(parameters.SkipTests, False) }}:

          # Because the build step is using -ci flag, restore is done in a local .packages directory.
          # We need to pass NUGET_PACKAGES so that when dotnet test is doing evaluation phase on the projects, it can resolve .props/.targets from packages and import them.
          # Otherwise, props/targets are not imported. It's important that they are imported so that IsTestingPlatformApplication ends up being set.
          - script: $(Build.SourcesDirectory)/.dotnet/dotnet test -c $(_BuildConfig) --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\TestStep.binlog
            name: Test
            displayName: Test
            env:
              DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
              NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages

          # This step is only helpful for diagnosing some issues with vstest/test host that would not appear
          # through the console or trx
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Test Results folders'
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
              ArtifactName: TestResults_Windows_$(_BuildConfig)
            condition: failed()

          - task: CopyFiles@2
            displayName: 'Copy binlogs'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)/artifacts/tmp/$(_BuildConfig)/testsuite'
              Contents: |
                **/*.binlog
              TargetFolder: '$(Build.ArtifactStagingDirectory)/binlogs'
            condition: always()

          - task: PublishBuildArtifacts@1
            displayName: 'Publish integration tests binlogs'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/binlogs'
              ArtifactName: Integration_Tests_Windows_Binlogs_$(_BuildConfig)
            condition: always()

          # Upload code coverage to codecov.io
          - script: $(Build.SourcesDirectory)/.dotnet/dotnet msbuild -restore
              eng/CodeCoverage.proj
              /p:Configuration=$(_BuildConfig)
              /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\CodeCoverage.binlog
            displayName: Upload coverage to codecov.io
            condition: and(succeeded(), eq(variables._BuildConfig, 'Debug'))

      - job: Linux
        timeoutInMinutes: 90
        pool:
          name: NetCore-Public
          demands: ImageOverride -equals build.ubuntu.2004.amd64.open
        strategy:
          matrix:
            Release:
              _BuildConfig: Release
            Debug:
              _BuildConfig: Debug
        steps:
        - script: eng/common/cibuild.sh
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:Test=false
            /p:NonWindowsBuild=true
            /p:FastAcceptanceTest=true
          displayName: Build

        - ${{ if eq(parameters.SkipTests, False) }}:
          # Because the build step is using -ci flag, restore is done in a local .packages directory.
          # We need to pass NUGET_PACKAGES so that when dotnet test is doing evaluation phase on the projects, it can resolve .props/.targets from packages and import them.
          # Otherwise, props/targets are not imported. It's important that they are imported so that IsTestingPlatformApplication ends up being set.
          - script: $(Build.SourcesDirectory)/.dotnet/dotnet test --solution NonWindowsTests.slnf -c $(_BuildConfig) --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\TestStep.binlog
            name: Test
            displayName: Test
            env:
              DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
              NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages

          # This step is only helpful for diagnosing some issues with vstest/test host that would not appear
          # through the console or trx
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Test Results folders'
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
              ArtifactName: TestResults_Linux_$(_BuildConfig)
            condition: failed()

          - task: CopyFiles@2
            displayName: 'Copy binlogs'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)/artifacts/tmp/$(_BuildConfig)/testsuite'
              Contents: |
                **/*.binlog
              TargetFolder: '$(Build.ArtifactStagingDirectory)/binlogs'
            condition: always()

          - task: PublishBuildArtifacts@1
            displayName: 'Publish integration tests binlogs'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/binlogs'
              ArtifactName: Integration_Tests_Linux_Binlogs_$(_BuildConfig)
            condition: always()

      - job: MacOS
        timeoutInMinutes: 90
        pool:
          name: Azure Pipelines
          vmImage: macos-latest
          os: macOS
        strategy:
          matrix:
            Release:
              _BuildConfig: Release
            Debug:
              _BuildConfig: Debug
        steps:
        - script: eng/common/cibuild.sh
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:Test=false
            /p:NonWindowsBuild=true
            /p:FastAcceptanceTest=true
          displayName: Build

        - ${{ if eq(parameters.SkipTests, False) }}:
          # Because the build step is using -ci flag, restore is done in a local .packages directory.
          # We need to pass NUGET_PACKAGES so that when dotnet test is doing evaluation phase on the projects, it can resolve .props/.targets from packages and import them.
          # Otherwise, props/targets are not imported. It's important that they are imported so that IsTestingPlatformApplication ends up being set.
          - script: $(Build.SourcesDirectory)/.dotnet/dotnet test --solution NonWindowsTests.slnf -c $(_BuildConfig) --no-build -bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\TestStep.binlog
            name: Test
            displayName: Test
            env:
              DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
              NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages

          # This step is only helpful for diagnosing some issues with vstest/test host that would not appear
          # through the console or trx
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Test Results folders'
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
              ArtifactName: TestResults_MacOs_$(_BuildConfig)
            condition: failed()

          - task: CopyFiles@2
            displayName: 'Copy binlogs'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)/artifacts/tmp/$(_BuildConfig)/testsuite'
              Contents: |
                **/*.binlog
              TargetFolder: '$(Build.ArtifactStagingDirectory)/binlogs'
            condition: always()

          - task: PublishBuildArtifacts@1
            displayName: 'Publish integration tests binlogs'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/binlogs'
              ArtifactName: Integration_Tests_MacOS_Binlogs_$(_BuildConfig)
            condition: always()
