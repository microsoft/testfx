<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Import localization specific Targets if enabled. -->
  <Import Project="$(MSBuildThisFileDirectory)TestFx.Loc.props" Condition=" '$(IsTest)' == 'false' and '$(IsLocalizationEnabled)' == 'true' "/>
  <Import Project="$(RepoRoot)scripts\build\TestFx.Sign.targets" Condition=" '$(TestFxSigningTargetsImported)' != 'true' " />

  <!-- StyleCop settings. -->
  <PropertyGroup Condition=" '$(ShouldEnableStyleCop)' != 'false' and '$(IsVsixProj)' != 'true' ">
    <!--
      Make sure any documentation comments which are included in code get checked for syntax during the build, but do
      not report warnings for missing comments.

      CS1573: Parameter 'parameter' has no matching param tag in the XML comment for 'parameter' (but other parameters do)
      CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
    -->
    <DocumentationFile>$(OutputPath)$(AssemblyName).xml</DocumentationFile>
    <NoWarn>$(NoWarn),1573,1591,1712</NoWarn>
</PropertyGroup>
  <ItemGroup Condition=" '$(ShouldEnableStyleCop)' != 'false' and '$(IsVsixProj)' != 'true' ">
    <AdditionalFiles Include="$(RepoRoot)scripts\build\stylecop.json">
      <Link>stylecop.json</Link>
    </AdditionalFiles>

    <PackageReference Include="StyleCop.Analyzers" Version="$(StyleCopAnalyzersVersion)">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!--
    Include PublicApi analyzers into all projects that are in our src directory, this can't use TestProject == true
    because some projects in test are not tests, but we don't want to analyze those for public apis, because we
    don't ship them.
    Use relative path between the project and the root to avoid including the analyzer if the path above the root contains 'src' (e.g. C:\src\vstest).
  -->
  <ItemGroup Condition="$([MSBuild]::MakeRelative($(RepoRoot), $(MSBuildProjectFullPath)).StartsWith('src/')) OR $([MSBuild]::MakeRelative($(RepoRoot), $(MSBuildProjectFullPath)).StartsWith('src\'))">
    <PackageReference Include="Microsoft.CodeAnalysis.PublicApiAnalyzers" Version="$(RoslynPublicApiAnalyzersVersion)">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!-- WARNING remove this when SDK-style project conversion is being done. -->
  <!--
       We are generating an AssemblyInfo file with certain attributes here,
       SDK-style project does that automatically (https://github.com/dotnet/sdk/blob/58e663374580ef082a82f7cb75ea233275d432cd/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.GenerateAssemblyInfo.targets)
       we should use that behavior instead.

       AssemblyVersion SHOULD STAY AS 14.0.0.0 TO ENSURE BACKWARD COMPABILITY FOR SOME CASES

            AssemblyVersion              = "14.0.0.0"

       AssemblyFileVersion NEEDS TO BE TESTED, MAYBE THIS IS NO LONGER REQUIRED
            AssemblyFileVersion          = "14.0.0.1"

       So if you E2E tests are failing, and you removed this comment,
       I hope you see it in diff.
  -->
  <!-- Generate AssemblyInfo.cs -->
  <PropertyGroup>
    <!-- We want to define defaults for some variables to ensure that they can still be used when building from VS -->
    <TFBuildNumber Condition=" '$(TFBuildNumber)' == '' ">0.1</TFBuildNumber>
    <LegacyMajorVersion>14</LegacyMajorVersion>
    <LegacyMinorVersion>0</LegacyMinorVersion>
    <MajorMinorPatch Condition=" '$(MajorMinorPatch)' == '' ">255.255.255</MajorMinorPatch>
    <VersionSuffix Condition=" '$(VersionSuffix)' == '' ">dev</VersionSuffix>
    <GeneratedAssemblyInfoFile Condition="'$(GeneratedAssemblyInfoFile)' ==''">$(IntermediateOutputPath)$(MSBuildProjectName).AssemblyInfo.cs</GeneratedAssemblyInfoFile>
    <Company>Microsoft Corporation</Company>
    <Copyright>© Microsoft Corporation. All rights reserved.</Copyright>
    <AssemblyVersion>$(LegacyMajorVersion).$(LegacyMinorVersion).0.0</AssemblyVersion>
    <BuildVersion Condition=" '$(BuildVersion)' == '' ">$(LegacyMajorVersion).$(LegacyMinorVersion).$(TFBuildNumber)</BuildVersion>
    <FileVersion Condition=" '$(FileVersion)' == '' ">$(BuildVersion)</FileVersion>
    <InformationalVersion>$(MajorMinorPatch)-$(VersionSuffix).Branch.$(BranchName).Sha.$(CommitHash)</InformationalVersion>
  </PropertyGroup>

  <ItemGroup>
    <AssemblyMetadata Include="Branch" Value="$(BranchName)" />
    <AssemblyMetadata Include="Commit" Value="$(CommitHash)" />
    <AssemblyMetadata Include="RepositoryUrl" Value="https://github.com/microsoft/testfx" />
  </ItemGroup>

  <ItemGroup Condition=" '$(GenerateAssemblyInfo)' == 'false' ">
    <AssemblyAttribute Include="System.Reflection.AssemblyCompanyAttribute" Condition="'$(Company)' != '' and '$(GenerateAssemblyCompanyAttribute)' == 'true'">
      <_Parameter1>$(Company)</_Parameter1>
    </AssemblyAttribute>
    <AssemblyAttribute Include="System.Reflection.AssemblyCopyrightAttribute" Condition="'$(Copyright)' != '' and '$(GenerateAssemblyCopyrightAttribute)' == 'true'">
      <_Parameter1>$(Copyright)</_Parameter1>
    </AssemblyAttribute>
    <AssemblyAttribute Include="System.Reflection.AssemblyVersionAttribute" Condition="'$(AssemblyVersion)' != ''">
      <_Parameter1>$(AssemblyVersion)</_Parameter1>
    </AssemblyAttribute>
    <AssemblyAttribute Include="System.Reflection.AssemblyFileVersionAttribute" Condition="'$(FileVersion)' != ''">
      <_Parameter1>$(FileVersion)</_Parameter1>
    </AssemblyAttribute>
    <AssemblyAttribute Include="System.Reflection.AssemblyInformationalVersionAttribute" Condition="'$(InformationalVersion)' != ''">
      <_Parameter1>$(InformationalVersion)</_Parameter1>
    </AssemblyAttribute>
    <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute" Condition="'$(GenerateRepositoryUrlAttribute)' != 'true'" >
      <_Parameter1>RepositoryUrl</_Parameter1>
      <_Parameter2 Condition="'$(RepositoryUrl)' != ''">$(RepositoryUrl)</_Parameter2>
      <_Parameter2 Condition="'$(RepositoryUrl)' == ''">$(PrivateRepositoryUrl)</_Parameter2>
    </AssemblyAttribute>
    <AssemblyAttribute Include="System.Reflection.AssemblyMetadata" Condition="'$(GenerateAssemblyMetadataAttributes)' != 'true'">
        <_Parameter1>%(AssemblyMetadata.Identity)</_Parameter1>
        <_Parameter2>%(AssemblyMetadata.Value)</_Parameter2>
    </AssemblyAttribute>
  </ItemGroup>

  <Target Name="GenerateAssemblyInfoFile" Condition=" '$(GenerateAssemblyInfo)' == 'false' ">
    <ItemGroup>
      <!-- Ensure the generated assemblyinfo file is not already part of the Compile sources, as a workaround for https://github.com/dotnet/sdk/issues/114 -->
      <Compile Remove="$(GeneratedAssemblyInfoFile)" />
    </ItemGroup>

    <WriteCodeFragment AssemblyAttributes="@(AssemblyVersionAttribute)" Language="C#" OutputFile="$(GeneratedAssemblyInfoFile)">
      <Output TaskParameter="OutputFile" ItemName="Compile" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>
  </Target>
  <!-- / WARNING remove this when SDK-style project conversion is being done. -->
</Project>
